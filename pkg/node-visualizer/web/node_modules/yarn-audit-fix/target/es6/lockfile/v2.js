import { formatFlags, formatYaml, invoke, mapFlags, parseYaml } from '../util.js';
export const parse = (raw) => {
    const data = parseYaml(raw);
    delete data.__metadata;
    return Object.entries(data).reduce((m, [key, value]) => {
        key.split(', ').forEach((k) => {
            m[k] = value;
        });
        return m;
    }, {});
};
export const patchEntry = (entry, name, newVersion, npmBin) => {
    entry.version = newVersion;
    entry.resolution = `${name}@npm:${newVersion}`;
    // NOTE seems like deps are not updated by `yarn mode='--update-lockfile'`, only checksums
    entry.dependencies =
        JSON.parse(invoke(npmBin, ['view', `${name}@${newVersion}`, 'dependencies', '--json'], process.cwd(), true, false) || 'null') || undefined;
    delete entry.checksum;
    return entry;
};
export const format = (lockfile) => {
    const keymap = Object.entries(lockfile).reduce((m, [k, { resolution }]) => {
        const entry = m[resolution] || (m[resolution] = []);
        entry.push(k);
        return m;
    }, {});
    const data = Object.values(lockfile).reduce((m, value) => {
        const key = keymap[value.resolution].join(', ');
        m[key] = value;
        return m;
    }, {
        __metadata: {
            version: 5,
            cacheKey: 8,
        },
    });
    return `# This file is generated by running "yarn install" inside your project.
# Manual changes might be lost - proceed with caution!

${formatYaml(data, {
        quotingType: '"',
        flowLevel: -1,
        lineWidth: -1,
    })
        .replace(/\n([^\s"].+):\n/g, '\n"$1":\n')
        .replace(/\n(\S)/g, '\n\n$1')
        .replace(/resolution: ([^\n"]+)/g, 'resolution: "$1"')}`;
};
export const audit = (flags, temp, bins) => {
    const mapping = {
        'audit-level': 'severity',
        level: 'severity',
        groups: {
            key: 'environment',
            values: {
                dependencies: 'production',
            },
        },
        only: {
            key: 'environment',
            values: {
                prod: 'production',
            },
        },
    };
    const _flags = formatFlags(mapFlags(flags, mapping), 'groups', 'verbose');
    const report = invoke(bins.yarn, ['npm', 'audit', '--all', '--json', '--recursive', ..._flags], temp, !!flags.silent, false, false);
    return parseAuditReport(report);
};
export const parseAuditReport = (data) => Object.values(JSON.parse(data).advisories).reduce((m, { vulnerable_versions, module_name, patched_versions }) => {
    m[module_name] = {
        patched_versions,
        vulnerable_versions,
        module_name,
    };
    return m;
}, {});
