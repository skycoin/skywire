declare module 'yarn-audit-fix' {
  /** */
  export * from 'yarn-audit-fix/target/es6';
}
// Generated by dts-bundle v0.7.5
// Dependencies for this module:
//   ../../../../../../../fs-extra
//   ../../../../../../../js-yaml

declare module 'yarn-audit-fix/target/es6' {
    export { getFlow } from 'yarn-audit-fix/target/es6/flows';
    export * from 'yarn-audit-fix/target/es6/ifaces';
    export * from 'yarn-audit-fix/target/es6/lockfile';
    export * from 'yarn-audit-fix/target/es6/runner';
    export * from 'yarn-audit-fix/target/es6/stages';
    export * from 'yarn-audit-fix/target/es6/util';
}

declare module 'yarn-audit-fix/target/es6/flows' {
    import { TFlow } from 'yarn-audit-fix/target/es6/ifaces';
    export const convert: TFlow;
    export const patch: TFlow;
    export const getFlow: (flow?: string) => TFlow;
}

declare module 'yarn-audit-fix/target/es6/ifaces' {
    export type TFlags = Record<string, any>;
    export type TFlagsMapping = {
        [flag: string]: string | {
            key?: string;
            value?: string;
            values?: {
                [val: string]: string;
            };
        };
    };
    export type TContext = {
        ctx: TContext;
        cwd: string;
        temp: string;
        flags: TFlags;
        manifest: Record<string, any>;
        versions: Record<string, string>;
        bins: Record<string, string>;
        err?: any;
    };
    export type TCallback = (cxt: TContext) => void | Promise<void>;
    export type TStage = [string, ...TCallback[]];
    export type ICallable<A extends any[] = any[], R = any> = (...args: A) => R;
    export type TFlow = {
        main: TStage[];
        fallback: TStage[];
    };
    export type TAuditAdvisory = {
        module_name: string;
        vulnerable_versions: string;
        patched_versions: string;
    };
    export type TAuditEntry = {
        data: {
            advisory: TAuditAdvisory;
        };
    };
    export type TAuditReport = {
        [versionInfo: string]: TAuditAdvisory;
    };
    export type TLockfileEntry = {
        version: string;
        resolved: string;
        integrity: string;
        dependencies?: Record<string, string>;
        resolution: string;
        [rest: string]: any;
    };
    export type TLockfileObject = {
        [versionInfo: string]: TLockfileEntry;
    };
    export type TLockfileType = 'yarn1' | 'yarn2' | undefined;
}

declare module 'yarn-audit-fix/target/es6/lockfile' {
    import { TAuditReport, TContext, TLockfileObject, TLockfileType } from 'yarn-audit-fix/target/es6/ifaces';
    export const getLockfileType: (lockfile: string) => TLockfileType;
    export const _parse: (lockfile: string, lockfileType: TLockfileType) => TLockfileObject;
    export const _format: (lockfile: TLockfileObject, lockfileType: TLockfileType) => string;
    /**
      * Pulled up from https://github.com/hfour/yarn-audit-fix-ng/blob/main/src/index.ts
      */
    export const _patch: (lockfile: TLockfileObject, report: TAuditReport, { flags, bins }: TContext, lockfileType: TLockfileType) => TLockfileObject;
    export const _audit: ({ flags, temp, bins }: TContext, lockfileType: TLockfileType) => TAuditReport;
    export const _internal: {
        _parse: (lockfile: string, lockfileType: TLockfileType) => TLockfileObject;
        _audit: ({ flags, temp, bins }: TContext, lockfileType: TLockfileType) => TAuditReport;
        _patch: (lockfile: TLockfileObject, report: TAuditReport, { flags, bins }: TContext, lockfileType: TLockfileType) => TLockfileObject;
        _format: (lockfile: TLockfileObject, lockfileType: TLockfileType) => string;
    };
    export const parse: typeof _parse;
    export const audit: typeof _audit;
    export const patch: typeof _patch;
    export const format: typeof _format;
}

declare module 'yarn-audit-fix/target/es6/runner' {
    import { TContext, TFlags, TFlow, TStage } from 'yarn-audit-fix/target/es6/ifaces';
    /**
      * Build running context.
      */
    export const getContext: (flags?: TFlags) => TContext;
    /**
      * Run cmd stack.
      * @param stages
      * @param ctx
      */
    export const exec: (stages: TStage[], ctx: TContext) => void;
    /**
      * Public static void main.
      */
    export const runSync: (_flags?: TFlags, _flow?: TFlow | undefined) => void;
    export const run: {
        (_flags?: TFlags, _flow?: TFlow | undefined): Promise<void>;
        sync: (_flags?: TFlags, _flow?: TFlow | undefined) => void;
    };
}

declare module 'yarn-audit-fix/target/es6/stages' {
    import { TCallback } from 'yarn-audit-fix/target/es6/ifaces';
    /**
      * Resolve bins.
      */
    export const resolveBins: TCallback;
    /**
      * Print runtime context digest.
      */
    export const printRuntimeDigest: TCallback;
    /**
      * Prepare temp assets.
      * @param {TContext} cxt
      * @return {void}
      */
    export const createTempAssets: TCallback;
    /**
      * Provide symlinks to node_modules and workspaces
      * @param {TContext} cxt
      * @return {void}
      */
    export const createSymlinks: TCallback;
    /**
      * Convert yarn.lock to package-lock.json for further audit.
      * @param {TContext} cxt
      * @return {void}
      */
    export const yarnLockToPkgLock: TCallback;
    /**
      * Apply npm audit fix.
      * @param {TContext} cxt
      * @return {void}
      */
    export const npmAuditFix: TCallback;
    /**
      * Generate yarn.lock by package-lock.json data.
      * @param {TContext} cxt
      * @return {void}
      */
    export const yarnImport: TCallback;
    export const syncLockfile: TCallback;
    /**
      * Apply yarn install to fetch packages after yarn.lock update.
      * @param {TContext} cxt
      * @return {void}
      */
    export const yarnInstall: TCallback;
    /**
      * Clean up temporaries.
      * @param {TContext} cxt
      * @return {void}
      */
    export const clear: TCallback;
    /**
      * Exit on error.
      * @param {TContext} cxt
      * @return {void}
      */
    export const exit: TCallback;
    export const patchLockfile: TCallback;
    /**
      * Check that everything is fine with pkg dir.
      * @param {TContext} cxt
      * @return {void}
      */
    export const verify: TCallback;
}

declare module 'yarn-audit-fix/target/es6/util' {
    import { SymlinkType } from 'fs-extra';
    import yaml from 'js-yaml';
    import { TFlags, TFlagsMapping } from 'yarn-audit-fix/target/es6/ifaces';
    const cp: any;
    export const pkgDir: (cwd: string) => string;
    export const invoke: (cmd: string, args: string[], cwd: string, silent?: boolean, inherit?: boolean, skipError?: boolean) => string | ReturnType<typeof cp.spawnSync>;
    export const normalizeFlags: (flags: TFlags) => TFlags;
    export const formatFlags: (flags: TFlags, ...picklist: string[]) => string[];
    export const mapFlags: (flags: TFlags, mapping: TFlagsMapping) => TFlags;
    export const isWindows: () => boolean;
    export const getSymlinkType: (type?: string | undefined) => SymlinkType;
    export const getYarn: () => string;
    export const getClosestBin: (cmd: string) => string;
    export const getNpm: (npmPath?: string, isWin?: boolean) => string;
    export const getWorkspaces: (cwd: string, manifest: Record<string, any>) => string[];
    export const readJson: (path: string) => any;
    export const ensureDir: (dir: string) => string;
    export const getTemp: (cwd: string, temp?: string | undefined) => string;
    export const attempt: <T>(f: () => T) => T | null;
    export const parseYaml: <T = Record<string, any>>(contents: string) => T;
    export const formatYaml: typeof yaml.dump;
    export const getBinVersion: (bin: string, cwd?: string) => string;
    export {};
}

// Generated by dts-bundle v0.7.5
// Dependencies for this module:
//   ../../../../../../../fs-extra
//   ../../../../../../../js-yaml

declare module 'yarn-audit-fix/target/esnext' {
    export { getFlow } from 'yarn-audit-fix/target/esnext/flows';
    export * from 'yarn-audit-fix/target/esnext/ifaces';
    export * from 'yarn-audit-fix/target/esnext/lockfile';
    export * from 'yarn-audit-fix/target/esnext/runner';
    export * from 'yarn-audit-fix/target/esnext/stages';
    export * from 'yarn-audit-fix/target/esnext/util';
}

declare module 'yarn-audit-fix/target/esnext/flows' {
    import { TFlow } from 'yarn-audit-fix/target/esnext/ifaces';
    export const convert: TFlow;
    export const patch: TFlow;
    export const getFlow: (flow?: string) => TFlow;
}

declare module 'yarn-audit-fix/target/esnext/ifaces' {
    export type TFlags = Record<string, any>;
    export type TFlagsMapping = {
        [flag: string]: string | {
            key?: string;
            value?: string;
            values?: {
                [val: string]: string;
            };
        };
    };
    export type TContext = {
        ctx: TContext;
        cwd: string;
        temp: string;
        flags: TFlags;
        manifest: Record<string, any>;
        versions: Record<string, string>;
        bins: Record<string, string>;
        err?: any;
    };
    export type TCallback = (cxt: TContext) => void | Promise<void>;
    export type TStage = [string, ...TCallback[]];
    export type ICallable<A extends any[] = any[], R = any> = (...args: A) => R;
    export type TFlow = {
        main: TStage[];
        fallback: TStage[];
    };
    export type TAuditAdvisory = {
        module_name: string;
        vulnerable_versions: string;
        patched_versions: string;
    };
    export type TAuditEntry = {
        data: {
            advisory: TAuditAdvisory;
        };
    };
    export type TAuditReport = {
        [versionInfo: string]: TAuditAdvisory;
    };
    export type TLockfileEntry = {
        version: string;
        resolved: string;
        integrity: string;
        dependencies?: Record<string, string>;
        resolution: string;
        [rest: string]: any;
    };
    export type TLockfileObject = {
        [versionInfo: string]: TLockfileEntry;
    };
    export type TLockfileType = 'yarn1' | 'yarn2' | undefined;
}

declare module 'yarn-audit-fix/target/esnext/lockfile' {
    import { TAuditReport, TContext, TLockfileObject, TLockfileType } from 'yarn-audit-fix/target/esnext/ifaces';
    export const getLockfileType: (lockfile: string) => TLockfileType;
    export const _parse: (lockfile: string, lockfileType: TLockfileType) => TLockfileObject;
    export const _format: (lockfile: TLockfileObject, lockfileType: TLockfileType) => string;
    /**
      * Pulled up from https://github.com/hfour/yarn-audit-fix-ng/blob/main/src/index.ts
      */
    export const _patch: (lockfile: TLockfileObject, report: TAuditReport, { flags, bins }: TContext, lockfileType: TLockfileType) => TLockfileObject;
    export const _audit: ({ flags, temp, bins }: TContext, lockfileType: TLockfileType) => TAuditReport;
    export const _internal: {
        _parse: (lockfile: string, lockfileType: TLockfileType) => TLockfileObject;
        _audit: ({ flags, temp, bins }: TContext, lockfileType: TLockfileType) => TAuditReport;
        _patch: (lockfile: TLockfileObject, report: TAuditReport, { flags, bins }: TContext, lockfileType: TLockfileType) => TLockfileObject;
        _format: (lockfile: TLockfileObject, lockfileType: TLockfileType) => string;
    };
    export const parse: typeof _parse;
    export const audit: typeof _audit;
    export const patch: typeof _patch;
    export const format: typeof _format;
}

declare module 'yarn-audit-fix/target/esnext/runner' {
    import { TContext, TFlags, TFlow, TStage } from 'yarn-audit-fix/target/esnext/ifaces';
    /**
      * Build running context.
      */
    export const getContext: (flags?: TFlags) => TContext;
    /**
      * Run cmd stack.
      * @param stages
      * @param ctx
      */
    export const exec: (stages: TStage[], ctx: TContext) => void;
    /**
      * Public static void main.
      */
    export const runSync: (_flags?: TFlags, _flow?: TFlow | undefined) => void;
    export const run: {
        (_flags?: TFlags, _flow?: TFlow | undefined): Promise<void>;
        sync: (_flags?: TFlags, _flow?: TFlow | undefined) => void;
    };
}

declare module 'yarn-audit-fix/target/esnext/stages' {
    import { TCallback } from 'yarn-audit-fix/target/esnext/ifaces';
    /**
      * Resolve bins.
      */
    export const resolveBins: TCallback;
    /**
      * Print runtime context digest.
      */
    export const printRuntimeDigest: TCallback;
    /**
      * Prepare temp assets.
      * @param {TContext} cxt
      * @return {void}
      */
    export const createTempAssets: TCallback;
    /**
      * Provide symlinks to node_modules and workspaces
      * @param {TContext} cxt
      * @return {void}
      */
    export const createSymlinks: TCallback;
    /**
      * Convert yarn.lock to package-lock.json for further audit.
      * @param {TContext} cxt
      * @return {void}
      */
    export const yarnLockToPkgLock: TCallback;
    /**
      * Apply npm audit fix.
      * @param {TContext} cxt
      * @return {void}
      */
    export const npmAuditFix: TCallback;
    /**
      * Generate yarn.lock by package-lock.json data.
      * @param {TContext} cxt
      * @return {void}
      */
    export const yarnImport: TCallback;
    export const syncLockfile: TCallback;
    /**
      * Apply yarn install to fetch packages after yarn.lock update.
      * @param {TContext} cxt
      * @return {void}
      */
    export const yarnInstall: TCallback;
    /**
      * Clean up temporaries.
      * @param {TContext} cxt
      * @return {void}
      */
    export const clear: TCallback;
    /**
      * Exit on error.
      * @param {TContext} cxt
      * @return {void}
      */
    export const exit: TCallback;
    export const patchLockfile: TCallback;
    /**
      * Check that everything is fine with pkg dir.
      * @param {TContext} cxt
      * @return {void}
      */
    export const verify: TCallback;
}

declare module 'yarn-audit-fix/target/esnext/util' {
    import { SymlinkType } from 'fs-extra';
    import yaml from 'js-yaml';
    import { TFlags, TFlagsMapping } from 'yarn-audit-fix/target/esnext/ifaces';
    const cp: any;
    export const pkgDir: (cwd: string) => string;
    export const invoke: (cmd: string, args: string[], cwd: string, silent?: boolean, inherit?: boolean, skipError?: boolean) => string | ReturnType<typeof cp.spawnSync>;
    export const normalizeFlags: (flags: TFlags) => TFlags;
    export const formatFlags: (flags: TFlags, ...picklist: string[]) => string[];
    export const mapFlags: (flags: TFlags, mapping: TFlagsMapping) => TFlags;
    export const isWindows: () => boolean;
    export const getSymlinkType: (type?: string | undefined) => SymlinkType;
    export const getYarn: () => string;
    export const getClosestBin: (cmd: string) => string;
    export const getNpm: (npmPath?: string, isWin?: boolean) => string;
    export const getWorkspaces: (cwd: string, manifest: Record<string, any>) => string[];
    export const readJson: (path: string) => any;
    export const ensureDir: (dir: string) => string;
    export const getTemp: (cwd: string, temp?: string | undefined) => string;
    export const attempt: <T>(f: () => T) => T | null;
    export const parseYaml: <T = Record<string, any>>(contents: string) => T;
    export const formatYaml: typeof yaml.dump;
    export const getBinVersion: (bin: string, cwd?: string) => string;
    export {};
}

