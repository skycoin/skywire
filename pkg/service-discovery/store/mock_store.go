// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package store

import (
	context "context"

	servicedisc "github.com/skycoin/skywire/pkg/servicedisc"
	mock "github.com/stretchr/testify/mock"
)

// MockStore is an autogenerated mock type for the Store type
type MockStore struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *MockStore) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CountServiceTypes provides a mock function with given fields: ctx
func (_m *MockStore) CountServiceTypes(ctx context.Context) (uint64, error) {
	ret := _m.Called(ctx)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(context.Context) uint64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountServices provides a mock function with given fields: ctx, serviceType
func (_m *MockStore) CountServices(ctx context.Context, serviceType string) (uint64, error) {
	ret := _m.Called(ctx, serviceType)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(context.Context, string) uint64); ok {
		r0 = rf(ctx, serviceType)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, serviceType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteService provides a mock function with given fields: ctx, sType, addr
func (_m *MockStore) DeleteService(ctx context.Context, sType string, addr servicedisc.SWAddr) *servicedisc.HTTPError {
	ret := _m.Called(ctx, sType, addr)

	var r0 *servicedisc.HTTPError
	if rf, ok := ret.Get(0).(func(context.Context, string, servicedisc.SWAddr) *servicedisc.HTTPError); ok {
		r0 = rf(ctx, sType, addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicedisc.HTTPError)
		}
	}

	return r0
}

// Service provides a mock function with given fields: ctx, sType, addr
func (_m *MockStore) Service(ctx context.Context, sType string, addr servicedisc.SWAddr) (*servicedisc.Service, *servicedisc.HTTPError) {
	ret := _m.Called(ctx, sType, addr)

	var r0 *servicedisc.Service
	if rf, ok := ret.Get(0).(func(context.Context, string, servicedisc.SWAddr) *servicedisc.Service); ok {
		r0 = rf(ctx, sType, addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicedisc.Service)
		}
	}

	var r1 *servicedisc.HTTPError
	if rf, ok := ret.Get(1).(func(context.Context, string, servicedisc.SWAddr) *servicedisc.HTTPError); ok {
		r1 = rf(ctx, sType, addr)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*servicedisc.HTTPError)
		}
	}

	return r0, r1
}

// Services provides a mock function with given fields: ctx, sType
func (_m *MockStore) Services(ctx context.Context, sType, version, country string) ([]servicedisc.Service, *servicedisc.HTTPError) {
	ret := _m.Called(ctx, sType)

	var r0 []servicedisc.Service
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []servicedisc.Service); ok {
		r0 = rf(ctx, sType, version, country)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]servicedisc.Service)
		}
	}

	var r2 *servicedisc.HTTPError
	if rf, ok := ret.Get(2).(func(context.Context, string, string, string) *servicedisc.HTTPError); ok {
		r2 = rf(ctx, sType, version, country)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*servicedisc.HTTPError)
		}
	}

	return r0, r2
}

// ServicesByGeo provides a mock function with given fields: ctx, sType, q
func (_m *MockStore) ServicesByCountry(ctx context.Context, sType string, sCountry string) ([]servicedisc.Service, *servicedisc.HTTPError) {
	ret := _m.Called(ctx, sType, nil)

	var r0 []servicedisc.Service
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []servicedisc.Service); ok {
		r0 = rf(ctx, sType, sCountry)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]servicedisc.Service)
		}
	}

	var r1 *servicedisc.HTTPError
	if rf, ok := ret.Get(1).(func(context.Context, string, string) *servicedisc.HTTPError); ok {
		r1 = rf(ctx, sType, sCountry)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*servicedisc.HTTPError)
		}
	}

	return r0, r1
}

// UpdateService provides a mock function with given fields: ctx, se
func (_m *MockStore) UpdateService(ctx context.Context, se *servicedisc.Service) *servicedisc.HTTPError {
	ret := _m.Called(ctx, se)

	var r0 *servicedisc.HTTPError
	if rf, ok := ret.Get(0).(func(context.Context, *servicedisc.Service) *servicedisc.HTTPError); ok {
		r0 = rf(ctx, se)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicedisc.HTTPError)
		}
	}

	return r0
}
