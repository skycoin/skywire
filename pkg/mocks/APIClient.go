// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	cipher "github.com/skycoin/skywire-utilities/pkg/cipher"
	addrresolver "github.com/skycoin/skywire/pkg/transport/network/addrresolver"

	context "context"

	mock "github.com/stretchr/testify/mock"

	pfilter "github.com/AudriusButkevicius/pfilter"
)

// APIClient is an autogenerated mock type for the APIClient type
type APIClient struct {
	mock.Mock
}

// Addresses provides a mock function with given fields: ctx
func (_m *APIClient) Addresses(ctx context.Context) string {
	ret := _m.Called(ctx)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// BindSTCPR provides a mock function with given fields: ctx, port
func (_m *APIClient) BindSTCPR(ctx context.Context, port string) error {
	ret := _m.Called(ctx, port)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, port)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BindSUDPH provides a mock function with given fields: filter, handshake
func (_m *APIClient) BindSUDPH(filter *pfilter.PacketFilter, handshake addrresolver.Handshake) (<-chan addrresolver.RemoteVisor, error) {
	ret := _m.Called(filter, handshake)

	var r0 <-chan addrresolver.RemoteVisor
	var r1 error
	if rf, ok := ret.Get(0).(func(*pfilter.PacketFilter, addrresolver.Handshake) (<-chan addrresolver.RemoteVisor, error)); ok {
		return rf(filter, handshake)
	}
	if rf, ok := ret.Get(0).(func(*pfilter.PacketFilter, addrresolver.Handshake) <-chan addrresolver.RemoteVisor); ok {
		r0 = rf(filter, handshake)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan addrresolver.RemoteVisor)
		}
	}

	if rf, ok := ret.Get(1).(func(*pfilter.PacketFilter, addrresolver.Handshake) error); ok {
		r1 = rf(filter, handshake)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields:
func (_m *APIClient) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Resolve provides a mock function with given fields: ctx, netType, pk
func (_m *APIClient) Resolve(ctx context.Context, netType string, pk cipher.PubKey) (addrresolver.VisorData, error) {
	ret := _m.Called(ctx, netType, pk)

	var r0 addrresolver.VisorData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, cipher.PubKey) (addrresolver.VisorData, error)); ok {
		return rf(ctx, netType, pk)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, cipher.PubKey) addrresolver.VisorData); ok {
		r0 = rf(ctx, netType, pk)
	} else {
		r0 = ret.Get(0).(addrresolver.VisorData)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, cipher.PubKey) error); ok {
		r1 = rf(ctx, netType, pk)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Transports provides a mock function with given fields: ctx
func (_m *APIClient) Transports(ctx context.Context) (map[cipher.PubKey][]string, error) {
	ret := _m.Called(ctx)

	var r0 map[cipher.PubKey][]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[cipher.PubKey][]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[cipher.PubKey][]string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[cipher.PubKey][]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAPIClient creates a new instance of APIClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAPIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *APIClient {
	mock := &APIClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
