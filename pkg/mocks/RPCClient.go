// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	appcommon "github.com/skycoin/skywire/pkg/app/appcommon"
	appevent "github.com/skycoin/skywire/pkg/app/appevent"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// RPCClient is an autogenerated mock type for the RPCClient type
type RPCClient struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *RPCClient) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Hello provides a mock function with given fields:
func (_m *RPCClient) Hello() *appcommon.Hello {
	ret := _m.Called()

	var r0 *appcommon.Hello
	if rf, ok := ret.Get(0).(func() *appcommon.Hello); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appcommon.Hello)
		}
	}

	return r0
}

// Notify provides a mock function with given fields: ctx, e
func (_m *RPCClient) Notify(ctx context.Context, e *appevent.Event) error {
	ret := _m.Called(ctx, e)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *appevent.Event) error); ok {
		r0 = rf(ctx, e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRPCClient creates a new instance of RPCClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRPCClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *RPCClient {
	mock := &RPCClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
