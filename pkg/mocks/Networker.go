// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	cipher "github.com/skycoin/skywire-utilities/pkg/cipher"
	appnet "github.com/skycoin/skywire/pkg/app/appnet"

	context "context"

	mock "github.com/stretchr/testify/mock"

	net "net"
)

// Networker is an autogenerated mock type for the Networker type
type Networker struct {
	mock.Mock
}

// Dial provides a mock function with given fields: addr
func (_m *Networker) Dial(addr appnet.Addr) (net.Conn, error) {
	ret := _m.Called(addr)

	var r0 net.Conn
	var r1 error
	if rf, ok := ret.Get(0).(func(appnet.Addr) (net.Conn, error)); ok {
		return rf(addr)
	}
	if rf, ok := ret.Get(0).(func(appnet.Addr) net.Conn); ok {
		r0 = rf(addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.Conn)
		}
	}

	if rf, ok := ret.Get(1).(func(appnet.Addr) error); ok {
		r1 = rf(addr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DialContext provides a mock function with given fields: ctx, addr
func (_m *Networker) DialContext(ctx context.Context, addr appnet.Addr) (net.Conn, error) {
	ret := _m.Called(ctx, addr)

	var r0 net.Conn
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, appnet.Addr) (net.Conn, error)); ok {
		return rf(ctx, addr)
	}
	if rf, ok := ret.Get(0).(func(context.Context, appnet.Addr) net.Conn); ok {
		r0 = rf(ctx, addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.Conn)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, appnet.Addr) error); ok {
		r1 = rf(ctx, addr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Listen provides a mock function with given fields: addr
func (_m *Networker) Listen(addr appnet.Addr) (net.Listener, error) {
	ret := _m.Called(addr)

	var r0 net.Listener
	var r1 error
	if rf, ok := ret.Get(0).(func(appnet.Addr) (net.Listener, error)); ok {
		return rf(addr)
	}
	if rf, ok := ret.Get(0).(func(appnet.Addr) net.Listener); ok {
		r0 = rf(addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.Listener)
		}
	}

	if rf, ok := ret.Get(1).(func(appnet.Addr) error); ok {
		r1 = rf(addr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListenContext provides a mock function with given fields: ctx, addr
func (_m *Networker) ListenContext(ctx context.Context, addr appnet.Addr) (net.Listener, error) {
	ret := _m.Called(ctx, addr)

	var r0 net.Listener
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, appnet.Addr) (net.Listener, error)); ok {
		return rf(ctx, addr)
	}
	if rf, ok := ret.Get(0).(func(context.Context, appnet.Addr) net.Listener); ok {
		r0 = rf(ctx, addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.Listener)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, appnet.Addr) error); ok {
		r1 = rf(ctx, addr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields: pk, addr
func (_m *Networker) Ping(pk cipher.PubKey, addr appnet.Addr) (net.Conn, error) {
	ret := _m.Called(pk, addr)

	var r0 net.Conn
	var r1 error
	if rf, ok := ret.Get(0).(func(cipher.PubKey, appnet.Addr) (net.Conn, error)); ok {
		return rf(pk, addr)
	}
	if rf, ok := ret.Get(0).(func(cipher.PubKey, appnet.Addr) net.Conn); ok {
		r0 = rf(pk, addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.Conn)
		}
	}

	if rf, ok := ret.Get(1).(func(cipher.PubKey, appnet.Addr) error); ok {
		r1 = rf(pk, addr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewNetworker creates a new instance of Networker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNetworker(t interface {
	mock.TestingT
	Cleanup(func())
}) *Networker {
	mock := &Networker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
