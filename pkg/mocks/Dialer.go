// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	cipher "github.com/skycoin/skywire-utilities/pkg/cipher"

	mock "github.com/stretchr/testify/mock"

	net "net"
)

// Dialer is an autogenerated mock type for the Dialer type
type Dialer struct {
	mock.Mock
}

// Dial provides a mock function with given fields: ctx, remote, port
func (_m *Dialer) Dial(ctx context.Context, remote cipher.PubKey, port uint16) (net.Conn, error) {
	ret := _m.Called(ctx, remote, port)

	var r0 net.Conn
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, cipher.PubKey, uint16) (net.Conn, error)); ok {
		return rf(ctx, remote, port)
	}
	if rf, ok := ret.Get(0).(func(context.Context, cipher.PubKey, uint16) net.Conn); ok {
		r0 = rf(ctx, remote, port)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.Conn)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, cipher.PubKey, uint16) error); ok {
		r1 = rf(ctx, remote, port)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Type provides a mock function with given fields:
func (_m *Dialer) Type() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewDialer creates a new instance of Dialer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDialer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Dialer {
	mock := &Dialer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
