// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	cipher "github.com/skycoin/skywire-utilities/pkg/cipher"

	mock "github.com/stretchr/testify/mock"

	transport "github.com/skycoin/skywire/pkg/transport"

	uuid "github.com/google/uuid"
)

// DiscoveryClient is an autogenerated mock type for the DiscoveryClient type
type DiscoveryClient struct {
	mock.Mock
}

// DeleteTransport provides a mock function with given fields: ctx, id
func (_m *DiscoveryClient) DeleteTransport(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTransportByID provides a mock function with given fields: ctx, id
func (_m *DiscoveryClient) GetTransportByID(ctx context.Context, id uuid.UUID) (*transport.Entry, error) {
	ret := _m.Called(ctx, id)

	var r0 *transport.Entry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*transport.Entry, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *transport.Entry); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transport.Entry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransportsByEdge provides a mock function with given fields: ctx, pk
func (_m *DiscoveryClient) GetTransportsByEdge(ctx context.Context, pk cipher.PubKey) ([]*transport.Entry, error) {
	ret := _m.Called(ctx, pk)

	var r0 []*transport.Entry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, cipher.PubKey) ([]*transport.Entry, error)); ok {
		return rf(ctx, pk)
	}
	if rf, ok := ret.Get(0).(func(context.Context, cipher.PubKey) []*transport.Entry); ok {
		r0 = rf(ctx, pk)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*transport.Entry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, cipher.PubKey) error); ok {
		r1 = rf(ctx, pk)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterTransports provides a mock function with given fields: ctx, entries
func (_m *DiscoveryClient) RegisterTransports(ctx context.Context, entries ...*transport.SignedEntry) error {
	_va := make([]interface{}, len(entries))
	for _i := range entries {
		_va[_i] = entries[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...*transport.SignedEntry) error); ok {
		r0 = rf(ctx, entries...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDiscoveryClient creates a new instance of DiscoveryClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDiscoveryClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *DiscoveryClient {
	mock := &DiscoveryClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
