// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	appcommon "github.com/skycoin/skywire/pkg/app/appcommon"
	appserver "github.com/skycoin/skywire/pkg/app/appserver"

	mock "github.com/stretchr/testify/mock"

	net "net"

	routing "github.com/skycoin/skywire/pkg/routing"
)

// ProcManager is an autogenerated mock type for the ProcManager type
type ProcManager struct {
	mock.Mock
}

// Addr provides a mock function with given fields:
func (_m *ProcManager) Addr() net.Addr {
	ret := _m.Called()

	var r0 net.Addr
	if rf, ok := ret.Get(0).(func() net.Addr); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.Addr)
		}
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *ProcManager) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConnectionsSummary provides a mock function with given fields: appName
func (_m *ProcManager) ConnectionsSummary(appName string) ([]appserver.ConnectionSummary, error) {
	ret := _m.Called(appName)

	var r0 []appserver.ConnectionSummary
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]appserver.ConnectionSummary, error)); ok {
		return rf(appName)
	}
	if rf, ok := ret.Get(0).(func(string) []appserver.ConnectionSummary); ok {
		r0 = rf(appName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]appserver.ConnectionSummary)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(appName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Deregister provides a mock function with given fields: key
func (_m *ProcManager) Deregister(key appcommon.ProcKey) error {
	ret := _m.Called(key)

	var r0 error
	if rf, ok := ret.Get(0).(func(appcommon.ProcKey) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DetailedStatus provides a mock function with given fields: appName
func (_m *ProcManager) DetailedStatus(appName string) (string, error) {
	ret := _m.Called(appName)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(appName)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(appName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(appName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ErrorByName provides a mock function with given fields: appName
func (_m *ProcManager) ErrorByName(appName string) (string, bool) {
	ret := _m.Called(appName)

	var r0 string
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (string, bool)); ok {
		return rf(appName)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(appName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(appName)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetAppPort provides a mock function with given fields: appName
func (_m *ProcManager) GetAppPort(appName string) (routing.Port, error) {
	ret := _m.Called(appName)

	var r0 routing.Port
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (routing.Port, error)); ok {
		return rf(appName)
	}
	if rf, ok := ret.Get(0).(func(string) routing.Port); ok {
		r0 = rf(appName)
	} else {
		r0 = ret.Get(0).(routing.Port)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(appName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcByName provides a mock function with given fields: appName
func (_m *ProcManager) ProcByName(appName string) (*appserver.Proc, bool) {
	ret := _m.Called(appName)

	var r0 *appserver.Proc
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (*appserver.Proc, bool)); ok {
		return rf(appName)
	}
	if rf, ok := ret.Get(0).(func(string) *appserver.Proc); ok {
		r0 = rf(appName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appserver.Proc)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(appName)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Range provides a mock function with given fields: next
func (_m *ProcManager) Range(next func(string, *appserver.Proc) bool) {
	_m.Called(next)
}

// Register provides a mock function with given fields: conf
func (_m *ProcManager) Register(conf appcommon.ProcConfig) (appcommon.ProcKey, error) {
	ret := _m.Called(conf)

	var r0 appcommon.ProcKey
	var r1 error
	if rf, ok := ret.Get(0).(func(appcommon.ProcConfig) (appcommon.ProcKey, error)); ok {
		return rf(conf)
	}
	if rf, ok := ret.Get(0).(func(appcommon.ProcConfig) appcommon.ProcKey); ok {
		r0 = rf(conf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(appcommon.ProcKey)
		}
	}

	if rf, ok := ret.Get(1).(func(appcommon.ProcConfig) error); ok {
		r1 = rf(conf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetDetailedStatus provides a mock function with given fields: appName, status
func (_m *ProcManager) SetDetailedStatus(appName string, status string) error {
	ret := _m.Called(appName, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(appName, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetError provides a mock function with given fields: appName, status
func (_m *ProcManager) SetError(appName string, status string) error {
	ret := _m.Called(appName, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(appName, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields: conf
func (_m *ProcManager) Start(conf appcommon.ProcConfig) (appcommon.ProcID, error) {
	ret := _m.Called(conf)

	var r0 appcommon.ProcID
	var r1 error
	if rf, ok := ret.Get(0).(func(appcommon.ProcConfig) (appcommon.ProcID, error)); ok {
		return rf(conf)
	}
	if rf, ok := ret.Get(0).(func(appcommon.ProcConfig) appcommon.ProcID); ok {
		r0 = rf(conf)
	} else {
		r0 = ret.Get(0).(appcommon.ProcID)
	}

	if rf, ok := ret.Get(1).(func(appcommon.ProcConfig) error); ok {
		r1 = rf(conf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Stats provides a mock function with given fields: appName
func (_m *ProcManager) Stats(appName string) (appserver.AppStats, error) {
	ret := _m.Called(appName)

	var r0 appserver.AppStats
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (appserver.AppStats, error)); ok {
		return rf(appName)
	}
	if rf, ok := ret.Get(0).(func(string) appserver.AppStats); ok {
		r0 = rf(appName)
	} else {
		r0 = ret.Get(0).(appserver.AppStats)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(appName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Stop provides a mock function with given fields: appName
func (_m *ProcManager) Stop(appName string) error {
	ret := _m.Called(appName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(appName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Wait provides a mock function with given fields: appName
func (_m *ProcManager) Wait(appName string) error {
	ret := _m.Called(appName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(appName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewProcManager creates a new instance of ProcManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProcManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProcManager {
	mock := &ProcManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
