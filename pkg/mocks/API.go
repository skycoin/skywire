// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	appcommon "github.com/skycoin/skywire/pkg/app/appcommon"
	appnet "github.com/skycoin/skywire/pkg/app/appnet"

	appserver "github.com/skycoin/skywire/pkg/app/appserver"

	cipher "github.com/skycoin/skywire-utilities/pkg/cipher"

	mock "github.com/stretchr/testify/mock"

	routing "github.com/skycoin/skywire/pkg/routing"

	servicedisc "github.com/skycoin/skywire/pkg/servicedisc"

	time "time"

	transport "github.com/skycoin/skywire/pkg/transport"

	uuid "github.com/google/uuid"

	visor "github.com/skycoin/skywire/pkg/visor"

	visorconfig "github.com/skycoin/skywire/pkg/visor/visorconfig"
)

// API is an autogenerated mock type for the API type
type API struct {
	mock.Mock
}

// AddApp provides a mock function with given fields: appName, binaryName
func (_m *API) AddApp(appName string, binaryName string) error {
	ret := _m.Called(appName, binaryName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(appName, binaryName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddTransport provides a mock function with given fields: remote, tpType, timeout
func (_m *API) AddTransport(remote cipher.PubKey, tpType string, timeout time.Duration) (*visor.TransportSummary, error) {
	ret := _m.Called(remote, tpType, timeout)

	var r0 *visor.TransportSummary
	var r1 error
	if rf, ok := ret.Get(0).(func(cipher.PubKey, string, time.Duration) (*visor.TransportSummary, error)); ok {
		return rf(remote, tpType, timeout)
	}
	if rf, ok := ret.Get(0).(func(cipher.PubKey, string, time.Duration) *visor.TransportSummary); ok {
		r0 = rf(remote, tpType, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*visor.TransportSummary)
		}
	}

	if rf, ok := ret.Get(1).(func(cipher.PubKey, string, time.Duration) error); ok {
		r1 = rf(remote, tpType, timeout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// App provides a mock function with given fields: appName
func (_m *API) App(appName string) (*appserver.AppState, error) {
	ret := _m.Called(appName)

	var r0 *appserver.AppState
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*appserver.AppState, error)); ok {
		return rf(appName)
	}
	if rf, ok := ret.Get(0).(func(string) *appserver.AppState); ok {
		r0 = rf(appName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appserver.AppState)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(appName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Apps provides a mock function with given fields:
func (_m *API) Apps() ([]*appserver.AppState, error) {
	ret := _m.Called()

	var r0 []*appserver.AppState
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*appserver.AppState, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*appserver.AppState); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*appserver.AppState)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Connect provides a mock function with given fields: remotePK, remotePort, localPort
func (_m *API) Connect(remotePK cipher.PubKey, remotePort int, localPort int) (uuid.UUID, error) {
	ret := _m.Called(remotePK, remotePort, localPort)

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(cipher.PubKey, int, int) (uuid.UUID, error)); ok {
		return rf(remotePK, remotePort, localPort)
	}
	if rf, ok := ret.Get(0).(func(cipher.PubKey, int, int) uuid.UUID); ok {
		r0 = rf(remotePK, remotePort, localPort)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(cipher.PubKey, int, int) error); ok {
		r1 = rf(remotePK, remotePort, localPort)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRewardAddress provides a mock function with given fields:
func (_m *API) DeleteRewardAddress() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeregisterApp provides a mock function with given fields: procKey
func (_m *API) DeregisterApp(procKey appcommon.ProcKey) error {
	ret := _m.Called(procKey)

	var r0 error
	if rf, ok := ret.Get(0).(func(appcommon.ProcKey) error); ok {
		r0 = rf(procKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeregisterHTTPPort provides a mock function with given fields: localPort
func (_m *API) DeregisterHTTPPort(localPort int) error {
	ret := _m.Called(localPort)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(localPort)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DialPing provides a mock function with given fields: config
func (_m *API) DialPing(config visor.PingConfig) error {
	ret := _m.Called(config)

	var r0 error
	if rf, ok := ret.Get(0).(func(visor.PingConfig) error); ok {
		r0 = rf(config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Disconnect provides a mock function with given fields: id
func (_m *API) Disconnect(id uuid.UUID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DiscoverTransportByID provides a mock function with given fields: id
func (_m *API) DiscoverTransportByID(id uuid.UUID) (*transport.Entry, error) {
	ret := _m.Called(id)

	var r0 *transport.Entry
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*transport.Entry, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *transport.Entry); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transport.Entry)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DiscoverTransportsByPK provides a mock function with given fields: pk
func (_m *API) DiscoverTransportsByPK(pk cipher.PubKey) ([]*transport.Entry, error) {
	ret := _m.Called(pk)

	var r0 []*transport.Entry
	var r1 error
	if rf, ok := ret.Get(0).(func(cipher.PubKey) ([]*transport.Entry, error)); ok {
		return rf(pk)
	}
	if rf, ok := ret.Get(0).(func(cipher.PubKey) []*transport.Entry); ok {
		r0 = rf(pk)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*transport.Entry)
		}
	}

	if rf, ok := ret.Get(1).(func(cipher.PubKey) error); ok {
		r1 = rf(pk)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DoCustomSetting provides a mock function with given fields: appName, customSetting
func (_m *API) DoCustomSetting(appName string, customSetting map[string]string) error {
	ret := _m.Called(appName, customSetting)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, map[string]string) error); ok {
		r0 = rf(appName, customSetting)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchUptimeTrackerData provides a mock function with given fields: pk
func (_m *API) FetchUptimeTrackerData(pk string) ([]byte, error) {
	ret := _m.Called(pk)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(pk)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(pk)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(pk)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAppConnectionsSummary provides a mock function with given fields: appName
func (_m *API) GetAppConnectionsSummary(appName string) ([]appserver.ConnectionSummary, error) {
	ret := _m.Called(appName)

	var r0 []appserver.ConnectionSummary
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]appserver.ConnectionSummary, error)); ok {
		return rf(appName)
	}
	if rf, ok := ret.Get(0).(func(string) []appserver.ConnectionSummary); ok {
		r0 = rf(appName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]appserver.ConnectionSummary)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(appName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAppError provides a mock function with given fields: appName
func (_m *API) GetAppError(appName string) (string, error) {
	ret := _m.Called(appName)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(appName)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(appName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(appName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAppStats provides a mock function with given fields: appName
func (_m *API) GetAppStats(appName string) (appserver.AppStats, error) {
	ret := _m.Called(appName)

	var r0 appserver.AppStats
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (appserver.AppStats, error)); ok {
		return rf(appName)
	}
	if rf, ok := ret.Get(0).(func(string) appserver.AppStats); ok {
		r0 = rf(appName)
	} else {
		r0 = ret.Get(0).(appserver.AppStats)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(appName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLogRotationInterval provides a mock function with given fields:
func (_m *API) GetLogRotationInterval() (visorconfig.Duration, error) {
	ret := _m.Called()

	var r0 visorconfig.Duration
	var r1 error
	if rf, ok := ret.Get(0).(func() (visorconfig.Duration, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() visorconfig.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(visorconfig.Duration)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPersistentTransports provides a mock function with given fields:
func (_m *API) GetPersistentTransports() ([]transport.PersistentTransports, error) {
	ret := _m.Called()

	var r0 []transport.PersistentTransports
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]transport.PersistentTransports, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []transport.PersistentTransports); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transport.PersistentTransports)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRewardAddress provides a mock function with given fields:
func (_m *API) GetRewardAddress() (string, error) {
	ret := _m.Called()

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Health provides a mock function with given fields:
func (_m *API) Health() (*visor.HealthInfo, error) {
	ret := _m.Called()

	var r0 *visor.HealthInfo
	var r1 error
	if rf, ok := ret.Get(0).(func() (*visor.HealthInfo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *visor.HealthInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*visor.HealthInfo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsDMSGClientReady provides a mock function with given fields:
func (_m *API) IsDMSGClientReady() (bool, error) {
	ret := _m.Called()

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func() (bool, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields:
func (_m *API) List() (map[uuid.UUID]*appnet.ForwardConn, error) {
	ret := _m.Called()

	var r0 map[uuid.UUID]*appnet.ForwardConn
	var r1 error
	if rf, ok := ret.Get(0).(func() (map[uuid.UUID]*appnet.ForwardConn, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() map[uuid.UUID]*appnet.ForwardConn); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[uuid.UUID]*appnet.ForwardConn)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListHTTPPorts provides a mock function with given fields:
func (_m *API) ListHTTPPorts() ([]int, error) {
	ret := _m.Called()

	var r0 []int
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogsSince provides a mock function with given fields: timestamp, appName
func (_m *API) LogsSince(timestamp time.Time, appName string) ([]string, error) {
	ret := _m.Called(timestamp, appName)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(time.Time, string) ([]string, error)); ok {
		return rf(timestamp, appName)
	}
	if rf, ok := ret.Get(0).(func(time.Time, string) []string); ok {
		r0 = rf(timestamp, appName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(time.Time, string) error); ok {
		r1 = rf(timestamp, appName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Overview provides a mock function with given fields:
func (_m *API) Overview() (*visor.Overview, error) {
	ret := _m.Called()

	var r0 *visor.Overview
	var r1 error
	if rf, ok := ret.Get(0).(func() (*visor.Overview, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *visor.Overview); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*visor.Overview)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields: config
func (_m *API) Ping(config visor.PingConfig) ([]time.Duration, error) {
	ret := _m.Called(config)

	var r0 []time.Duration
	var r1 error
	if rf, ok := ret.Get(0).(func(visor.PingConfig) ([]time.Duration, error)); ok {
		return rf(config)
	}
	if rf, ok := ret.Get(0).(func(visor.PingConfig) []time.Duration); ok {
		r0 = rf(config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]time.Duration)
		}
	}

	if rf, ok := ret.Get(1).(func(visor.PingConfig) error); ok {
		r1 = rf(config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ports provides a mock function with given fields:
func (_m *API) Ports() (map[string]visor.PortDetail, error) {
	ret := _m.Called()

	var r0 map[string]visor.PortDetail
	var r1 error
	if rf, ok := ret.Get(0).(func() (map[string]visor.PortDetail, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() map[string]visor.PortDetail); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]visor.PortDetail)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProxyServers provides a mock function with given fields: version, country
func (_m *API) ProxyServers(version string, country string) ([]servicedisc.Service, error) {
	ret := _m.Called(version, country)

	var r0 []servicedisc.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]servicedisc.Service, error)); ok {
		return rf(version, country)
	}
	if rf, ok := ret.Get(0).(func(string, string) []servicedisc.Service); ok {
		r0 = rf(version, country)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]servicedisc.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(version, country)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterApp provides a mock function with given fields: procConf
func (_m *API) RegisterApp(procConf appcommon.ProcConfig) (appcommon.ProcKey, error) {
	ret := _m.Called(procConf)

	var r0 appcommon.ProcKey
	var r1 error
	if rf, ok := ret.Get(0).(func(appcommon.ProcConfig) (appcommon.ProcKey, error)); ok {
		return rf(procConf)
	}
	if rf, ok := ret.Get(0).(func(appcommon.ProcConfig) appcommon.ProcKey); ok {
		r0 = rf(procConf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(appcommon.ProcKey)
		}
	}

	if rf, ok := ret.Get(1).(func(appcommon.ProcConfig) error); ok {
		r1 = rf(procConf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterHTTPPort provides a mock function with given fields: localPort
func (_m *API) RegisterHTTPPort(localPort int) error {
	ret := _m.Called(localPort)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(localPort)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Reload provides a mock function with given fields:
func (_m *API) Reload() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoteVisors provides a mock function with given fields:
func (_m *API) RemoteVisors() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveRoutingRule provides a mock function with given fields: key
func (_m *API) RemoveRoutingRule(key routing.RouteID) error {
	ret := _m.Called(key)

	var r0 error
	if rf, ok := ret.Get(0).(func(routing.RouteID) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveTransport provides a mock function with given fields: tid
func (_m *API) RemoveTransport(tid uuid.UUID) error {
	ret := _m.Called(tid)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(tid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RestartApp provides a mock function with given fields: appName
func (_m *API) RestartApp(appName string) error {
	ret := _m.Called(appName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(appName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RouteGroups provides a mock function with given fields:
func (_m *API) RouteGroups() ([]visor.RouteGroupInfo, error) {
	ret := _m.Called()

	var r0 []visor.RouteGroupInfo
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]visor.RouteGroupInfo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []visor.RouteGroupInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]visor.RouteGroupInfo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoutingRule provides a mock function with given fields: key
func (_m *API) RoutingRule(key routing.RouteID) (routing.Rule, error) {
	ret := _m.Called(key)

	var r0 routing.Rule
	var r1 error
	if rf, ok := ret.Get(0).(func(routing.RouteID) (routing.Rule, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(routing.RouteID) routing.Rule); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(routing.Rule)
		}
	}

	if rf, ok := ret.Get(1).(func(routing.RouteID) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoutingRules provides a mock function with given fields:
func (_m *API) RoutingRules() ([]routing.Rule, error) {
	ret := _m.Called()

	var r0 []routing.Rule
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]routing.Rule, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []routing.Rule); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]routing.Rule)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RuntimeLogs provides a mock function with given fields:
func (_m *API) RuntimeLogs() (string, error) {
	ret := _m.Called()

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveRoutingRule provides a mock function with given fields: rule
func (_m *API) SaveRoutingRule(rule routing.Rule) error {
	ret := _m.Called(rule)

	var r0 error
	if rf, ok := ret.Get(0).(func(routing.Rule) error); ok {
		r0 = rf(rule)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetAppAddress provides a mock function with given fields: appName, address
func (_m *API) SetAppAddress(appName string, address string) error {
	ret := _m.Called(appName, address)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(appName, address)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetAppDNS provides a mock function with given fields: appName, dnsaddr
func (_m *API) SetAppDNS(appName string, dnsaddr string) error {
	ret := _m.Called(appName, dnsaddr)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(appName, dnsaddr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetAppDetailedStatus provides a mock function with given fields: appName, state
func (_m *API) SetAppDetailedStatus(appName string, state string) error {
	ret := _m.Called(appName, state)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(appName, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetAppError provides a mock function with given fields: appName, stateErr
func (_m *API) SetAppError(appName string, stateErr string) error {
	ret := _m.Called(appName, stateErr)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(appName, stateErr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetAppKillswitch provides a mock function with given fields: appName, killswitch
func (_m *API) SetAppKillswitch(appName string, killswitch bool) error {
	ret := _m.Called(appName, killswitch)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = rf(appName, killswitch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetAppNetworkInterface provides a mock function with given fields: appName, netifc
func (_m *API) SetAppNetworkInterface(appName string, netifc string) error {
	ret := _m.Called(appName, netifc)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(appName, netifc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetAppPK provides a mock function with given fields: appName, pk
func (_m *API) SetAppPK(appName string, pk cipher.PubKey) error {
	ret := _m.Called(appName, pk)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, cipher.PubKey) error); ok {
		r0 = rf(appName, pk)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetAppPassword provides a mock function with given fields: appName, password
func (_m *API) SetAppPassword(appName string, password string) error {
	ret := _m.Called(appName, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(appName, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetAppSecure provides a mock function with given fields: appName, isSecure
func (_m *API) SetAppSecure(appName string, isSecure bool) error {
	ret := _m.Called(appName, isSecure)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = rf(appName, isSecure)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetAutoStart provides a mock function with given fields: appName, autostart
func (_m *API) SetAutoStart(appName string, autostart bool) error {
	ret := _m.Called(appName, autostart)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = rf(appName, autostart)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetLogRotationInterval provides a mock function with given fields: _a0
func (_m *API) SetLogRotationInterval(_a0 visorconfig.Duration) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(visorconfig.Duration) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetMinHops provides a mock function with given fields: _a0
func (_m *API) SetMinHops(_a0 uint16) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint16) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetPersistentTransports provides a mock function with given fields: _a0
func (_m *API) SetPersistentTransports(_a0 []transport.PersistentTransports) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func([]transport.PersistentTransports) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetPublicAutoconnect provides a mock function with given fields: pAc
func (_m *API) SetPublicAutoconnect(pAc bool) error {
	ret := _m.Called(pAc)

	var r0 error
	if rf, ok := ret.Get(0).(func(bool) error); ok {
		r0 = rf(pAc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetRewardAddress provides a mock function with given fields: _a0
func (_m *API) SetRewardAddress(_a0 string) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Shutdown provides a mock function with given fields:
func (_m *API) Shutdown() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartApp provides a mock function with given fields: appName
func (_m *API) StartApp(appName string) error {
	ret := _m.Called(appName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(appName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartSkysocksClient provides a mock function with given fields: pk
func (_m *API) StartSkysocksClient(pk string) error {
	ret := _m.Called(pk)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(pk)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartVPNClient provides a mock function with given fields: pk
func (_m *API) StartVPNClient(pk cipher.PubKey) error {
	ret := _m.Called(pk)

	var r0 error
	if rf, ok := ret.Get(0).(func(cipher.PubKey) error); ok {
		r0 = rf(pk)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StopApp provides a mock function with given fields: appName
func (_m *API) StopApp(appName string) error {
	ret := _m.Called(appName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(appName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StopPing provides a mock function with given fields: pk
func (_m *API) StopPing(pk cipher.PubKey) error {
	ret := _m.Called(pk)

	var r0 error
	if rf, ok := ret.Get(0).(func(cipher.PubKey) error); ok {
		r0 = rf(pk)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StopSkysocksClients provides a mock function with given fields:
func (_m *API) StopSkysocksClients() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StopVPNClient provides a mock function with given fields: appName
func (_m *API) StopVPNClient(appName string) error {
	ret := _m.Called(appName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(appName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Summary provides a mock function with given fields:
func (_m *API) Summary() (*visor.Summary, error) {
	ret := _m.Called()

	var r0 *visor.Summary
	var r1 error
	if rf, ok := ret.Get(0).(func() (*visor.Summary, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *visor.Summary); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*visor.Summary)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TestVisor provides a mock function with given fields: config
func (_m *API) TestVisor(config visor.PingConfig) ([]visor.TestResult, error) {
	ret := _m.Called(config)

	var r0 []visor.TestResult
	var r1 error
	if rf, ok := ret.Get(0).(func(visor.PingConfig) ([]visor.TestResult, error)); ok {
		return rf(config)
	}
	if rf, ok := ret.Get(0).(func(visor.PingConfig) []visor.TestResult); ok {
		r0 = rf(config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]visor.TestResult)
		}
	}

	if rf, ok := ret.Get(1).(func(visor.PingConfig) error); ok {
		r1 = rf(config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Transport provides a mock function with given fields: tid
func (_m *API) Transport(tid uuid.UUID) (*visor.TransportSummary, error) {
	ret := _m.Called(tid)

	var r0 *visor.TransportSummary
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*visor.TransportSummary, error)); ok {
		return rf(tid)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *visor.TransportSummary); ok {
		r0 = rf(tid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*visor.TransportSummary)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(tid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransportTypes provides a mock function with given fields:
func (_m *API) TransportTypes() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Transports provides a mock function with given fields: types, pks, logs
func (_m *API) Transports(types []string, pks []cipher.PubKey, logs bool) ([]*visor.TransportSummary, error) {
	ret := _m.Called(types, pks, logs)

	var r0 []*visor.TransportSummary
	var r1 error
	if rf, ok := ret.Get(0).(func([]string, []cipher.PubKey, bool) ([]*visor.TransportSummary, error)); ok {
		return rf(types, pks, logs)
	}
	if rf, ok := ret.Get(0).(func([]string, []cipher.PubKey, bool) []*visor.TransportSummary); ok {
		r0 = rf(types, pks, logs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*visor.TransportSummary)
		}
	}

	if rf, ok := ret.Get(1).(func([]string, []cipher.PubKey, bool) error); ok {
		r1 = rf(types, pks, logs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Uptime provides a mock function with given fields:
func (_m *API) Uptime() (float64, error) {
	ret := _m.Called()

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func() (float64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VPNServers provides a mock function with given fields: version, country
func (_m *API) VPNServers(version string, country string) ([]servicedisc.Service, error) {
	ret := _m.Called(version, country)

	var r0 []servicedisc.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]servicedisc.Service, error)); ok {
		return rf(version, country)
	}
	if rf, ok := ret.Get(0).(func(string, string) []servicedisc.Service); ok {
		r0 = rf(version, country)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]servicedisc.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(version, country)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAPI creates a new instance of API. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *API {
	mock := &API{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
