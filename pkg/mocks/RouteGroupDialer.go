// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	cipher "github.com/skycoin/skywire-utilities/pkg/cipher"

	dmsg "github.com/skycoin/dmsg/pkg/dmsg"

	logging "github.com/skycoin/skywire-utilities/pkg/logging"

	mock "github.com/stretchr/testify/mock"

	routing "github.com/skycoin/skywire/pkg/routing"
)

// RouteGroupDialer is an autogenerated mock type for the RouteGroupDialer type
type RouteGroupDialer struct {
	mock.Mock
}

// Dial provides a mock function with given fields: ctx, log, dmsgC, setupNodes, req
func (_m *RouteGroupDialer) Dial(ctx context.Context, log *logging.Logger, dmsgC *dmsg.Client, setupNodes []cipher.PubKey, req routing.BidirectionalRoute) (routing.EdgeRules, error) {
	ret := _m.Called(ctx, log, dmsgC, setupNodes, req)

	var r0 routing.EdgeRules
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *logging.Logger, *dmsg.Client, []cipher.PubKey, routing.BidirectionalRoute) (routing.EdgeRules, error)); ok {
		return rf(ctx, log, dmsgC, setupNodes, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *logging.Logger, *dmsg.Client, []cipher.PubKey, routing.BidirectionalRoute) routing.EdgeRules); ok {
		r0 = rf(ctx, log, dmsgC, setupNodes, req)
	} else {
		r0 = ret.Get(0).(routing.EdgeRules)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *logging.Logger, *dmsg.Client, []cipher.PubKey, routing.BidirectionalRoute) error); ok {
		r1 = rf(ctx, log, dmsgC, setupNodes, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRouteGroupDialer creates a new instance of RouteGroupDialer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRouteGroupDialer(t interface {
	mock.TestingT
	Cleanup(func())
}) *RouteGroupDialer {
	mock := &RouteGroupDialer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
