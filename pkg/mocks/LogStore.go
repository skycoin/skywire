// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	logrus "github.com/sirupsen/logrus"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// LogStore is an autogenerated mock type for the LogStore type
type LogStore struct {
	mock.Mock
}

// Fire provides a mock function with given fields: entry
func (_m *LogStore) Fire(entry *logrus.Entry) error {
	ret := _m.Called(entry)

	var r0 error
	if rf, ok := ret.Get(0).(func(*logrus.Entry) error); ok {
		r0 = rf(entry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Flush provides a mock function with given fields:
func (_m *LogStore) Flush() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Levels provides a mock function with given fields:
func (_m *LogStore) Levels() []logrus.Level {
	ret := _m.Called()

	var r0 []logrus.Level
	if rf, ok := ret.Get(0).(func() []logrus.Level); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]logrus.Level)
		}
	}

	return r0
}

// LogsSince provides a mock function with given fields: t
func (_m *LogStore) LogsSince(t time.Time) ([]string, error) {
	ret := _m.Called(t)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(time.Time) ([]string, error)); ok {
		return rf(t)
	}
	if rf, ok := ret.Get(0).(func(time.Time) []string); ok {
		r0 = rf(t)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(time.Time) error); ok {
		r1 = rf(t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: t, s
func (_m *LogStore) Store(t time.Time, s string) error {
	ret := _m.Called(t, s)

	var r0 error
	if rf, ok := ret.Get(0).(func(time.Time, string) error); ok {
		r0 = rf(t, s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Write provides a mock function with given fields: p
func (_m *LogStore) Write(p []byte) (int, error) {
	ret := _m.Called(p)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return rf(p)
	}
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLogStore creates a new instance of LogStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *LogStore {
	mock := &LogStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
