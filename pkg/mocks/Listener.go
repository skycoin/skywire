// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	cipher "github.com/skycoin/skywire-utilities/pkg/cipher"
	mock "github.com/stretchr/testify/mock"

	net "net"

	network "github.com/skycoin/skywire/pkg/transport/network"
)

// Listener is an autogenerated mock type for the Listener type
type Listener struct {
	mock.Mock
}

// Accept provides a mock function with given fields:
func (_m *Listener) Accept() (net.Conn, error) {
	ret := _m.Called()

	var r0 net.Conn
	var r1 error
	if rf, ok := ret.Get(0).(func() (net.Conn, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() net.Conn); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.Conn)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AcceptTransport provides a mock function with given fields:
func (_m *Listener) AcceptTransport() (network.Transport, error) {
	ret := _m.Called()

	var r0 network.Transport
	var r1 error
	if rf, ok := ret.Get(0).(func() (network.Transport, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() network.Transport); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(network.Transport)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Addr provides a mock function with given fields:
func (_m *Listener) Addr() net.Addr {
	ret := _m.Called()

	var r0 net.Addr
	if rf, ok := ret.Get(0).(func() net.Addr); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.Addr)
		}
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *Listener) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Network provides a mock function with given fields:
func (_m *Listener) Network() network.Type {
	ret := _m.Called()

	var r0 network.Type
	if rf, ok := ret.Get(0).(func() network.Type); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(network.Type)
	}

	return r0
}

// PK provides a mock function with given fields:
func (_m *Listener) PK() cipher.PubKey {
	ret := _m.Called()

	var r0 cipher.PubKey
	if rf, ok := ret.Get(0).(func() cipher.PubKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cipher.PubKey)
		}
	}

	return r0
}

// Port provides a mock function with given fields:
func (_m *Listener) Port() uint16 {
	ret := _m.Called()

	var r0 uint16
	if rf, ok := ret.Get(0).(func() uint16); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint16)
	}

	return r0
}

// NewListener creates a new instance of Listener. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewListener(t interface {
	mock.TestingT
	Cleanup(func())
}) *Listener {
	mock := &Listener{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
