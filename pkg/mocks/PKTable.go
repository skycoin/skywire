// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	cipher "github.com/skycoin/skywire-utilities/pkg/cipher"
	mock "github.com/stretchr/testify/mock"
)

// PKTable is an autogenerated mock type for the PKTable type
type PKTable struct {
	mock.Mock
}

// Addr provides a mock function with given fields: pk
func (_m *PKTable) Addr(pk cipher.PubKey) (string, bool) {
	ret := _m.Called(pk)

	var r0 string
	var r1 bool
	if rf, ok := ret.Get(0).(func(cipher.PubKey) (string, bool)); ok {
		return rf(pk)
	}
	if rf, ok := ret.Get(0).(func(cipher.PubKey) string); ok {
		r0 = rf(pk)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(cipher.PubKey) bool); ok {
		r1 = rf(pk)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Count provides a mock function with given fields:
func (_m *PKTable) Count() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// PubKey provides a mock function with given fields: addr
func (_m *PKTable) PubKey(addr string) (cipher.PubKey, bool) {
	ret := _m.Called(addr)

	var r0 cipher.PubKey
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (cipher.PubKey, bool)); ok {
		return rf(addr)
	}
	if rf, ok := ret.Get(0).(func(string) cipher.PubKey); ok {
		r0 = rf(addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cipher.PubKey)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(addr)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// NewPKTable creates a new instance of PKTable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPKTable(t interface {
	mock.TestingT
	Cleanup(func())
}) *PKTable {
	mock := &PKTable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
