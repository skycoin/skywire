// Code generated by mockery v2.14.1. DO NOT EDIT.

package router

import (
	context "context"

	cipher "github.com/skycoin/skywire-utilities/pkg/cipher"

	mock "github.com/stretchr/testify/mock"

	routing "github.com/skycoin/skywire/pkg/routing"
)

// MockIDReserver is an autogenerated mock type for the IDReserver type
type MockIDReserver struct {
	mock.Mock
}

// Client provides a mock function with given fields: pk
func (_m *MockIDReserver) Client(pk cipher.PubKey) *Client {
	ret := _m.Called(pk)

	var r0 *Client
	if rf, ok := ret.Get(0).(func(cipher.PubKey) *Client); ok {
		r0 = rf(pk)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Client)
		}
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *MockIDReserver) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PopID provides a mock function with given fields: pk
func (_m *MockIDReserver) PopID(pk cipher.PubKey) (routing.RouteID, bool) {
	ret := _m.Called(pk)

	var r0 routing.RouteID
	if rf, ok := ret.Get(0).(func(cipher.PubKey) routing.RouteID); ok {
		r0 = rf(pk)
	} else {
		r0 = ret.Get(0).(routing.RouteID)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(cipher.PubKey) bool); ok {
		r1 = rf(pk)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// ReserveIDs provides a mock function with given fields: ctx
func (_m *MockIDReserver) ReserveIDs(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// String provides a mock function with given fields:
func (_m *MockIDReserver) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// TotalIDs provides a mock function with given fields:
func (_m *MockIDReserver) TotalIDs() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

type mockConstructorTestingTNewMockIDReserver interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockIDReserver creates a new instance of MockIDReserver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockIDReserver(t mockConstructorTestingTNewMockIDReserver) *MockIDReserver {
	mock := &MockIDReserver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
