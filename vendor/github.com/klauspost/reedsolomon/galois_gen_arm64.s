// Code generated by command: go generate gen.go. DO NOT EDIT.

//go:build !appengine && !noasm && !nogen && !nopshufb && gc

#include "textflag.h"

// func mulSve_10x1_64(matrix []byte, in [][]byte, out [][]byte, start int, n int)
// Requires: SVE
TEXT Â·mulSve_10x1_64(SB), $0-88
    // Loading no tables to registers
    // Destination kept in GP registers
    // Full registers estimated 46 YMM used
    MOVD n+80(FP), R0
    MOVD matrix_base+0(FP), R2
    WORD $0xd346fc00 // lsr x0, x0, #6                              
    WORD $0xd37ae400 // lsl x0, x0, #6
    WORD $0x04bf5050 // rdvl x16, #2
    WORD $0x9ad00800 // udiv x0, x0, x16
    WORD $0xea00001f // tst x0, x0                                  
    BEQ    mulSve_10x1_64_end
    MOVD in_base+24(FP), R3
    MOVD (R3), R1
    MOVD 24(R3), R4
    MOVD 48(R3), R5
    MOVD 72(R3), R8
    MOVD 96(R3), R9
    MOVD 120(R3), R10
    MOVD 144(R3), R11
    MOVD 168(R3), R12
    MOVD 192(R3), R13
    MOVD 216(R3), R3
    MOVD out_base+48(FP), R14
    MOVD (R14), R14
    MOVD start+72(FP), R15

    // Add start offset to output
    WORD $0x8b0f01ce // add x14, x14, x15                           

    // Add start offset to input
    WORD $0x8b0f0021 // add x1, x1, x15                             
    WORD $0x8b0f0084 // add x4, x4, x15                             
    WORD $0x8b0f00a5 // add x5, x5, x15                             
    WORD $0x8b0f0108 // add x8, x8, x15                             
    WORD $0x8b0f0129 // add x9, x9, x15                             
    WORD $0x8b0f014a // add x10, x10, x15                           
    WORD $0x8b0f016b // add x11, x11, x15                           
    WORD $0x8b0f018c // add x12, x12, x15                           
    WORD $0x8b0f01ad // add x13, x13, x15                           
    WORD $0x8b0f0063 // add x3, x3, x15                             
    WORD $0xd28001ef // mov x15, #15                                
    WORD $0x05e039e2 // mov z2.d, x15                               
    WORD $0x05212042 // dup z2.b, z2.b[0]                           

    // Load number of input shards
    MOVD   in_len+32(FP), R16

mulSve_10x1_64_loop:
    // Load and process 64 bytes from input 0 to 1 outputs
    WORD $0x85804026 // ldr z6, [x1]                                
    WORD $0x85804425 // ldr z5, [x1, #1, MUL VL]                    
    WORD $0x04215041 // addvl x1, x1, #2
    WORD $0x04fc94c7 // lsr z7.d, z6.d, #4                          
    WORD $0x04fc94a8 // lsr z8.d, z5.d, #4                          
    WORD $0x042230c6 // and z6.d, z6.d, z2.d                        
    WORD $0x042230a5 // and z5.d, z5.d, z2.d                        
    WORD $0x042230e7 // and z7.d, z7.d, z2.d                        
    WORD $0x04223108 // and z8.d, z8.d, z2.d                        
    WORD $0x85804043 // ldr z3, [x2]                                
    WORD $0x85804444 // ldr z4, [x2, #1, MUL VL]                    
    WORD $0x05253065 // tbl z5.b, z3.b, z5.b                        
    WORD $0x05263063 // tbl z3.b, z3.b, z6.b                        
    WORD $0x05283086 // tbl z6.b, z4.b, z8.b                        
    WORD $0x05273084 // tbl z4.b, z4.b, z7.b                        
    WORD $0x04a33080 // eor z0.d, z4.d, z3.d                        
    WORD $0x04a530c1 // eor z1.d, z6.d, z5.d                        
    // Check for early termination
    CMP    $1, R16
    BEQ    mulSve_10x1_64_store

    // Load and process 64 bytes from input 1 to 1 outputs
    WORD $0x85804086 // ldr z6, [x4]                                
    WORD $0x85804485 // ldr z5, [x4, #1, MUL VL]                    
    WORD $0x04245044 // addvl x4, x4, #2
    WORD $0x04fc94c7 // lsr z7.d, z6.d, #4                          
    WORD $0x04fc94a8 // lsr z8.d, z5.d, #4                          
    WORD $0x042230c6 // and z6.d, z6.d, z2.d                        
    WORD $0x042230a5 // and z5.d, z5.d, z2.d                        
    WORD $0x042230e7 // and z7.d, z7.d, z2.d                        
    WORD $0x04223108 // and z8.d, z8.d, z2.d                        
    WORD $0x85804843 // ldr z3, [x2, #2, MUL VL]                    
    WORD $0x85804c44 // ldr z4, [x2, #3, MUL VL]                    
    WORD $0x05253065 // tbl z5.b, z3.b, z5.b                        
    WORD $0x05263063 // tbl z3.b, z3.b, z6.b                        
    WORD $0x05283086 // tbl z6.b, z4.b, z8.b                        
    WORD $0x05273084 // tbl z4.b, z4.b, z7.b                        
    WORD $0x04a33000 // eor z0.d, z0.d, z3.d                        
    WORD $0x04a43000 // eor z0.d, z0.d, z4.d                        
    WORD $0x04a53021 // eor z1.d, z1.d, z5.d                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    // Check for early termination
    CMP    $2, R16
    BEQ    mulSve_10x1_64_store

    // Load and process 64 bytes from input 2 to 1 outputs
    WORD $0x858040a6 // ldr z6, [x5]                                
    WORD $0x858044a5 // ldr z5, [x5, #1, MUL VL]                    
    WORD $0x04255045 // addvl x5, x5, #2
    WORD $0x04fc94c7 // lsr z7.d, z6.d, #4                          
    WORD $0x04fc94a8 // lsr z8.d, z5.d, #4                          
    WORD $0x042230c6 // and z6.d, z6.d, z2.d                        
    WORD $0x042230a5 // and z5.d, z5.d, z2.d                        
    WORD $0x042230e7 // and z7.d, z7.d, z2.d                        
    WORD $0x04223108 // and z8.d, z8.d, z2.d                        
    WORD $0x85805043 // ldr z3, [x2, #4, MUL VL]                    
    WORD $0x85805444 // ldr z4, [x2, #5, MUL VL]                    
    WORD $0x05253065 // tbl z5.b, z3.b, z5.b                        
    WORD $0x05263063 // tbl z3.b, z3.b, z6.b                        
    WORD $0x05283086 // tbl z6.b, z4.b, z8.b                        
    WORD $0x05273084 // tbl z4.b, z4.b, z7.b                        
    WORD $0x04a33000 // eor z0.d, z0.d, z3.d                        
    WORD $0x04a43000 // eor z0.d, z0.d, z4.d                        
    WORD $0x04a53021 // eor z1.d, z1.d, z5.d                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    // Check for early termination
    CMP    $3, R16
    BEQ    mulSve_10x1_64_store

    // Load and process 64 bytes from input 3 to 1 outputs
    WORD $0x85804106 // ldr z6, [x8]                                
    WORD $0x85804505 // ldr z5, [x8, #1, MUL VL]                    
    WORD $0x04285048 // addvl x8, x8, #2
    WORD $0x04fc94c7 // lsr z7.d, z6.d, #4                          
    WORD $0x04fc94a8 // lsr z8.d, z5.d, #4                          
    WORD $0x042230c6 // and z6.d, z6.d, z2.d                        
    WORD $0x042230a5 // and z5.d, z5.d, z2.d                        
    WORD $0x042230e7 // and z7.d, z7.d, z2.d                        
    WORD $0x04223108 // and z8.d, z8.d, z2.d                        
    WORD $0x85805843 // ldr z3, [x2, #6, MUL VL]                    
    WORD $0x85805c44 // ldr z4, [x2, #7, MUL VL]                    
    WORD $0x05253065 // tbl z5.b, z3.b, z5.b                        
    WORD $0x05263063 // tbl z3.b, z3.b, z6.b                        
    WORD $0x05283086 // tbl z6.b, z4.b, z8.b                        
    WORD $0x05273084 // tbl z4.b, z4.b, z7.b                        
    WORD $0x04a33000 // eor z0.d, z0.d, z3.d                        
    WORD $0x04a43000 // eor z0.d, z0.d, z4.d                        
    WORD $0x04a53021 // eor z1.d, z1.d, z5.d                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    // Check for early termination
    CMP    $4, R16
    BEQ    mulSve_10x1_64_store

    // Load and process 64 bytes from input 4 to 1 outputs
    WORD $0x85804126 // ldr z6, [x9]                                
    WORD $0x85804525 // ldr z5, [x9, #1, MUL VL]                    
    WORD $0x04295049 // addvl x9, x9, #2
    WORD $0x04fc94c7 // lsr z7.d, z6.d, #4                          
    WORD $0x04fc94a8 // lsr z8.d, z5.d, #4                          
    WORD $0x042230c6 // and z6.d, z6.d, z2.d                        
    WORD $0x042230a5 // and z5.d, z5.d, z2.d                        
    WORD $0x042230e7 // and z7.d, z7.d, z2.d                        
    WORD $0x04223108 // and z8.d, z8.d, z2.d                        
    WORD $0x85814043 // ldr z3, [x2, #8, MUL VL]                    
    WORD $0x85814444 // ldr z4, [x2, #9, MUL VL]                    
    WORD $0x05253065 // tbl z5.b, z3.b, z5.b                        
    WORD $0x05263063 // tbl z3.b, z3.b, z6.b                        
    WORD $0x05283086 // tbl z6.b, z4.b, z8.b                        
    WORD $0x05273084 // tbl z4.b, z4.b, z7.b                        
    WORD $0x04a33000 // eor z0.d, z0.d, z3.d                        
    WORD $0x04a43000 // eor z0.d, z0.d, z4.d                        
    WORD $0x04a53021 // eor z1.d, z1.d, z5.d                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    // Check for early termination
    CMP    $5, R16
    BEQ    mulSve_10x1_64_store

    // Load and process 64 bytes from input 5 to 1 outputs
    WORD $0x85804146 // ldr z6, [x10]                               
    WORD $0x85804545 // ldr z5, [x10, #1, MUL VL]                   
    WORD $0x042a504a // addvl x10, x10, #2
    WORD $0x04fc94c7 // lsr z7.d, z6.d, #4                          
    WORD $0x04fc94a8 // lsr z8.d, z5.d, #4                          
    WORD $0x042230c6 // and z6.d, z6.d, z2.d                        
    WORD $0x042230a5 // and z5.d, z5.d, z2.d                        
    WORD $0x042230e7 // and z7.d, z7.d, z2.d                        
    WORD $0x04223108 // and z8.d, z8.d, z2.d                        
    WORD $0x85814843 // ldr z3, [x2, #10, MUL VL]                   
    WORD $0x85814c44 // ldr z4, [x2, #11, MUL VL]                   
    WORD $0x05253065 // tbl z5.b, z3.b, z5.b                        
    WORD $0x05263063 // tbl z3.b, z3.b, z6.b                        
    WORD $0x05283086 // tbl z6.b, z4.b, z8.b                        
    WORD $0x05273084 // tbl z4.b, z4.b, z7.b                        
    WORD $0x04a33000 // eor z0.d, z0.d, z3.d                        
    WORD $0x04a43000 // eor z0.d, z0.d, z4.d                        
    WORD $0x04a53021 // eor z1.d, z1.d, z5.d                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    // Check for early termination
    CMP    $6, R16
    BEQ    mulSve_10x1_64_store

    // Load and process 64 bytes from input 6 to 1 outputs
    WORD $0x85804166 // ldr z6, [x11]                               
    WORD $0x85804565 // ldr z5, [x11, #1, MUL VL]                   
    WORD $0x042b504b // addvl x11, x11, #2
    WORD $0x04fc94c7 // lsr z7.d, z6.d, #4                          
    WORD $0x04fc94a8 // lsr z8.d, z5.d, #4                          
    WORD $0x042230c6 // and z6.d, z6.d, z2.d                        
    WORD $0x042230a5 // and z5.d, z5.d, z2.d                        
    WORD $0x042230e7 // and z7.d, z7.d, z2.d                        
    WORD $0x04223108 // and z8.d, z8.d, z2.d                        
    WORD $0x85815043 // ldr z3, [x2, #12, MUL VL]                   
    WORD $0x85815444 // ldr z4, [x2, #13, MUL VL]                   
    WORD $0x05253065 // tbl z5.b, z3.b, z5.b                        
    WORD $0x05263063 // tbl z3.b, z3.b, z6.b                        
    WORD $0x05283086 // tbl z6.b, z4.b, z8.b                        
    WORD $0x05273084 // tbl z4.b, z4.b, z7.b                        
    WORD $0x04a33000 // eor z0.d, z0.d, z3.d                        
    WORD $0x04a43000 // eor z0.d, z0.d, z4.d                        
    WORD $0x04a53021 // eor z1.d, z1.d, z5.d                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    // Check for early termination
    CMP    $7, R16
    BEQ    mulSve_10x1_64_store

    // Load and process 64 bytes from input 7 to 1 outputs
    WORD $0x85804186 // ldr z6, [x12]                               
    WORD $0x85804585 // ldr z5, [x12, #1, MUL VL]                   
    WORD $0x042c504c // addvl x12, x12, #2
    WORD $0x04fc94c7 // lsr z7.d, z6.d, #4                          
    WORD $0x04fc94a8 // lsr z8.d, z5.d, #4                          
    WORD $0x042230c6 // and z6.d, z6.d, z2.d                        
    WORD $0x042230a5 // and z5.d, z5.d, z2.d                        
    WORD $0x042230e7 // and z7.d, z7.d, z2.d                        
    WORD $0x04223108 // and z8.d, z8.d, z2.d                        
    WORD $0x85815843 // ldr z3, [x2, #14, MUL VL]                   
    WORD $0x85815c44 // ldr z4, [x2, #15, MUL VL]                   
    WORD $0x05253065 // tbl z5.b, z3.b, z5.b                        
    WORD $0x05263063 // tbl z3.b, z3.b, z6.b                        
    WORD $0x05283086 // tbl z6.b, z4.b, z8.b                        
    WORD $0x05273084 // tbl z4.b, z4.b, z7.b                        
    WORD $0x04a33000 // eor z0.d, z0.d, z3.d                        
    WORD $0x04a43000 // eor z0.d, z0.d, z4.d                        
    WORD $0x04a53021 // eor z1.d, z1.d, z5.d                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    // Check for early termination
    CMP    $8, R16
    BEQ    mulSve_10x1_64_store

    // Load and process 64 bytes from input 8 to 1 outputs
    WORD $0x858041a6 // ldr z6, [x13]                               
    WORD $0x858045a5 // ldr z5, [x13, #1, MUL VL]                   
    WORD $0x042d504d // addvl x13, x13, #2
    WORD $0x04fc94c7 // lsr z7.d, z6.d, #4                          
    WORD $0x04fc94a8 // lsr z8.d, z5.d, #4                          
    WORD $0x042230c6 // and z6.d, z6.d, z2.d                        
    WORD $0x042230a5 // and z5.d, z5.d, z2.d                        
    WORD $0x042230e7 // and z7.d, z7.d, z2.d                        
    WORD $0x04223108 // and z8.d, z8.d, z2.d                        
    WORD $0x85824043 // ldr z3, [x2, #16, MUL VL]                   
    WORD $0x85824444 // ldr z4, [x2, #17, MUL VL]                   
    WORD $0x05253065 // tbl z5.b, z3.b, z5.b                        
    WORD $0x05263063 // tbl z3.b, z3.b, z6.b                        
    WORD $0x05283086 // tbl z6.b, z4.b, z8.b                        
    WORD $0x05273084 // tbl z4.b, z4.b, z7.b                        
    WORD $0x04a33000 // eor z0.d, z0.d, z3.d                        
    WORD $0x04a43000 // eor z0.d, z0.d, z4.d                        
    WORD $0x04a53021 // eor z1.d, z1.d, z5.d                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    // Check for early termination
    CMP    $9, R16
    BEQ    mulSve_10x1_64_store

    // Load and process 64 bytes from input 9 to 1 outputs
    WORD $0x85804066 // ldr z6, [x3]                                
    WORD $0x85804465 // ldr z5, [x3, #1, MUL VL]                    
    WORD $0x04235043 // addvl x3, x3, #2
    WORD $0x04fc94c7 // lsr z7.d, z6.d, #4                          
    WORD $0x04fc94a8 // lsr z8.d, z5.d, #4                          
    WORD $0x042230c6 // and z6.d, z6.d, z2.d                        
    WORD $0x042230a5 // and z5.d, z5.d, z2.d                        
    WORD $0x042230e7 // and z7.d, z7.d, z2.d                        
    WORD $0x04223108 // and z8.d, z8.d, z2.d                        
    WORD $0x85824843 // ldr z3, [x2, #18, MUL VL]                   
    WORD $0x85824c44 // ldr z4, [x2, #19, MUL VL]                   
    WORD $0x05253065 // tbl z5.b, z3.b, z5.b                        
    WORD $0x05263063 // tbl z3.b, z3.b, z6.b                        
    WORD $0x05283086 // tbl z6.b, z4.b, z8.b                        
    WORD $0x05273084 // tbl z4.b, z4.b, z7.b                        
    WORD $0x04a33000 // eor z0.d, z0.d, z3.d                        
    WORD $0x04a43000 // eor z0.d, z0.d, z4.d                        
    WORD $0x04a53021 // eor z1.d, z1.d, z5.d                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        

mulSve_10x1_64_store:
    // Store 1 outputs
    WORD $0xe58041c0 // str z0, [x14]                               
    WORD $0xe58045c1 // str z1, [x14, #1, MUL VL]                   
    WORD $0x042e504e // addvl x14, x14, #2

    // Prepare for next loop
    WORD $0xf1000400 // subs x0, x0, #1                             
    BNE  mulSve_10x1_64_loop

mulSve_10x1_64_end:
    RET

// func mulSve_10x1_64Xor(matrix []byte, in [][]byte, out [][]byte, start int, n int)
// Requires: SVE
TEXT Â·mulSve_10x1_64Xor(SB), $0-88
    // Loading no tables to registers
    // Destination kept in GP registers
    // Full registers estimated 46 YMM used
    MOVD n+80(FP), R0
    MOVD matrix_base+0(FP), R2
    WORD $0xd346fc00 // lsr x0, x0, #6                              
    WORD $0xd37ae400 // lsl x0, x0, #6
    WORD $0x04bf5050 // rdvl x16, #2
    WORD $0x9ad00800 // udiv x0, x0, x16
    WORD $0xea00001f // tst x0, x0                                  
    BEQ    mulSve_10x1_64Xor_end
    MOVD in_base+24(FP), R3
    MOVD (R3), R1
    MOVD 24(R3), R4
    MOVD 48(R3), R5
    MOVD 72(R3), R8
    MOVD 96(R3), R9
    MOVD 120(R3), R10
    MOVD 144(R3), R11
    MOVD 168(R3), R12
    MOVD 192(R3), R13
    MOVD 216(R3), R3
    MOVD out_base+48(FP), R14
    MOVD (R14), R14
    MOVD start+72(FP), R15

    // Add start offset to output
    WORD $0x8b0f01ce // add x14, x14, x15                           

    // Add start offset to input
    WORD $0x8b0f0021 // add x1, x1, x15                             
    WORD $0x8b0f0084 // add x4, x4, x15                             
    WORD $0x8b0f00a5 // add x5, x5, x15                             
    WORD $0x8b0f0108 // add x8, x8, x15                             
    WORD $0x8b0f0129 // add x9, x9, x15                             
    WORD $0x8b0f014a // add x10, x10, x15                           
    WORD $0x8b0f016b // add x11, x11, x15                           
    WORD $0x8b0f018c // add x12, x12, x15                           
    WORD $0x8b0f01ad // add x13, x13, x15                           
    WORD $0x8b0f0063 // add x3, x3, x15                             
    WORD $0xd28001ef // mov x15, #15                                
    WORD $0x05e039e2 // mov z2.d, x15                               
    WORD $0x05212042 // dup z2.b, z2.b[0]                           

    // Load number of input shards
    MOVD   in_len+32(FP), R16

mulSve_10x1_64Xor_loop:
    // Load 1 outputs
    WORD $0x858041c0 // ldr z0, [x14]                               
    WORD $0x858045c1 // ldr z1, [x14, #1, MUL VL]                   

    // Load and process 64 bytes from input 0 to 1 outputs
    WORD $0x85804026 // ldr z6, [x1]                                
    WORD $0x85804425 // ldr z5, [x1, #1, MUL VL]                    
    WORD $0x04215041 // addvl x1, x1, #2
    WORD $0x04fc94c7 // lsr z7.d, z6.d, #4                          
    WORD $0x04fc94a8 // lsr z8.d, z5.d, #4                          
    WORD $0x042230c6 // and z6.d, z6.d, z2.d                        
    WORD $0x042230a5 // and z5.d, z5.d, z2.d                        
    WORD $0x042230e7 // and z7.d, z7.d, z2.d                        
    WORD $0x04223108 // and z8.d, z8.d, z2.d                        
    WORD $0x85804043 // ldr z3, [x2]                                
    WORD $0x85804444 // ldr z4, [x2, #1, MUL VL]                    
    WORD $0x05253065 // tbl z5.b, z3.b, z5.b                        
    WORD $0x05263063 // tbl z3.b, z3.b, z6.b                        
    WORD $0x05283086 // tbl z6.b, z4.b, z8.b                        
    WORD $0x05273084 // tbl z4.b, z4.b, z7.b                        
    WORD $0x04a33000 // eor z0.d, z0.d, z3.d                        
    WORD $0x04a43000 // eor z0.d, z0.d, z4.d                        
    WORD $0x04a53021 // eor z1.d, z1.d, z5.d                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    // Check for early termination
    CMP    $1, R16
    BEQ    mulSve_10x1_64Xor_store

    // Load and process 64 bytes from input 1 to 1 outputs
    WORD $0x85804086 // ldr z6, [x4]                                
    WORD $0x85804485 // ldr z5, [x4, #1, MUL VL]                    
    WORD $0x04245044 // addvl x4, x4, #2
    WORD $0x04fc94c7 // lsr z7.d, z6.d, #4                          
    WORD $0x04fc94a8 // lsr z8.d, z5.d, #4                          
    WORD $0x042230c6 // and z6.d, z6.d, z2.d                        
    WORD $0x042230a5 // and z5.d, z5.d, z2.d                        
    WORD $0x042230e7 // and z7.d, z7.d, z2.d                        
    WORD $0x04223108 // and z8.d, z8.d, z2.d                        
    WORD $0x85804843 // ldr z3, [x2, #2, MUL VL]                    
    WORD $0x85804c44 // ldr z4, [x2, #3, MUL VL]                    
    WORD $0x05253065 // tbl z5.b, z3.b, z5.b                        
    WORD $0x05263063 // tbl z3.b, z3.b, z6.b                        
    WORD $0x05283086 // tbl z6.b, z4.b, z8.b                        
    WORD $0x05273084 // tbl z4.b, z4.b, z7.b                        
    WORD $0x04a33000 // eor z0.d, z0.d, z3.d                        
    WORD $0x04a43000 // eor z0.d, z0.d, z4.d                        
    WORD $0x04a53021 // eor z1.d, z1.d, z5.d                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    // Check for early termination
    CMP    $2, R16
    BEQ    mulSve_10x1_64Xor_store

    // Load and process 64 bytes from input 2 to 1 outputs
    WORD $0x858040a6 // ldr z6, [x5]                                
    WORD $0x858044a5 // ldr z5, [x5, #1, MUL VL]                    
    WORD $0x04255045 // addvl x5, x5, #2
    WORD $0x04fc94c7 // lsr z7.d, z6.d, #4                          
    WORD $0x04fc94a8 // lsr z8.d, z5.d, #4                          
    WORD $0x042230c6 // and z6.d, z6.d, z2.d                        
    WORD $0x042230a5 // and z5.d, z5.d, z2.d                        
    WORD $0x042230e7 // and z7.d, z7.d, z2.d                        
    WORD $0x04223108 // and z8.d, z8.d, z2.d                        
    WORD $0x85805043 // ldr z3, [x2, #4, MUL VL]                    
    WORD $0x85805444 // ldr z4, [x2, #5, MUL VL]                    
    WORD $0x05253065 // tbl z5.b, z3.b, z5.b                        
    WORD $0x05263063 // tbl z3.b, z3.b, z6.b                        
    WORD $0x05283086 // tbl z6.b, z4.b, z8.b                        
    WORD $0x05273084 // tbl z4.b, z4.b, z7.b                        
    WORD $0x04a33000 // eor z0.d, z0.d, z3.d                        
    WORD $0x04a43000 // eor z0.d, z0.d, z4.d                        
    WORD $0x04a53021 // eor z1.d, z1.d, z5.d                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    // Check for early termination
    CMP    $3, R16
    BEQ    mulSve_10x1_64Xor_store

    // Load and process 64 bytes from input 3 to 1 outputs
    WORD $0x85804106 // ldr z6, [x8]                                
    WORD $0x85804505 // ldr z5, [x8, #1, MUL VL]                    
    WORD $0x04285048 // addvl x8, x8, #2
    WORD $0x04fc94c7 // lsr z7.d, z6.d, #4                          
    WORD $0x04fc94a8 // lsr z8.d, z5.d, #4                          
    WORD $0x042230c6 // and z6.d, z6.d, z2.d                        
    WORD $0x042230a5 // and z5.d, z5.d, z2.d                        
    WORD $0x042230e7 // and z7.d, z7.d, z2.d                        
    WORD $0x04223108 // and z8.d, z8.d, z2.d                        
    WORD $0x85805843 // ldr z3, [x2, #6, MUL VL]                    
    WORD $0x85805c44 // ldr z4, [x2, #7, MUL VL]                    
    WORD $0x05253065 // tbl z5.b, z3.b, z5.b                        
    WORD $0x05263063 // tbl z3.b, z3.b, z6.b                        
    WORD $0x05283086 // tbl z6.b, z4.b, z8.b                        
    WORD $0x05273084 // tbl z4.b, z4.b, z7.b                        
    WORD $0x04a33000 // eor z0.d, z0.d, z3.d                        
    WORD $0x04a43000 // eor z0.d, z0.d, z4.d                        
    WORD $0x04a53021 // eor z1.d, z1.d, z5.d                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    // Check for early termination
    CMP    $4, R16
    BEQ    mulSve_10x1_64Xor_store

    // Load and process 64 bytes from input 4 to 1 outputs
    WORD $0x85804126 // ldr z6, [x9]                                
    WORD $0x85804525 // ldr z5, [x9, #1, MUL VL]                    
    WORD $0x04295049 // addvl x9, x9, #2
    WORD $0x04fc94c7 // lsr z7.d, z6.d, #4                          
    WORD $0x04fc94a8 // lsr z8.d, z5.d, #4                          
    WORD $0x042230c6 // and z6.d, z6.d, z2.d                        
    WORD $0x042230a5 // and z5.d, z5.d, z2.d                        
    WORD $0x042230e7 // and z7.d, z7.d, z2.d                        
    WORD $0x04223108 // and z8.d, z8.d, z2.d                        
    WORD $0x85814043 // ldr z3, [x2, #8, MUL VL]                    
    WORD $0x85814444 // ldr z4, [x2, #9, MUL VL]                    
    WORD $0x05253065 // tbl z5.b, z3.b, z5.b                        
    WORD $0x05263063 // tbl z3.b, z3.b, z6.b                        
    WORD $0x05283086 // tbl z6.b, z4.b, z8.b                        
    WORD $0x05273084 // tbl z4.b, z4.b, z7.b                        
    WORD $0x04a33000 // eor z0.d, z0.d, z3.d                        
    WORD $0x04a43000 // eor z0.d, z0.d, z4.d                        
    WORD $0x04a53021 // eor z1.d, z1.d, z5.d                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    // Check for early termination
    CMP    $5, R16
    BEQ    mulSve_10x1_64Xor_store

    // Load and process 64 bytes from input 5 to 1 outputs
    WORD $0x85804146 // ldr z6, [x10]                               
    WORD $0x85804545 // ldr z5, [x10, #1, MUL VL]                   
    WORD $0x042a504a // addvl x10, x10, #2
    WORD $0x04fc94c7 // lsr z7.d, z6.d, #4                          
    WORD $0x04fc94a8 // lsr z8.d, z5.d, #4                          
    WORD $0x042230c6 // and z6.d, z6.d, z2.d                        
    WORD $0x042230a5 // and z5.d, z5.d, z2.d                        
    WORD $0x042230e7 // and z7.d, z7.d, z2.d                        
    WORD $0x04223108 // and z8.d, z8.d, z2.d                        
    WORD $0x85814843 // ldr z3, [x2, #10, MUL VL]                   
    WORD $0x85814c44 // ldr z4, [x2, #11, MUL VL]                   
    WORD $0x05253065 // tbl z5.b, z3.b, z5.b                        
    WORD $0x05263063 // tbl z3.b, z3.b, z6.b                        
    WORD $0x05283086 // tbl z6.b, z4.b, z8.b                        
    WORD $0x05273084 // tbl z4.b, z4.b, z7.b                        
    WORD $0x04a33000 // eor z0.d, z0.d, z3.d                        
    WORD $0x04a43000 // eor z0.d, z0.d, z4.d                        
    WORD $0x04a53021 // eor z1.d, z1.d, z5.d                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    // Check for early termination
    CMP    $6, R16
    BEQ    mulSve_10x1_64Xor_store

    // Load and process 64 bytes from input 6 to 1 outputs
    WORD $0x85804166 // ldr z6, [x11]                               
    WORD $0x85804565 // ldr z5, [x11, #1, MUL VL]                   
    WORD $0x042b504b // addvl x11, x11, #2
    WORD $0x04fc94c7 // lsr z7.d, z6.d, #4                          
    WORD $0x04fc94a8 // lsr z8.d, z5.d, #4                          
    WORD $0x042230c6 // and z6.d, z6.d, z2.d                        
    WORD $0x042230a5 // and z5.d, z5.d, z2.d                        
    WORD $0x042230e7 // and z7.d, z7.d, z2.d                        
    WORD $0x04223108 // and z8.d, z8.d, z2.d                        
    WORD $0x85815043 // ldr z3, [x2, #12, MUL VL]                   
    WORD $0x85815444 // ldr z4, [x2, #13, MUL VL]                   
    WORD $0x05253065 // tbl z5.b, z3.b, z5.b                        
    WORD $0x05263063 // tbl z3.b, z3.b, z6.b                        
    WORD $0x05283086 // tbl z6.b, z4.b, z8.b                        
    WORD $0x05273084 // tbl z4.b, z4.b, z7.b                        
    WORD $0x04a33000 // eor z0.d, z0.d, z3.d                        
    WORD $0x04a43000 // eor z0.d, z0.d, z4.d                        
    WORD $0x04a53021 // eor z1.d, z1.d, z5.d                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    // Check for early termination
    CMP    $7, R16
    BEQ    mulSve_10x1_64Xor_store

    // Load and process 64 bytes from input 7 to 1 outputs
    WORD $0x85804186 // ldr z6, [x12]                               
    WORD $0x85804585 // ldr z5, [x12, #1, MUL VL]                   
    WORD $0x042c504c // addvl x12, x12, #2
    WORD $0x04fc94c7 // lsr z7.d, z6.d, #4                          
    WORD $0x04fc94a8 // lsr z8.d, z5.d, #4                          
    WORD $0x042230c6 // and z6.d, z6.d, z2.d                        
    WORD $0x042230a5 // and z5.d, z5.d, z2.d                        
    WORD $0x042230e7 // and z7.d, z7.d, z2.d                        
    WORD $0x04223108 // and z8.d, z8.d, z2.d                        
    WORD $0x85815843 // ldr z3, [x2, #14, MUL VL]                   
    WORD $0x85815c44 // ldr z4, [x2, #15, MUL VL]                   
    WORD $0x05253065 // tbl z5.b, z3.b, z5.b                        
    WORD $0x05263063 // tbl z3.b, z3.b, z6.b                        
    WORD $0x05283086 // tbl z6.b, z4.b, z8.b                        
    WORD $0x05273084 // tbl z4.b, z4.b, z7.b                        
    WORD $0x04a33000 // eor z0.d, z0.d, z3.d                        
    WORD $0x04a43000 // eor z0.d, z0.d, z4.d                        
    WORD $0x04a53021 // eor z1.d, z1.d, z5.d                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    // Check for early termination
    CMP    $8, R16
    BEQ    mulSve_10x1_64Xor_store

    // Load and process 64 bytes from input 8 to 1 outputs
    WORD $0x858041a6 // ldr z6, [x13]                               
    WORD $0x858045a5 // ldr z5, [x13, #1, MUL VL]                   
    WORD $0x042d504d // addvl x13, x13, #2
    WORD $0x04fc94c7 // lsr z7.d, z6.d, #4                          
    WORD $0x04fc94a8 // lsr z8.d, z5.d, #4                          
    WORD $0x042230c6 // and z6.d, z6.d, z2.d                        
    WORD $0x042230a5 // and z5.d, z5.d, z2.d                        
    WORD $0x042230e7 // and z7.d, z7.d, z2.d                        
    WORD $0x04223108 // and z8.d, z8.d, z2.d                        
    WORD $0x85824043 // ldr z3, [x2, #16, MUL VL]                   
    WORD $0x85824444 // ldr z4, [x2, #17, MUL VL]                   
    WORD $0x05253065 // tbl z5.b, z3.b, z5.b                        
    WORD $0x05263063 // tbl z3.b, z3.b, z6.b                        
    WORD $0x05283086 // tbl z6.b, z4.b, z8.b                        
    WORD $0x05273084 // tbl z4.b, z4.b, z7.b                        
    WORD $0x04a33000 // eor z0.d, z0.d, z3.d                        
    WORD $0x04a43000 // eor z0.d, z0.d, z4.d                        
    WORD $0x04a53021 // eor z1.d, z1.d, z5.d                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    // Check for early termination
    CMP    $9, R16
    BEQ    mulSve_10x1_64Xor_store

    // Load and process 64 bytes from input 9 to 1 outputs
    WORD $0x85804066 // ldr z6, [x3]                                
    WORD $0x85804465 // ldr z5, [x3, #1, MUL VL]                    
    WORD $0x04235043 // addvl x3, x3, #2
    WORD $0x04fc94c7 // lsr z7.d, z6.d, #4                          
    WORD $0x04fc94a8 // lsr z8.d, z5.d, #4                          
    WORD $0x042230c6 // and z6.d, z6.d, z2.d                        
    WORD $0x042230a5 // and z5.d, z5.d, z2.d                        
    WORD $0x042230e7 // and z7.d, z7.d, z2.d                        
    WORD $0x04223108 // and z8.d, z8.d, z2.d                        
    WORD $0x85824843 // ldr z3, [x2, #18, MUL VL]                   
    WORD $0x85824c44 // ldr z4, [x2, #19, MUL VL]                   
    WORD $0x05253065 // tbl z5.b, z3.b, z5.b                        
    WORD $0x05263063 // tbl z3.b, z3.b, z6.b                        
    WORD $0x05283086 // tbl z6.b, z4.b, z8.b                        
    WORD $0x05273084 // tbl z4.b, z4.b, z7.b                        
    WORD $0x04a33000 // eor z0.d, z0.d, z3.d                        
    WORD $0x04a43000 // eor z0.d, z0.d, z4.d                        
    WORD $0x04a53021 // eor z1.d, z1.d, z5.d                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        

mulSve_10x1_64Xor_store:
    // Store 1 outputs
    WORD $0xe58041c0 // str z0, [x14]                               
    WORD $0xe58045c1 // str z1, [x14, #1, MUL VL]                   
    WORD $0x042e504e // addvl x14, x14, #2

    // Prepare for next loop
    WORD $0xf1000400 // subs x0, x0, #1                             
    BNE  mulSve_10x1_64Xor_loop

mulSve_10x1_64Xor_end:
    RET

// func mulSve_10x2_64(matrix []byte, in [][]byte, out [][]byte, start int, n int)
// Requires: SVE
TEXT Â·mulSve_10x2_64(SB), $8-88
    // Loading no tables to registers
    // Destination kept in GP registers
    // Full registers estimated 89 YMM used
    MOVD n+80(FP), R0
    MOVD matrix_base+0(FP), R2
    WORD $0xd346fc00 // lsr x0, x0, #6                              
    WORD $0xd37ae400 // lsl x0, x0, #6
    WORD $0x04bf5050 // rdvl x16, #2
    WORD $0x9ad00800 // udiv x0, x0, x16
    WORD $0xea00001f // tst x0, x0                                  
    BEQ    mulSve_10x2_64_end
    MOVD in_base+24(FP), R3
    MOVD (R3), R1
    MOVD 24(R3), R4
    MOVD 48(R3), R5
    MOVD 72(R3), R8
    MOVD 96(R3), R9
    MOVD 120(R3), R10
    MOVD 144(R3), R11
    MOVD 168(R3), R12
    MOVD 192(R3), R13
    MOVD 216(R3), R3
    MOVD out_base+48(FP), R14
    MOVD (R14), R15
    MOVD 24(R14), R14
    MOVD start+72(FP), R6

    // Add start offset to output
    WORD $0x8b0601ef // add x15, x15, x6                            
    WORD $0x8b0601ce // add x14, x14, x6                            

    // Add start offset to input
    WORD $0x8b060021 // add x1, x1, x6                              
    WORD $0x8b060084 // add x4, x4, x6                              
    WORD $0x8b0600a5 // add x5, x5, x6                              
    WORD $0x8b060108 // add x8, x8, x6                              
    WORD $0x8b060129 // add x9, x9, x6                              
    WORD $0x8b06014a // add x10, x10, x6                            
    WORD $0x8b06016b // add x11, x11, x6                            
    WORD $0x8b06018c // add x12, x12, x6                            
    WORD $0x8b0601ad // add x13, x13, x6                            
    WORD $0x8b060063 // add x3, x3, x6                              
    WORD $0xd28001e6 // mov x6, #15                                 
    WORD $0x05e038c4 // mov z4.d, x6                                
    WORD $0x05212084 // dup z4.b, z4.b[0]                           

    // Load number of input shards
    MOVD   in_len+32(FP), R16

mulSve_10x2_64_loop:
    // Load and process 64 bytes from input 0 to 2 outputs
    WORD $0x85804029 // ldr z9, [x1]                                
    WORD $0x8580442b // ldr z11, [x1, #1, MUL VL]                   
    WORD $0x04215041 // addvl x1, x1, #2
    WORD $0x04fc952a // lsr z10.d, z9.d, #4                         
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x04243129 // and z9.d, z9.d, z4.d                        
    WORD $0x0424316b // and z11.d, z11.d, z4.d                      
    WORD $0x0424314a // and z10.d, z10.d, z4.d                      
    WORD $0x0424318c // and z12.d, z12.d, z4.d                      
    WORD $0x85804045 // ldr z5, [x2]                                
    WORD $0x85804446 // ldr z6, [x2, #1, MUL VL]                    
    WORD $0x052b30a7 // tbl z7.b, z5.b, z11.b                       
    WORD $0x052930a5 // tbl z5.b, z5.b, z9.b                        
    WORD $0x052c30c8 // tbl z8.b, z6.b, z12.b                       
    WORD $0x052a30c6 // tbl z6.b, z6.b, z10.b                       
    WORD $0x04a530c0 // eor z0.d, z6.d, z5.d                        
    WORD $0x04a73101 // eor z1.d, z8.d, z7.d                        
    WORD $0x85804845 // ldr z5, [x2, #2, MUL VL]                    
    WORD $0x85804c46 // ldr z6, [x2, #3, MUL VL]                    
    WORD $0x052b30a7 // tbl z7.b, z5.b, z11.b                       
    WORD $0x052930a5 // tbl z5.b, z5.b, z9.b                        
    WORD $0x052c30c8 // tbl z8.b, z6.b, z12.b                       
    WORD $0x052a30c6 // tbl z6.b, z6.b, z10.b                       
    WORD $0x04a530c2 // eor z2.d, z6.d, z5.d                        
    WORD $0x04a73103 // eor z3.d, z8.d, z7.d                        
    // Check for early termination
    CMP    $1, R16
    BEQ    mulSve_10x2_64_store

    // Load and process 64 bytes from input 1 to 2 outputs
    WORD $0x85804089 // ldr z9, [x4]                                
    WORD $0x8580448b // ldr z11, [x4, #1, MUL VL]                   
    WORD $0x04245044 // addvl x4, x4, #2
    WORD $0x04fc952a // lsr z10.d, z9.d, #4                         
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x04243129 // and z9.d, z9.d, z4.d                        
    WORD $0x0424316b // and z11.d, z11.d, z4.d                      
    WORD $0x0424314a // and z10.d, z10.d, z4.d                      
    WORD $0x0424318c // and z12.d, z12.d, z4.d                      
    WORD $0x85805045 // ldr z5, [x2, #4, MUL VL]                    
    WORD $0x85805446 // ldr z6, [x2, #5, MUL VL]                    
    WORD $0x052b30a7 // tbl z7.b, z5.b, z11.b                       
    WORD $0x052930a5 // tbl z5.b, z5.b, z9.b                        
    WORD $0x052c30c8 // tbl z8.b, z6.b, z12.b                       
    WORD $0x052a30c6 // tbl z6.b, z6.b, z10.b                       
    WORD $0x04a53000 // eor z0.d, z0.d, z5.d                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x85805845 // ldr z5, [x2, #6, MUL VL]                    
    WORD $0x85805c46 // ldr z6, [x2, #7, MUL VL]                    
    WORD $0x052b30a7 // tbl z7.b, z5.b, z11.b                       
    WORD $0x052930a5 // tbl z5.b, z5.b, z9.b                        
    WORD $0x052c30c8 // tbl z8.b, z6.b, z12.b                       
    WORD $0x052a30c6 // tbl z6.b, z6.b, z10.b                       
    WORD $0x04a53042 // eor z2.d, z2.d, z5.d                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    // Check for early termination
    CMP    $2, R16
    BEQ    mulSve_10x2_64_store

    // Load and process 64 bytes from input 2 to 2 outputs
    WORD $0x858040a9 // ldr z9, [x5]                                
    WORD $0x858044ab // ldr z11, [x5, #1, MUL VL]                   
    WORD $0x04255045 // addvl x5, x5, #2
    WORD $0x04fc952a // lsr z10.d, z9.d, #4                         
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x04243129 // and z9.d, z9.d, z4.d                        
    WORD $0x0424316b // and z11.d, z11.d, z4.d                      
    WORD $0x0424314a // and z10.d, z10.d, z4.d                      
    WORD $0x0424318c // and z12.d, z12.d, z4.d                      
    WORD $0x85814045 // ldr z5, [x2, #8, MUL VL]                    
    WORD $0x85814446 // ldr z6, [x2, #9, MUL VL]                    
    WORD $0x052b30a7 // tbl z7.b, z5.b, z11.b                       
    WORD $0x052930a5 // tbl z5.b, z5.b, z9.b                        
    WORD $0x052c30c8 // tbl z8.b, z6.b, z12.b                       
    WORD $0x052a30c6 // tbl z6.b, z6.b, z10.b                       
    WORD $0x04a53000 // eor z0.d, z0.d, z5.d                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x85814845 // ldr z5, [x2, #10, MUL VL]                   
    WORD $0x85814c46 // ldr z6, [x2, #11, MUL VL]                   
    WORD $0x052b30a7 // tbl z7.b, z5.b, z11.b                       
    WORD $0x052930a5 // tbl z5.b, z5.b, z9.b                        
    WORD $0x052c30c8 // tbl z8.b, z6.b, z12.b                       
    WORD $0x052a30c6 // tbl z6.b, z6.b, z10.b                       
    WORD $0x04a53042 // eor z2.d, z2.d, z5.d                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    // Check for early termination
    CMP    $3, R16
    BEQ    mulSve_10x2_64_store

    // Load and process 64 bytes from input 3 to 2 outputs
    WORD $0x85804109 // ldr z9, [x8]                                
    WORD $0x8580450b // ldr z11, [x8, #1, MUL VL]                   
    WORD $0x04285048 // addvl x8, x8, #2
    WORD $0x04fc952a // lsr z10.d, z9.d, #4                         
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x04243129 // and z9.d, z9.d, z4.d                        
    WORD $0x0424316b // and z11.d, z11.d, z4.d                      
    WORD $0x0424314a // and z10.d, z10.d, z4.d                      
    WORD $0x0424318c // and z12.d, z12.d, z4.d                      
    WORD $0x85815045 // ldr z5, [x2, #12, MUL VL]                   
    WORD $0x85815446 // ldr z6, [x2, #13, MUL VL]                   
    WORD $0x052b30a7 // tbl z7.b, z5.b, z11.b                       
    WORD $0x052930a5 // tbl z5.b, z5.b, z9.b                        
    WORD $0x052c30c8 // tbl z8.b, z6.b, z12.b                       
    WORD $0x052a30c6 // tbl z6.b, z6.b, z10.b                       
    WORD $0x04a53000 // eor z0.d, z0.d, z5.d                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x85815845 // ldr z5, [x2, #14, MUL VL]                   
    WORD $0x85815c46 // ldr z6, [x2, #15, MUL VL]                   
    WORD $0x052b30a7 // tbl z7.b, z5.b, z11.b                       
    WORD $0x052930a5 // tbl z5.b, z5.b, z9.b                        
    WORD $0x052c30c8 // tbl z8.b, z6.b, z12.b                       
    WORD $0x052a30c6 // tbl z6.b, z6.b, z10.b                       
    WORD $0x04a53042 // eor z2.d, z2.d, z5.d                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    // Check for early termination
    CMP    $4, R16
    BEQ    mulSve_10x2_64_store

    // Load and process 64 bytes from input 4 to 2 outputs
    WORD $0x85804129 // ldr z9, [x9]                                
    WORD $0x8580452b // ldr z11, [x9, #1, MUL VL]                   
    WORD $0x04295049 // addvl x9, x9, #2
    WORD $0x04fc952a // lsr z10.d, z9.d, #4                         
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x04243129 // and z9.d, z9.d, z4.d                        
    WORD $0x0424316b // and z11.d, z11.d, z4.d                      
    WORD $0x0424314a // and z10.d, z10.d, z4.d                      
    WORD $0x0424318c // and z12.d, z12.d, z4.d                      
    WORD $0x85824045 // ldr z5, [x2, #16, MUL VL]                   
    WORD $0x85824446 // ldr z6, [x2, #17, MUL VL]                   
    WORD $0x052b30a7 // tbl z7.b, z5.b, z11.b                       
    WORD $0x052930a5 // tbl z5.b, z5.b, z9.b                        
    WORD $0x052c30c8 // tbl z8.b, z6.b, z12.b                       
    WORD $0x052a30c6 // tbl z6.b, z6.b, z10.b                       
    WORD $0x04a53000 // eor z0.d, z0.d, z5.d                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x85824845 // ldr z5, [x2, #18, MUL VL]                   
    WORD $0x85824c46 // ldr z6, [x2, #19, MUL VL]                   
    WORD $0x052b30a7 // tbl z7.b, z5.b, z11.b                       
    WORD $0x052930a5 // tbl z5.b, z5.b, z9.b                        
    WORD $0x052c30c8 // tbl z8.b, z6.b, z12.b                       
    WORD $0x052a30c6 // tbl z6.b, z6.b, z10.b                       
    WORD $0x04a53042 // eor z2.d, z2.d, z5.d                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    // Check for early termination
    CMP    $5, R16
    BEQ    mulSve_10x2_64_store

    // Load and process 64 bytes from input 5 to 2 outputs
    WORD $0x85804149 // ldr z9, [x10]                               
    WORD $0x8580454b // ldr z11, [x10, #1, MUL VL]                  
    WORD $0x042a504a // addvl x10, x10, #2
    WORD $0x04fc952a // lsr z10.d, z9.d, #4                         
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x04243129 // and z9.d, z9.d, z4.d                        
    WORD $0x0424316b // and z11.d, z11.d, z4.d                      
    WORD $0x0424314a // and z10.d, z10.d, z4.d                      
    WORD $0x0424318c // and z12.d, z12.d, z4.d                      
    WORD $0x85825045 // ldr z5, [x2, #20, MUL VL]                   
    WORD $0x85825446 // ldr z6, [x2, #21, MUL VL]                   
    WORD $0x052b30a7 // tbl z7.b, z5.b, z11.b                       
    WORD $0x052930a5 // tbl z5.b, z5.b, z9.b                        
    WORD $0x052c30c8 // tbl z8.b, z6.b, z12.b                       
    WORD $0x052a30c6 // tbl z6.b, z6.b, z10.b                       
    WORD $0x04a53000 // eor z0.d, z0.d, z5.d                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x85825845 // ldr z5, [x2, #22, MUL VL]                   
    WORD $0x85825c46 // ldr z6, [x2, #23, MUL VL]                   
    WORD $0x052b30a7 // tbl z7.b, z5.b, z11.b                       
    WORD $0x052930a5 // tbl z5.b, z5.b, z9.b                        
    WORD $0x052c30c8 // tbl z8.b, z6.b, z12.b                       
    WORD $0x052a30c6 // tbl z6.b, z6.b, z10.b                       
    WORD $0x04a53042 // eor z2.d, z2.d, z5.d                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    // Check for early termination
    CMP    $6, R16
    BEQ    mulSve_10x2_64_store

    // Load and process 64 bytes from input 6 to 2 outputs
    WORD $0x85804169 // ldr z9, [x11]                               
    WORD $0x8580456b // ldr z11, [x11, #1, MUL VL]                  
    WORD $0x042b504b // addvl x11, x11, #2
    WORD $0x04fc952a // lsr z10.d, z9.d, #4                         
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x04243129 // and z9.d, z9.d, z4.d                        
    WORD $0x0424316b // and z11.d, z11.d, z4.d                      
    WORD $0x0424314a // and z10.d, z10.d, z4.d                      
    WORD $0x0424318c // and z12.d, z12.d, z4.d                      
    WORD $0x85834045 // ldr z5, [x2, #24, MUL VL]                   
    WORD $0x85834446 // ldr z6, [x2, #25, MUL VL]                   
    WORD $0x052b30a7 // tbl z7.b, z5.b, z11.b                       
    WORD $0x052930a5 // tbl z5.b, z5.b, z9.b                        
    WORD $0x052c30c8 // tbl z8.b, z6.b, z12.b                       
    WORD $0x052a30c6 // tbl z6.b, z6.b, z10.b                       
    WORD $0x04a53000 // eor z0.d, z0.d, z5.d                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x85834845 // ldr z5, [x2, #26, MUL VL]                   
    WORD $0x85834c46 // ldr z6, [x2, #27, MUL VL]                   
    WORD $0x052b30a7 // tbl z7.b, z5.b, z11.b                       
    WORD $0x052930a5 // tbl z5.b, z5.b, z9.b                        
    WORD $0x052c30c8 // tbl z8.b, z6.b, z12.b                       
    WORD $0x052a30c6 // tbl z6.b, z6.b, z10.b                       
    WORD $0x04a53042 // eor z2.d, z2.d, z5.d                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    // Check for early termination
    CMP    $7, R16
    BEQ    mulSve_10x2_64_store

    // Load and process 64 bytes from input 7 to 2 outputs
    WORD $0x85804189 // ldr z9, [x12]                               
    WORD $0x8580458b // ldr z11, [x12, #1, MUL VL]                  
    WORD $0x042c504c // addvl x12, x12, #2
    WORD $0x04fc952a // lsr z10.d, z9.d, #4                         
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x04243129 // and z9.d, z9.d, z4.d                        
    WORD $0x0424316b // and z11.d, z11.d, z4.d                      
    WORD $0x0424314a // and z10.d, z10.d, z4.d                      
    WORD $0x0424318c // and z12.d, z12.d, z4.d                      
    WORD $0x85835045 // ldr z5, [x2, #28, MUL VL]                   
    WORD $0x85835446 // ldr z6, [x2, #29, MUL VL]                   
    WORD $0x052b30a7 // tbl z7.b, z5.b, z11.b                       
    WORD $0x052930a5 // tbl z5.b, z5.b, z9.b                        
    WORD $0x052c30c8 // tbl z8.b, z6.b, z12.b                       
    WORD $0x052a30c6 // tbl z6.b, z6.b, z10.b                       
    WORD $0x04a53000 // eor z0.d, z0.d, z5.d                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x85835845 // ldr z5, [x2, #30, MUL VL]                   
    WORD $0x85835c46 // ldr z6, [x2, #31, MUL VL]                   
    WORD $0x052b30a7 // tbl z7.b, z5.b, z11.b                       
    WORD $0x052930a5 // tbl z5.b, z5.b, z9.b                        
    WORD $0x052c30c8 // tbl z8.b, z6.b, z12.b                       
    WORD $0x052a30c6 // tbl z6.b, z6.b, z10.b                       
    WORD $0x04a53042 // eor z2.d, z2.d, z5.d                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    // Check for early termination
    CMP    $8, R16
    BEQ    mulSve_10x2_64_store

    // Load and process 64 bytes from input 8 to 2 outputs
    WORD $0x858041a9 // ldr z9, [x13]                               
    WORD $0x858045ab // ldr z11, [x13, #1, MUL VL]                  
    WORD $0x042d504d // addvl x13, x13, #2
    WORD $0x04fc952a // lsr z10.d, z9.d, #4                         
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x04243129 // and z9.d, z9.d, z4.d                        
    WORD $0x0424316b // and z11.d, z11.d, z4.d                      
    WORD $0x0424314a // and z10.d, z10.d, z4.d                      
    WORD $0x0424318c // and z12.d, z12.d, z4.d                      
    WORD $0x85844045 // ldr z5, [x2, #32, MUL VL]                   
    WORD $0x85844446 // ldr z6, [x2, #33, MUL VL]                   
    WORD $0x052b30a7 // tbl z7.b, z5.b, z11.b                       
    WORD $0x052930a5 // tbl z5.b, z5.b, z9.b                        
    WORD $0x052c30c8 // tbl z8.b, z6.b, z12.b                       
    WORD $0x052a30c6 // tbl z6.b, z6.b, z10.b                       
    WORD $0x04a53000 // eor z0.d, z0.d, z5.d                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x85844845 // ldr z5, [x2, #34, MUL VL]                   
    WORD $0x85844c46 // ldr z6, [x2, #35, MUL VL]                   
    WORD $0x052b30a7 // tbl z7.b, z5.b, z11.b                       
    WORD $0x052930a5 // tbl z5.b, z5.b, z9.b                        
    WORD $0x052c30c8 // tbl z8.b, z6.b, z12.b                       
    WORD $0x052a30c6 // tbl z6.b, z6.b, z10.b                       
    WORD $0x04a53042 // eor z2.d, z2.d, z5.d                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    // Check for early termination
    CMP    $9, R16
    BEQ    mulSve_10x2_64_store

    // Load and process 64 bytes from input 9 to 2 outputs
    WORD $0x85804069 // ldr z9, [x3]                                
    WORD $0x8580446b // ldr z11, [x3, #1, MUL VL]                   
    WORD $0x04235043 // addvl x3, x3, #2
    WORD $0x04fc952a // lsr z10.d, z9.d, #4                         
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x04243129 // and z9.d, z9.d, z4.d                        
    WORD $0x0424316b // and z11.d, z11.d, z4.d                      
    WORD $0x0424314a // and z10.d, z10.d, z4.d                      
    WORD $0x0424318c // and z12.d, z12.d, z4.d                      
    WORD $0x85845045 // ldr z5, [x2, #36, MUL VL]                   
    WORD $0x85845446 // ldr z6, [x2, #37, MUL VL]                   
    WORD $0x052b30a7 // tbl z7.b, z5.b, z11.b                       
    WORD $0x052930a5 // tbl z5.b, z5.b, z9.b                        
    WORD $0x052c30c8 // tbl z8.b, z6.b, z12.b                       
    WORD $0x052a30c6 // tbl z6.b, z6.b, z10.b                       
    WORD $0x04a53000 // eor z0.d, z0.d, z5.d                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x85845845 // ldr z5, [x2, #38, MUL VL]                   
    WORD $0x85845c46 // ldr z6, [x2, #39, MUL VL]                   
    WORD $0x052b30a7 // tbl z7.b, z5.b, z11.b                       
    WORD $0x052930a5 // tbl z5.b, z5.b, z9.b                        
    WORD $0x052c30c8 // tbl z8.b, z6.b, z12.b                       
    WORD $0x052a30c6 // tbl z6.b, z6.b, z10.b                       
    WORD $0x04a53042 // eor z2.d, z2.d, z5.d                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        

mulSve_10x2_64_store:
    // Store 2 outputs
    WORD $0xe58041e0 // str z0, [x15]                               
    WORD $0xe58045e1 // str z1, [x15, #1, MUL VL]                   
    WORD $0x042f504f // addvl x15, x15, #2
    WORD $0xe58041c2 // str z2, [x14]                               
    WORD $0xe58045c3 // str z3, [x14, #1, MUL VL]                   
    WORD $0x042e504e // addvl x14, x14, #2

    // Prepare for next loop
    WORD $0xf1000400 // subs x0, x0, #1                             
    BNE  mulSve_10x2_64_loop

mulSve_10x2_64_end:
    RET

// func mulSve_10x2_64Xor(matrix []byte, in [][]byte, out [][]byte, start int, n int)
// Requires: SVE
TEXT Â·mulSve_10x2_64Xor(SB), $8-88
    // Loading no tables to registers
    // Destination kept in GP registers
    // Full registers estimated 89 YMM used
    MOVD n+80(FP), R0
    MOVD matrix_base+0(FP), R2
    WORD $0xd346fc00 // lsr x0, x0, #6                              
    WORD $0xd37ae400 // lsl x0, x0, #6
    WORD $0x04bf5050 // rdvl x16, #2
    WORD $0x9ad00800 // udiv x0, x0, x16
    WORD $0xea00001f // tst x0, x0                                  
    BEQ    mulSve_10x2_64Xor_end
    MOVD in_base+24(FP), R3
    MOVD (R3), R1
    MOVD 24(R3), R4
    MOVD 48(R3), R5
    MOVD 72(R3), R8
    MOVD 96(R3), R9
    MOVD 120(R3), R10
    MOVD 144(R3), R11
    MOVD 168(R3), R12
    MOVD 192(R3), R13
    MOVD 216(R3), R3
    MOVD out_base+48(FP), R14
    MOVD (R14), R15
    MOVD 24(R14), R14
    MOVD start+72(FP), R6

    // Add start offset to output
    WORD $0x8b0601ef // add x15, x15, x6                            
    WORD $0x8b0601ce // add x14, x14, x6                            

    // Add start offset to input
    WORD $0x8b060021 // add x1, x1, x6                              
    WORD $0x8b060084 // add x4, x4, x6                              
    WORD $0x8b0600a5 // add x5, x5, x6                              
    WORD $0x8b060108 // add x8, x8, x6                              
    WORD $0x8b060129 // add x9, x9, x6                              
    WORD $0x8b06014a // add x10, x10, x6                            
    WORD $0x8b06016b // add x11, x11, x6                            
    WORD $0x8b06018c // add x12, x12, x6                            
    WORD $0x8b0601ad // add x13, x13, x6                            
    WORD $0x8b060063 // add x3, x3, x6                              
    WORD $0xd28001e6 // mov x6, #15                                 
    WORD $0x05e038c4 // mov z4.d, x6                                
    WORD $0x05212084 // dup z4.b, z4.b[0]                           

    // Load number of input shards
    MOVD   in_len+32(FP), R16

mulSve_10x2_64Xor_loop:
    // Load 2 outputs
    WORD $0x858041e0 // ldr z0, [x15]                               
    WORD $0x858045e1 // ldr z1, [x15, #1, MUL VL]                   
    WORD $0x858041c2 // ldr z2, [x14]                               
    WORD $0x858045c3 // ldr z3, [x14, #1, MUL VL]                   

    // Load and process 64 bytes from input 0 to 2 outputs
    WORD $0x85804029 // ldr z9, [x1]                                
    WORD $0x8580442b // ldr z11, [x1, #1, MUL VL]                   
    WORD $0x04215041 // addvl x1, x1, #2
    WORD $0x04fc952a // lsr z10.d, z9.d, #4                         
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x04243129 // and z9.d, z9.d, z4.d                        
    WORD $0x0424316b // and z11.d, z11.d, z4.d                      
    WORD $0x0424314a // and z10.d, z10.d, z4.d                      
    WORD $0x0424318c // and z12.d, z12.d, z4.d                      
    WORD $0x85804045 // ldr z5, [x2]                                
    WORD $0x85804446 // ldr z6, [x2, #1, MUL VL]                    
    WORD $0x052b30a7 // tbl z7.b, z5.b, z11.b                       
    WORD $0x052930a5 // tbl z5.b, z5.b, z9.b                        
    WORD $0x052c30c8 // tbl z8.b, z6.b, z12.b                       
    WORD $0x052a30c6 // tbl z6.b, z6.b, z10.b                       
    WORD $0x04a53000 // eor z0.d, z0.d, z5.d                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x85804845 // ldr z5, [x2, #2, MUL VL]                    
    WORD $0x85804c46 // ldr z6, [x2, #3, MUL VL]                    
    WORD $0x052b30a7 // tbl z7.b, z5.b, z11.b                       
    WORD $0x052930a5 // tbl z5.b, z5.b, z9.b                        
    WORD $0x052c30c8 // tbl z8.b, z6.b, z12.b                       
    WORD $0x052a30c6 // tbl z6.b, z6.b, z10.b                       
    WORD $0x04a53042 // eor z2.d, z2.d, z5.d                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    // Check for early termination
    CMP    $1, R16
    BEQ    mulSve_10x2_64Xor_store

    // Load and process 64 bytes from input 1 to 2 outputs
    WORD $0x85804089 // ldr z9, [x4]                                
    WORD $0x8580448b // ldr z11, [x4, #1, MUL VL]                   
    WORD $0x04245044 // addvl x4, x4, #2
    WORD $0x04fc952a // lsr z10.d, z9.d, #4                         
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x04243129 // and z9.d, z9.d, z4.d                        
    WORD $0x0424316b // and z11.d, z11.d, z4.d                      
    WORD $0x0424314a // and z10.d, z10.d, z4.d                      
    WORD $0x0424318c // and z12.d, z12.d, z4.d                      
    WORD $0x85805045 // ldr z5, [x2, #4, MUL VL]                    
    WORD $0x85805446 // ldr z6, [x2, #5, MUL VL]                    
    WORD $0x052b30a7 // tbl z7.b, z5.b, z11.b                       
    WORD $0x052930a5 // tbl z5.b, z5.b, z9.b                        
    WORD $0x052c30c8 // tbl z8.b, z6.b, z12.b                       
    WORD $0x052a30c6 // tbl z6.b, z6.b, z10.b                       
    WORD $0x04a53000 // eor z0.d, z0.d, z5.d                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x85805845 // ldr z5, [x2, #6, MUL VL]                    
    WORD $0x85805c46 // ldr z6, [x2, #7, MUL VL]                    
    WORD $0x052b30a7 // tbl z7.b, z5.b, z11.b                       
    WORD $0x052930a5 // tbl z5.b, z5.b, z9.b                        
    WORD $0x052c30c8 // tbl z8.b, z6.b, z12.b                       
    WORD $0x052a30c6 // tbl z6.b, z6.b, z10.b                       
    WORD $0x04a53042 // eor z2.d, z2.d, z5.d                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    // Check for early termination
    CMP    $2, R16
    BEQ    mulSve_10x2_64Xor_store

    // Load and process 64 bytes from input 2 to 2 outputs
    WORD $0x858040a9 // ldr z9, [x5]                                
    WORD $0x858044ab // ldr z11, [x5, #1, MUL VL]                   
    WORD $0x04255045 // addvl x5, x5, #2
    WORD $0x04fc952a // lsr z10.d, z9.d, #4                         
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x04243129 // and z9.d, z9.d, z4.d                        
    WORD $0x0424316b // and z11.d, z11.d, z4.d                      
    WORD $0x0424314a // and z10.d, z10.d, z4.d                      
    WORD $0x0424318c // and z12.d, z12.d, z4.d                      
    WORD $0x85814045 // ldr z5, [x2, #8, MUL VL]                    
    WORD $0x85814446 // ldr z6, [x2, #9, MUL VL]                    
    WORD $0x052b30a7 // tbl z7.b, z5.b, z11.b                       
    WORD $0x052930a5 // tbl z5.b, z5.b, z9.b                        
    WORD $0x052c30c8 // tbl z8.b, z6.b, z12.b                       
    WORD $0x052a30c6 // tbl z6.b, z6.b, z10.b                       
    WORD $0x04a53000 // eor z0.d, z0.d, z5.d                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x85814845 // ldr z5, [x2, #10, MUL VL]                   
    WORD $0x85814c46 // ldr z6, [x2, #11, MUL VL]                   
    WORD $0x052b30a7 // tbl z7.b, z5.b, z11.b                       
    WORD $0x052930a5 // tbl z5.b, z5.b, z9.b                        
    WORD $0x052c30c8 // tbl z8.b, z6.b, z12.b                       
    WORD $0x052a30c6 // tbl z6.b, z6.b, z10.b                       
    WORD $0x04a53042 // eor z2.d, z2.d, z5.d                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    // Check for early termination
    CMP    $3, R16
    BEQ    mulSve_10x2_64Xor_store

    // Load and process 64 bytes from input 3 to 2 outputs
    WORD $0x85804109 // ldr z9, [x8]                                
    WORD $0x8580450b // ldr z11, [x8, #1, MUL VL]                   
    WORD $0x04285048 // addvl x8, x8, #2
    WORD $0x04fc952a // lsr z10.d, z9.d, #4                         
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x04243129 // and z9.d, z9.d, z4.d                        
    WORD $0x0424316b // and z11.d, z11.d, z4.d                      
    WORD $0x0424314a // and z10.d, z10.d, z4.d                      
    WORD $0x0424318c // and z12.d, z12.d, z4.d                      
    WORD $0x85815045 // ldr z5, [x2, #12, MUL VL]                   
    WORD $0x85815446 // ldr z6, [x2, #13, MUL VL]                   
    WORD $0x052b30a7 // tbl z7.b, z5.b, z11.b                       
    WORD $0x052930a5 // tbl z5.b, z5.b, z9.b                        
    WORD $0x052c30c8 // tbl z8.b, z6.b, z12.b                       
    WORD $0x052a30c6 // tbl z6.b, z6.b, z10.b                       
    WORD $0x04a53000 // eor z0.d, z0.d, z5.d                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x85815845 // ldr z5, [x2, #14, MUL VL]                   
    WORD $0x85815c46 // ldr z6, [x2, #15, MUL VL]                   
    WORD $0x052b30a7 // tbl z7.b, z5.b, z11.b                       
    WORD $0x052930a5 // tbl z5.b, z5.b, z9.b                        
    WORD $0x052c30c8 // tbl z8.b, z6.b, z12.b                       
    WORD $0x052a30c6 // tbl z6.b, z6.b, z10.b                       
    WORD $0x04a53042 // eor z2.d, z2.d, z5.d                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    // Check for early termination
    CMP    $4, R16
    BEQ    mulSve_10x2_64Xor_store

    // Load and process 64 bytes from input 4 to 2 outputs
    WORD $0x85804129 // ldr z9, [x9]                                
    WORD $0x8580452b // ldr z11, [x9, #1, MUL VL]                   
    WORD $0x04295049 // addvl x9, x9, #2
    WORD $0x04fc952a // lsr z10.d, z9.d, #4                         
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x04243129 // and z9.d, z9.d, z4.d                        
    WORD $0x0424316b // and z11.d, z11.d, z4.d                      
    WORD $0x0424314a // and z10.d, z10.d, z4.d                      
    WORD $0x0424318c // and z12.d, z12.d, z4.d                      
    WORD $0x85824045 // ldr z5, [x2, #16, MUL VL]                   
    WORD $0x85824446 // ldr z6, [x2, #17, MUL VL]                   
    WORD $0x052b30a7 // tbl z7.b, z5.b, z11.b                       
    WORD $0x052930a5 // tbl z5.b, z5.b, z9.b                        
    WORD $0x052c30c8 // tbl z8.b, z6.b, z12.b                       
    WORD $0x052a30c6 // tbl z6.b, z6.b, z10.b                       
    WORD $0x04a53000 // eor z0.d, z0.d, z5.d                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x85824845 // ldr z5, [x2, #18, MUL VL]                   
    WORD $0x85824c46 // ldr z6, [x2, #19, MUL VL]                   
    WORD $0x052b30a7 // tbl z7.b, z5.b, z11.b                       
    WORD $0x052930a5 // tbl z5.b, z5.b, z9.b                        
    WORD $0x052c30c8 // tbl z8.b, z6.b, z12.b                       
    WORD $0x052a30c6 // tbl z6.b, z6.b, z10.b                       
    WORD $0x04a53042 // eor z2.d, z2.d, z5.d                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    // Check for early termination
    CMP    $5, R16
    BEQ    mulSve_10x2_64Xor_store

    // Load and process 64 bytes from input 5 to 2 outputs
    WORD $0x85804149 // ldr z9, [x10]                               
    WORD $0x8580454b // ldr z11, [x10, #1, MUL VL]                  
    WORD $0x042a504a // addvl x10, x10, #2
    WORD $0x04fc952a // lsr z10.d, z9.d, #4                         
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x04243129 // and z9.d, z9.d, z4.d                        
    WORD $0x0424316b // and z11.d, z11.d, z4.d                      
    WORD $0x0424314a // and z10.d, z10.d, z4.d                      
    WORD $0x0424318c // and z12.d, z12.d, z4.d                      
    WORD $0x85825045 // ldr z5, [x2, #20, MUL VL]                   
    WORD $0x85825446 // ldr z6, [x2, #21, MUL VL]                   
    WORD $0x052b30a7 // tbl z7.b, z5.b, z11.b                       
    WORD $0x052930a5 // tbl z5.b, z5.b, z9.b                        
    WORD $0x052c30c8 // tbl z8.b, z6.b, z12.b                       
    WORD $0x052a30c6 // tbl z6.b, z6.b, z10.b                       
    WORD $0x04a53000 // eor z0.d, z0.d, z5.d                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x85825845 // ldr z5, [x2, #22, MUL VL]                   
    WORD $0x85825c46 // ldr z6, [x2, #23, MUL VL]                   
    WORD $0x052b30a7 // tbl z7.b, z5.b, z11.b                       
    WORD $0x052930a5 // tbl z5.b, z5.b, z9.b                        
    WORD $0x052c30c8 // tbl z8.b, z6.b, z12.b                       
    WORD $0x052a30c6 // tbl z6.b, z6.b, z10.b                       
    WORD $0x04a53042 // eor z2.d, z2.d, z5.d                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    // Check for early termination
    CMP    $6, R16
    BEQ    mulSve_10x2_64Xor_store

    // Load and process 64 bytes from input 6 to 2 outputs
    WORD $0x85804169 // ldr z9, [x11]                               
    WORD $0x8580456b // ldr z11, [x11, #1, MUL VL]                  
    WORD $0x042b504b // addvl x11, x11, #2
    WORD $0x04fc952a // lsr z10.d, z9.d, #4                         
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x04243129 // and z9.d, z9.d, z4.d                        
    WORD $0x0424316b // and z11.d, z11.d, z4.d                      
    WORD $0x0424314a // and z10.d, z10.d, z4.d                      
    WORD $0x0424318c // and z12.d, z12.d, z4.d                      
    WORD $0x85834045 // ldr z5, [x2, #24, MUL VL]                   
    WORD $0x85834446 // ldr z6, [x2, #25, MUL VL]                   
    WORD $0x052b30a7 // tbl z7.b, z5.b, z11.b                       
    WORD $0x052930a5 // tbl z5.b, z5.b, z9.b                        
    WORD $0x052c30c8 // tbl z8.b, z6.b, z12.b                       
    WORD $0x052a30c6 // tbl z6.b, z6.b, z10.b                       
    WORD $0x04a53000 // eor z0.d, z0.d, z5.d                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x85834845 // ldr z5, [x2, #26, MUL VL]                   
    WORD $0x85834c46 // ldr z6, [x2, #27, MUL VL]                   
    WORD $0x052b30a7 // tbl z7.b, z5.b, z11.b                       
    WORD $0x052930a5 // tbl z5.b, z5.b, z9.b                        
    WORD $0x052c30c8 // tbl z8.b, z6.b, z12.b                       
    WORD $0x052a30c6 // tbl z6.b, z6.b, z10.b                       
    WORD $0x04a53042 // eor z2.d, z2.d, z5.d                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    // Check for early termination
    CMP    $7, R16
    BEQ    mulSve_10x2_64Xor_store

    // Load and process 64 bytes from input 7 to 2 outputs
    WORD $0x85804189 // ldr z9, [x12]                               
    WORD $0x8580458b // ldr z11, [x12, #1, MUL VL]                  
    WORD $0x042c504c // addvl x12, x12, #2
    WORD $0x04fc952a // lsr z10.d, z9.d, #4                         
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x04243129 // and z9.d, z9.d, z4.d                        
    WORD $0x0424316b // and z11.d, z11.d, z4.d                      
    WORD $0x0424314a // and z10.d, z10.d, z4.d                      
    WORD $0x0424318c // and z12.d, z12.d, z4.d                      
    WORD $0x85835045 // ldr z5, [x2, #28, MUL VL]                   
    WORD $0x85835446 // ldr z6, [x2, #29, MUL VL]                   
    WORD $0x052b30a7 // tbl z7.b, z5.b, z11.b                       
    WORD $0x052930a5 // tbl z5.b, z5.b, z9.b                        
    WORD $0x052c30c8 // tbl z8.b, z6.b, z12.b                       
    WORD $0x052a30c6 // tbl z6.b, z6.b, z10.b                       
    WORD $0x04a53000 // eor z0.d, z0.d, z5.d                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x85835845 // ldr z5, [x2, #30, MUL VL]                   
    WORD $0x85835c46 // ldr z6, [x2, #31, MUL VL]                   
    WORD $0x052b30a7 // tbl z7.b, z5.b, z11.b                       
    WORD $0x052930a5 // tbl z5.b, z5.b, z9.b                        
    WORD $0x052c30c8 // tbl z8.b, z6.b, z12.b                       
    WORD $0x052a30c6 // tbl z6.b, z6.b, z10.b                       
    WORD $0x04a53042 // eor z2.d, z2.d, z5.d                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    // Check for early termination
    CMP    $8, R16
    BEQ    mulSve_10x2_64Xor_store

    // Load and process 64 bytes from input 8 to 2 outputs
    WORD $0x858041a9 // ldr z9, [x13]                               
    WORD $0x858045ab // ldr z11, [x13, #1, MUL VL]                  
    WORD $0x042d504d // addvl x13, x13, #2
    WORD $0x04fc952a // lsr z10.d, z9.d, #4                         
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x04243129 // and z9.d, z9.d, z4.d                        
    WORD $0x0424316b // and z11.d, z11.d, z4.d                      
    WORD $0x0424314a // and z10.d, z10.d, z4.d                      
    WORD $0x0424318c // and z12.d, z12.d, z4.d                      
    WORD $0x85844045 // ldr z5, [x2, #32, MUL VL]                   
    WORD $0x85844446 // ldr z6, [x2, #33, MUL VL]                   
    WORD $0x052b30a7 // tbl z7.b, z5.b, z11.b                       
    WORD $0x052930a5 // tbl z5.b, z5.b, z9.b                        
    WORD $0x052c30c8 // tbl z8.b, z6.b, z12.b                       
    WORD $0x052a30c6 // tbl z6.b, z6.b, z10.b                       
    WORD $0x04a53000 // eor z0.d, z0.d, z5.d                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x85844845 // ldr z5, [x2, #34, MUL VL]                   
    WORD $0x85844c46 // ldr z6, [x2, #35, MUL VL]                   
    WORD $0x052b30a7 // tbl z7.b, z5.b, z11.b                       
    WORD $0x052930a5 // tbl z5.b, z5.b, z9.b                        
    WORD $0x052c30c8 // tbl z8.b, z6.b, z12.b                       
    WORD $0x052a30c6 // tbl z6.b, z6.b, z10.b                       
    WORD $0x04a53042 // eor z2.d, z2.d, z5.d                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    // Check for early termination
    CMP    $9, R16
    BEQ    mulSve_10x2_64Xor_store

    // Load and process 64 bytes from input 9 to 2 outputs
    WORD $0x85804069 // ldr z9, [x3]                                
    WORD $0x8580446b // ldr z11, [x3, #1, MUL VL]                   
    WORD $0x04235043 // addvl x3, x3, #2
    WORD $0x04fc952a // lsr z10.d, z9.d, #4                         
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x04243129 // and z9.d, z9.d, z4.d                        
    WORD $0x0424316b // and z11.d, z11.d, z4.d                      
    WORD $0x0424314a // and z10.d, z10.d, z4.d                      
    WORD $0x0424318c // and z12.d, z12.d, z4.d                      
    WORD $0x85845045 // ldr z5, [x2, #36, MUL VL]                   
    WORD $0x85845446 // ldr z6, [x2, #37, MUL VL]                   
    WORD $0x052b30a7 // tbl z7.b, z5.b, z11.b                       
    WORD $0x052930a5 // tbl z5.b, z5.b, z9.b                        
    WORD $0x052c30c8 // tbl z8.b, z6.b, z12.b                       
    WORD $0x052a30c6 // tbl z6.b, z6.b, z10.b                       
    WORD $0x04a53000 // eor z0.d, z0.d, z5.d                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x85845845 // ldr z5, [x2, #38, MUL VL]                   
    WORD $0x85845c46 // ldr z6, [x2, #39, MUL VL]                   
    WORD $0x052b30a7 // tbl z7.b, z5.b, z11.b                       
    WORD $0x052930a5 // tbl z5.b, z5.b, z9.b                        
    WORD $0x052c30c8 // tbl z8.b, z6.b, z12.b                       
    WORD $0x052a30c6 // tbl z6.b, z6.b, z10.b                       
    WORD $0x04a53042 // eor z2.d, z2.d, z5.d                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        

mulSve_10x2_64Xor_store:
    // Store 2 outputs
    WORD $0xe58041e0 // str z0, [x15]                               
    WORD $0xe58045e1 // str z1, [x15, #1, MUL VL]                   
    WORD $0x042f504f // addvl x15, x15, #2
    WORD $0xe58041c2 // str z2, [x14]                               
    WORD $0xe58045c3 // str z3, [x14, #1, MUL VL]                   
    WORD $0x042e504e // addvl x14, x14, #2

    // Prepare for next loop
    WORD $0xf1000400 // subs x0, x0, #1                             
    BNE  mulSve_10x2_64Xor_loop

mulSve_10x2_64Xor_end:
    RET

// func mulSve_10x3_64(matrix []byte, in [][]byte, out [][]byte, start int, n int)
// Requires: SVE
TEXT Â·mulSve_10x3_64(SB), $8-88
    // Loading no tables to registers
    // Destination kept in GP registers
    // Full registers estimated 130 YMM used
    MOVD n+80(FP), R0
    MOVD matrix_base+0(FP), R2
    WORD $0xd346fc00 // lsr x0, x0, #6                              
    WORD $0xd37ae400 // lsl x0, x0, #6
    WORD $0x04bf5050 // rdvl x16, #2
    WORD $0x9ad00800 // udiv x0, x0, x16
    WORD $0xea00001f // tst x0, x0                                  
    BEQ    mulSve_10x3_64_end
    MOVD in_base+24(FP), R0
    MOVD (R0), R3
    MOVD 24(R0), R1
    MOVD 48(R0), R4
    MOVD 72(R0), R5
    MOVD 96(R0), R8
    MOVD 120(R0), R9
    MOVD 144(R0), R10
    MOVD 168(R0), R11
    MOVD 192(R0), R12
    MOVD 216(R0), R0
    MOVD out_base+48(FP), R13
    MOVD (R13), R14
    MOVD 24(R13), R15
    MOVD 48(R13), R13
    MOVD start+72(FP), R6

    // Add start offset to output
    WORD $0x8b0601ce // add x14, x14, x6                            
    WORD $0x8b0601ef // add x15, x15, x6                            
    WORD $0x8b0601ad // add x13, x13, x6                            

    // Add start offset to input
    WORD $0x8b060063 // add x3, x3, x6                              
    WORD $0x8b060021 // add x1, x1, x6                              
    WORD $0x8b060084 // add x4, x4, x6                              
    WORD $0x8b0600a5 // add x5, x5, x6                              
    WORD $0x8b060108 // add x8, x8, x6                              
    WORD $0x8b060129 // add x9, x9, x6                              
    WORD $0x8b06014a // add x10, x10, x6                            
    WORD $0x8b06016b // add x11, x11, x6                            
    WORD $0x8b06018c // add x12, x12, x6                            
    WORD $0x8b060000 // add x0, x0, x6                              
    WORD $0xd28001e6 // mov x6, #15                                 
    WORD $0x05e038c6 // mov z6.d, x6                                
    WORD $0x052120c6 // dup z6.b, z6.b[0]                           

    // Reload length to save a register
    MOVD n+80(FP), R6
    WORD $0xd346fcc6 // lsr x6, x6, #6                              
    WORD $0xd37ae4c6 // lsl x6, x6, #6
    WORD $0x04bf5050 // rdvl x16, #2
    WORD $0x9ad008c6 // udiv x6, x6, x16

    // Load number of input shards
    MOVD   in_len+32(FP), R16

mulSve_10x3_64_loop:
    // Load and process 64 bytes from input 0 to 3 outputs
    WORD $0x8580406b // ldr z11, [x3]                               
    WORD $0x8580446d // ldr z13, [x3, #1, MUL VL]                   
    WORD $0x04235043 // addvl x3, x3, #2
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x04fc95ae // lsr z14.d, z13.d, #4                        
    WORD $0x0426316b // and z11.d, z11.d, z6.d                      
    WORD $0x042631ad // and z13.d, z13.d, z6.d                      
    WORD $0x0426318c // and z12.d, z12.d, z6.d                      
    WORD $0x042631ce // and z14.d, z14.d, z6.d                      
    WORD $0x85804047 // ldr z7, [x2]                                
    WORD $0x85804448 // ldr z8, [x2, #1, MUL VL]                    
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73100 // eor z0.d, z8.d, z7.d                        
    WORD $0x04a93141 // eor z1.d, z10.d, z9.d                       
    WORD $0x85804847 // ldr z7, [x2, #2, MUL VL]                    
    WORD $0x85804c48 // ldr z8, [x2, #3, MUL VL]                    
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73102 // eor z2.d, z8.d, z7.d                        
    WORD $0x04a93143 // eor z3.d, z10.d, z9.d                       
    WORD $0x85805047 // ldr z7, [x2, #4, MUL VL]                    
    WORD $0x85805448 // ldr z8, [x2, #5, MUL VL]                    
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73104 // eor z4.d, z8.d, z7.d                        
    WORD $0x04a93145 // eor z5.d, z10.d, z9.d                       
    // Check for early termination
    CMP    $1, R16
    BEQ    mulSve_10x3_64_store

    // Load and process 64 bytes from input 1 to 3 outputs
    WORD $0x8580402b // ldr z11, [x1]                               
    WORD $0x8580442d // ldr z13, [x1, #1, MUL VL]                   
    WORD $0x04215041 // addvl x1, x1, #2
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x04fc95ae // lsr z14.d, z13.d, #4                        
    WORD $0x0426316b // and z11.d, z11.d, z6.d                      
    WORD $0x042631ad // and z13.d, z13.d, z6.d                      
    WORD $0x0426318c // and z12.d, z12.d, z6.d                      
    WORD $0x042631ce // and z14.d, z14.d, z6.d                      
    WORD $0x85805847 // ldr z7, [x2, #6, MUL VL]                    
    WORD $0x85805c48 // ldr z8, [x2, #7, MUL VL]                    
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x85814047 // ldr z7, [x2, #8, MUL VL]                    
    WORD $0x85814448 // ldr z8, [x2, #9, MUL VL]                    
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x85814847 // ldr z7, [x2, #10, MUL VL]                   
    WORD $0x85814c48 // ldr z8, [x2, #11, MUL VL]                   
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    // Check for early termination
    CMP    $2, R16
    BEQ    mulSve_10x3_64_store

    // Load and process 64 bytes from input 2 to 3 outputs
    WORD $0x8580408b // ldr z11, [x4]                               
    WORD $0x8580448d // ldr z13, [x4, #1, MUL VL]                   
    WORD $0x04245044 // addvl x4, x4, #2
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x04fc95ae // lsr z14.d, z13.d, #4                        
    WORD $0x0426316b // and z11.d, z11.d, z6.d                      
    WORD $0x042631ad // and z13.d, z13.d, z6.d                      
    WORD $0x0426318c // and z12.d, z12.d, z6.d                      
    WORD $0x042631ce // and z14.d, z14.d, z6.d                      
    WORD $0x85815047 // ldr z7, [x2, #12, MUL VL]                   
    WORD $0x85815448 // ldr z8, [x2, #13, MUL VL]                   
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x85815847 // ldr z7, [x2, #14, MUL VL]                   
    WORD $0x85815c48 // ldr z8, [x2, #15, MUL VL]                   
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x85824047 // ldr z7, [x2, #16, MUL VL]                   
    WORD $0x85824448 // ldr z8, [x2, #17, MUL VL]                   
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    // Check for early termination
    CMP    $3, R16
    BEQ    mulSve_10x3_64_store

    // Load and process 64 bytes from input 3 to 3 outputs
    WORD $0x858040ab // ldr z11, [x5]                               
    WORD $0x858044ad // ldr z13, [x5, #1, MUL VL]                   
    WORD $0x04255045 // addvl x5, x5, #2
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x04fc95ae // lsr z14.d, z13.d, #4                        
    WORD $0x0426316b // and z11.d, z11.d, z6.d                      
    WORD $0x042631ad // and z13.d, z13.d, z6.d                      
    WORD $0x0426318c // and z12.d, z12.d, z6.d                      
    WORD $0x042631ce // and z14.d, z14.d, z6.d                      
    WORD $0x85824847 // ldr z7, [x2, #18, MUL VL]                   
    WORD $0x85824c48 // ldr z8, [x2, #19, MUL VL]                   
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x85825047 // ldr z7, [x2, #20, MUL VL]                   
    WORD $0x85825448 // ldr z8, [x2, #21, MUL VL]                   
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x85825847 // ldr z7, [x2, #22, MUL VL]                   
    WORD $0x85825c48 // ldr z8, [x2, #23, MUL VL]                   
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    // Check for early termination
    CMP    $4, R16
    BEQ    mulSve_10x3_64_store

    // Load and process 64 bytes from input 4 to 3 outputs
    WORD $0x8580410b // ldr z11, [x8]                               
    WORD $0x8580450d // ldr z13, [x8, #1, MUL VL]                   
    WORD $0x04285048 // addvl x8, x8, #2
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x04fc95ae // lsr z14.d, z13.d, #4                        
    WORD $0x0426316b // and z11.d, z11.d, z6.d                      
    WORD $0x042631ad // and z13.d, z13.d, z6.d                      
    WORD $0x0426318c // and z12.d, z12.d, z6.d                      
    WORD $0x042631ce // and z14.d, z14.d, z6.d                      
    WORD $0x85834047 // ldr z7, [x2, #24, MUL VL]                   
    WORD $0x85834448 // ldr z8, [x2, #25, MUL VL]                   
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x85834847 // ldr z7, [x2, #26, MUL VL]                   
    WORD $0x85834c48 // ldr z8, [x2, #27, MUL VL]                   
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x85835047 // ldr z7, [x2, #28, MUL VL]                   
    WORD $0x85835448 // ldr z8, [x2, #29, MUL VL]                   
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    // Check for early termination
    CMP    $5, R16
    BEQ    mulSve_10x3_64_store

    // Load and process 64 bytes from input 5 to 3 outputs
    WORD $0x8580412b // ldr z11, [x9]                               
    WORD $0x8580452d // ldr z13, [x9, #1, MUL VL]                   
    WORD $0x04295049 // addvl x9, x9, #2
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x04fc95ae // lsr z14.d, z13.d, #4                        
    WORD $0x0426316b // and z11.d, z11.d, z6.d                      
    WORD $0x042631ad // and z13.d, z13.d, z6.d                      
    WORD $0x0426318c // and z12.d, z12.d, z6.d                      
    WORD $0x042631ce // and z14.d, z14.d, z6.d                      
    WORD $0x85835847 // ldr z7, [x2, #30, MUL VL]                   
    WORD $0x85835c48 // ldr z8, [x2, #31, MUL VL]                   
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x85844047 // ldr z7, [x2, #32, MUL VL]                   
    WORD $0x85844448 // ldr z8, [x2, #33, MUL VL]                   
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x85844847 // ldr z7, [x2, #34, MUL VL]                   
    WORD $0x85844c48 // ldr z8, [x2, #35, MUL VL]                   
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    // Check for early termination
    CMP    $6, R16
    BEQ    mulSve_10x3_64_store

    // Load and process 64 bytes from input 6 to 3 outputs
    WORD $0x8580414b // ldr z11, [x10]                              
    WORD $0x8580454d // ldr z13, [x10, #1, MUL VL]                  
    WORD $0x042a504a // addvl x10, x10, #2
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x04fc95ae // lsr z14.d, z13.d, #4                        
    WORD $0x0426316b // and z11.d, z11.d, z6.d                      
    WORD $0x042631ad // and z13.d, z13.d, z6.d                      
    WORD $0x0426318c // and z12.d, z12.d, z6.d                      
    WORD $0x042631ce // and z14.d, z14.d, z6.d                      
    WORD $0x85845047 // ldr z7, [x2, #36, MUL VL]                   
    WORD $0x85845448 // ldr z8, [x2, #37, MUL VL]                   
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x85845847 // ldr z7, [x2, #38, MUL VL]                   
    WORD $0x85845c48 // ldr z8, [x2, #39, MUL VL]                   
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x85854047 // ldr z7, [x2, #40, MUL VL]                   
    WORD $0x85854448 // ldr z8, [x2, #41, MUL VL]                   
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    // Check for early termination
    CMP    $7, R16
    BEQ    mulSve_10x3_64_store

    // Load and process 64 bytes from input 7 to 3 outputs
    WORD $0x8580416b // ldr z11, [x11]                              
    WORD $0x8580456d // ldr z13, [x11, #1, MUL VL]                  
    WORD $0x042b504b // addvl x11, x11, #2
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x04fc95ae // lsr z14.d, z13.d, #4                        
    WORD $0x0426316b // and z11.d, z11.d, z6.d                      
    WORD $0x042631ad // and z13.d, z13.d, z6.d                      
    WORD $0x0426318c // and z12.d, z12.d, z6.d                      
    WORD $0x042631ce // and z14.d, z14.d, z6.d                      
    WORD $0x85854847 // ldr z7, [x2, #42, MUL VL]                   
    WORD $0x85854c48 // ldr z8, [x2, #43, MUL VL]                   
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x85855047 // ldr z7, [x2, #44, MUL VL]                   
    WORD $0x85855448 // ldr z8, [x2, #45, MUL VL]                   
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x85855847 // ldr z7, [x2, #46, MUL VL]                   
    WORD $0x85855c48 // ldr z8, [x2, #47, MUL VL]                   
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    // Check for early termination
    CMP    $8, R16
    BEQ    mulSve_10x3_64_store

    // Load and process 64 bytes from input 8 to 3 outputs
    WORD $0x8580418b // ldr z11, [x12]                              
    WORD $0x8580458d // ldr z13, [x12, #1, MUL VL]                  
    WORD $0x042c504c // addvl x12, x12, #2
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x04fc95ae // lsr z14.d, z13.d, #4                        
    WORD $0x0426316b // and z11.d, z11.d, z6.d                      
    WORD $0x042631ad // and z13.d, z13.d, z6.d                      
    WORD $0x0426318c // and z12.d, z12.d, z6.d                      
    WORD $0x042631ce // and z14.d, z14.d, z6.d                      
    WORD $0x85864047 // ldr z7, [x2, #48, MUL VL]                   
    WORD $0x85864448 // ldr z8, [x2, #49, MUL VL]                   
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x85864847 // ldr z7, [x2, #50, MUL VL]                   
    WORD $0x85864c48 // ldr z8, [x2, #51, MUL VL]                   
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x85865047 // ldr z7, [x2, #52, MUL VL]                   
    WORD $0x85865448 // ldr z8, [x2, #53, MUL VL]                   
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    // Check for early termination
    CMP    $9, R16
    BEQ    mulSve_10x3_64_store

    // Load and process 64 bytes from input 9 to 3 outputs
    WORD $0x8580400b // ldr z11, [x0]                               
    WORD $0x8580440d // ldr z13, [x0, #1, MUL VL]                   
    WORD $0x04205040 // addvl x0, x0, #2
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x04fc95ae // lsr z14.d, z13.d, #4                        
    WORD $0x0426316b // and z11.d, z11.d, z6.d                      
    WORD $0x042631ad // and z13.d, z13.d, z6.d                      
    WORD $0x0426318c // and z12.d, z12.d, z6.d                      
    WORD $0x042631ce // and z14.d, z14.d, z6.d                      
    WORD $0x85865847 // ldr z7, [x2, #54, MUL VL]                   
    WORD $0x85865c48 // ldr z8, [x2, #55, MUL VL]                   
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x85874047 // ldr z7, [x2, #56, MUL VL]                   
    WORD $0x85874448 // ldr z8, [x2, #57, MUL VL]                   
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x85874847 // ldr z7, [x2, #58, MUL VL]                   
    WORD $0x85874c48 // ldr z8, [x2, #59, MUL VL]                   
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       

mulSve_10x3_64_store:
    // Store 3 outputs
    WORD $0xe58041c0 // str z0, [x14]                               
    WORD $0xe58045c1 // str z1, [x14, #1, MUL VL]                   
    WORD $0x042e504e // addvl x14, x14, #2
    WORD $0xe58041e2 // str z2, [x15]                               
    WORD $0xe58045e3 // str z3, [x15, #1, MUL VL]                   
    WORD $0x042f504f // addvl x15, x15, #2
    WORD $0xe58041a4 // str z4, [x13]                               
    WORD $0xe58045a5 // str z5, [x13, #1, MUL VL]                   
    WORD $0x042d504d // addvl x13, x13, #2

    // Prepare for next loop
    WORD $0xf10004c6 // subs x6, x6, #1                             
    BNE  mulSve_10x3_64_loop

mulSve_10x3_64_end:
    RET

// func mulSve_10x3_64Xor(matrix []byte, in [][]byte, out [][]byte, start int, n int)
// Requires: SVE
TEXT Â·mulSve_10x3_64Xor(SB), $8-88
    // Loading no tables to registers
    // Destination kept in GP registers
    // Full registers estimated 130 YMM used
    MOVD n+80(FP), R0
    MOVD matrix_base+0(FP), R2
    WORD $0xd346fc00 // lsr x0, x0, #6                              
    WORD $0xd37ae400 // lsl x0, x0, #6
    WORD $0x04bf5050 // rdvl x16, #2
    WORD $0x9ad00800 // udiv x0, x0, x16
    WORD $0xea00001f // tst x0, x0                                  
    BEQ    mulSve_10x3_64Xor_end
    MOVD in_base+24(FP), R0
    MOVD (R0), R3
    MOVD 24(R0), R1
    MOVD 48(R0), R4
    MOVD 72(R0), R5
    MOVD 96(R0), R8
    MOVD 120(R0), R9
    MOVD 144(R0), R10
    MOVD 168(R0), R11
    MOVD 192(R0), R12
    MOVD 216(R0), R0
    MOVD out_base+48(FP), R13
    MOVD (R13), R14
    MOVD 24(R13), R15
    MOVD 48(R13), R13
    MOVD start+72(FP), R6

    // Add start offset to output
    WORD $0x8b0601ce // add x14, x14, x6                            
    WORD $0x8b0601ef // add x15, x15, x6                            
    WORD $0x8b0601ad // add x13, x13, x6                            

    // Add start offset to input
    WORD $0x8b060063 // add x3, x3, x6                              
    WORD $0x8b060021 // add x1, x1, x6                              
    WORD $0x8b060084 // add x4, x4, x6                              
    WORD $0x8b0600a5 // add x5, x5, x6                              
    WORD $0x8b060108 // add x8, x8, x6                              
    WORD $0x8b060129 // add x9, x9, x6                              
    WORD $0x8b06014a // add x10, x10, x6                            
    WORD $0x8b06016b // add x11, x11, x6                            
    WORD $0x8b06018c // add x12, x12, x6                            
    WORD $0x8b060000 // add x0, x0, x6                              
    WORD $0xd28001e6 // mov x6, #15                                 
    WORD $0x05e038c6 // mov z6.d, x6                                
    WORD $0x052120c6 // dup z6.b, z6.b[0]                           

    // Reload length to save a register
    MOVD n+80(FP), R6
    WORD $0xd346fcc6 // lsr x6, x6, #6                              
    WORD $0xd37ae4c6 // lsl x6, x6, #6
    WORD $0x04bf5050 // rdvl x16, #2
    WORD $0x9ad008c6 // udiv x6, x6, x16

    // Load number of input shards
    MOVD   in_len+32(FP), R16

mulSve_10x3_64Xor_loop:
    // Load 3 outputs
    WORD $0x858041c0 // ldr z0, [x14]                               
    WORD $0x858045c1 // ldr z1, [x14, #1, MUL VL]                   
    WORD $0x858041e2 // ldr z2, [x15]                               
    WORD $0x858045e3 // ldr z3, [x15, #1, MUL VL]                   
    WORD $0x858041a4 // ldr z4, [x13]                               
    WORD $0x858045a5 // ldr z5, [x13, #1, MUL VL]                   

    // Load and process 64 bytes from input 0 to 3 outputs
    WORD $0x8580406b // ldr z11, [x3]                               
    WORD $0x8580446d // ldr z13, [x3, #1, MUL VL]                   
    WORD $0x04235043 // addvl x3, x3, #2
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x04fc95ae // lsr z14.d, z13.d, #4                        
    WORD $0x0426316b // and z11.d, z11.d, z6.d                      
    WORD $0x042631ad // and z13.d, z13.d, z6.d                      
    WORD $0x0426318c // and z12.d, z12.d, z6.d                      
    WORD $0x042631ce // and z14.d, z14.d, z6.d                      
    WORD $0x85804047 // ldr z7, [x2]                                
    WORD $0x85804448 // ldr z8, [x2, #1, MUL VL]                    
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x85804847 // ldr z7, [x2, #2, MUL VL]                    
    WORD $0x85804c48 // ldr z8, [x2, #3, MUL VL]                    
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x85805047 // ldr z7, [x2, #4, MUL VL]                    
    WORD $0x85805448 // ldr z8, [x2, #5, MUL VL]                    
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    // Check for early termination
    CMP    $1, R16
    BEQ    mulSve_10x3_64Xor_store

    // Load and process 64 bytes from input 1 to 3 outputs
    WORD $0x8580402b // ldr z11, [x1]                               
    WORD $0x8580442d // ldr z13, [x1, #1, MUL VL]                   
    WORD $0x04215041 // addvl x1, x1, #2
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x04fc95ae // lsr z14.d, z13.d, #4                        
    WORD $0x0426316b // and z11.d, z11.d, z6.d                      
    WORD $0x042631ad // and z13.d, z13.d, z6.d                      
    WORD $0x0426318c // and z12.d, z12.d, z6.d                      
    WORD $0x042631ce // and z14.d, z14.d, z6.d                      
    WORD $0x85805847 // ldr z7, [x2, #6, MUL VL]                    
    WORD $0x85805c48 // ldr z8, [x2, #7, MUL VL]                    
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x85814047 // ldr z7, [x2, #8, MUL VL]                    
    WORD $0x85814448 // ldr z8, [x2, #9, MUL VL]                    
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x85814847 // ldr z7, [x2, #10, MUL VL]                   
    WORD $0x85814c48 // ldr z8, [x2, #11, MUL VL]                   
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    // Check for early termination
    CMP    $2, R16
    BEQ    mulSve_10x3_64Xor_store

    // Load and process 64 bytes from input 2 to 3 outputs
    WORD $0x8580408b // ldr z11, [x4]                               
    WORD $0x8580448d // ldr z13, [x4, #1, MUL VL]                   
    WORD $0x04245044 // addvl x4, x4, #2
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x04fc95ae // lsr z14.d, z13.d, #4                        
    WORD $0x0426316b // and z11.d, z11.d, z6.d                      
    WORD $0x042631ad // and z13.d, z13.d, z6.d                      
    WORD $0x0426318c // and z12.d, z12.d, z6.d                      
    WORD $0x042631ce // and z14.d, z14.d, z6.d                      
    WORD $0x85815047 // ldr z7, [x2, #12, MUL VL]                   
    WORD $0x85815448 // ldr z8, [x2, #13, MUL VL]                   
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x85815847 // ldr z7, [x2, #14, MUL VL]                   
    WORD $0x85815c48 // ldr z8, [x2, #15, MUL VL]                   
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x85824047 // ldr z7, [x2, #16, MUL VL]                   
    WORD $0x85824448 // ldr z8, [x2, #17, MUL VL]                   
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    // Check for early termination
    CMP    $3, R16
    BEQ    mulSve_10x3_64Xor_store

    // Load and process 64 bytes from input 3 to 3 outputs
    WORD $0x858040ab // ldr z11, [x5]                               
    WORD $0x858044ad // ldr z13, [x5, #1, MUL VL]                   
    WORD $0x04255045 // addvl x5, x5, #2
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x04fc95ae // lsr z14.d, z13.d, #4                        
    WORD $0x0426316b // and z11.d, z11.d, z6.d                      
    WORD $0x042631ad // and z13.d, z13.d, z6.d                      
    WORD $0x0426318c // and z12.d, z12.d, z6.d                      
    WORD $0x042631ce // and z14.d, z14.d, z6.d                      
    WORD $0x85824847 // ldr z7, [x2, #18, MUL VL]                   
    WORD $0x85824c48 // ldr z8, [x2, #19, MUL VL]                   
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x85825047 // ldr z7, [x2, #20, MUL VL]                   
    WORD $0x85825448 // ldr z8, [x2, #21, MUL VL]                   
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x85825847 // ldr z7, [x2, #22, MUL VL]                   
    WORD $0x85825c48 // ldr z8, [x2, #23, MUL VL]                   
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    // Check for early termination
    CMP    $4, R16
    BEQ    mulSve_10x3_64Xor_store

    // Load and process 64 bytes from input 4 to 3 outputs
    WORD $0x8580410b // ldr z11, [x8]                               
    WORD $0x8580450d // ldr z13, [x8, #1, MUL VL]                   
    WORD $0x04285048 // addvl x8, x8, #2
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x04fc95ae // lsr z14.d, z13.d, #4                        
    WORD $0x0426316b // and z11.d, z11.d, z6.d                      
    WORD $0x042631ad // and z13.d, z13.d, z6.d                      
    WORD $0x0426318c // and z12.d, z12.d, z6.d                      
    WORD $0x042631ce // and z14.d, z14.d, z6.d                      
    WORD $0x85834047 // ldr z7, [x2, #24, MUL VL]                   
    WORD $0x85834448 // ldr z8, [x2, #25, MUL VL]                   
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x85834847 // ldr z7, [x2, #26, MUL VL]                   
    WORD $0x85834c48 // ldr z8, [x2, #27, MUL VL]                   
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x85835047 // ldr z7, [x2, #28, MUL VL]                   
    WORD $0x85835448 // ldr z8, [x2, #29, MUL VL]                   
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    // Check for early termination
    CMP    $5, R16
    BEQ    mulSve_10x3_64Xor_store

    // Load and process 64 bytes from input 5 to 3 outputs
    WORD $0x8580412b // ldr z11, [x9]                               
    WORD $0x8580452d // ldr z13, [x9, #1, MUL VL]                   
    WORD $0x04295049 // addvl x9, x9, #2
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x04fc95ae // lsr z14.d, z13.d, #4                        
    WORD $0x0426316b // and z11.d, z11.d, z6.d                      
    WORD $0x042631ad // and z13.d, z13.d, z6.d                      
    WORD $0x0426318c // and z12.d, z12.d, z6.d                      
    WORD $0x042631ce // and z14.d, z14.d, z6.d                      
    WORD $0x85835847 // ldr z7, [x2, #30, MUL VL]                   
    WORD $0x85835c48 // ldr z8, [x2, #31, MUL VL]                   
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x85844047 // ldr z7, [x2, #32, MUL VL]                   
    WORD $0x85844448 // ldr z8, [x2, #33, MUL VL]                   
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x85844847 // ldr z7, [x2, #34, MUL VL]                   
    WORD $0x85844c48 // ldr z8, [x2, #35, MUL VL]                   
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    // Check for early termination
    CMP    $6, R16
    BEQ    mulSve_10x3_64Xor_store

    // Load and process 64 bytes from input 6 to 3 outputs
    WORD $0x8580414b // ldr z11, [x10]                              
    WORD $0x8580454d // ldr z13, [x10, #1, MUL VL]                  
    WORD $0x042a504a // addvl x10, x10, #2
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x04fc95ae // lsr z14.d, z13.d, #4                        
    WORD $0x0426316b // and z11.d, z11.d, z6.d                      
    WORD $0x042631ad // and z13.d, z13.d, z6.d                      
    WORD $0x0426318c // and z12.d, z12.d, z6.d                      
    WORD $0x042631ce // and z14.d, z14.d, z6.d                      
    WORD $0x85845047 // ldr z7, [x2, #36, MUL VL]                   
    WORD $0x85845448 // ldr z8, [x2, #37, MUL VL]                   
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x85845847 // ldr z7, [x2, #38, MUL VL]                   
    WORD $0x85845c48 // ldr z8, [x2, #39, MUL VL]                   
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x85854047 // ldr z7, [x2, #40, MUL VL]                   
    WORD $0x85854448 // ldr z8, [x2, #41, MUL VL]                   
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    // Check for early termination
    CMP    $7, R16
    BEQ    mulSve_10x3_64Xor_store

    // Load and process 64 bytes from input 7 to 3 outputs
    WORD $0x8580416b // ldr z11, [x11]                              
    WORD $0x8580456d // ldr z13, [x11, #1, MUL VL]                  
    WORD $0x042b504b // addvl x11, x11, #2
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x04fc95ae // lsr z14.d, z13.d, #4                        
    WORD $0x0426316b // and z11.d, z11.d, z6.d                      
    WORD $0x042631ad // and z13.d, z13.d, z6.d                      
    WORD $0x0426318c // and z12.d, z12.d, z6.d                      
    WORD $0x042631ce // and z14.d, z14.d, z6.d                      
    WORD $0x85854847 // ldr z7, [x2, #42, MUL VL]                   
    WORD $0x85854c48 // ldr z8, [x2, #43, MUL VL]                   
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x85855047 // ldr z7, [x2, #44, MUL VL]                   
    WORD $0x85855448 // ldr z8, [x2, #45, MUL VL]                   
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x85855847 // ldr z7, [x2, #46, MUL VL]                   
    WORD $0x85855c48 // ldr z8, [x2, #47, MUL VL]                   
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    // Check for early termination
    CMP    $8, R16
    BEQ    mulSve_10x3_64Xor_store

    // Load and process 64 bytes from input 8 to 3 outputs
    WORD $0x8580418b // ldr z11, [x12]                              
    WORD $0x8580458d // ldr z13, [x12, #1, MUL VL]                  
    WORD $0x042c504c // addvl x12, x12, #2
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x04fc95ae // lsr z14.d, z13.d, #4                        
    WORD $0x0426316b // and z11.d, z11.d, z6.d                      
    WORD $0x042631ad // and z13.d, z13.d, z6.d                      
    WORD $0x0426318c // and z12.d, z12.d, z6.d                      
    WORD $0x042631ce // and z14.d, z14.d, z6.d                      
    WORD $0x85864047 // ldr z7, [x2, #48, MUL VL]                   
    WORD $0x85864448 // ldr z8, [x2, #49, MUL VL]                   
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x85864847 // ldr z7, [x2, #50, MUL VL]                   
    WORD $0x85864c48 // ldr z8, [x2, #51, MUL VL]                   
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x85865047 // ldr z7, [x2, #52, MUL VL]                   
    WORD $0x85865448 // ldr z8, [x2, #53, MUL VL]                   
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    // Check for early termination
    CMP    $9, R16
    BEQ    mulSve_10x3_64Xor_store

    // Load and process 64 bytes from input 9 to 3 outputs
    WORD $0x8580400b // ldr z11, [x0]                               
    WORD $0x8580440d // ldr z13, [x0, #1, MUL VL]                   
    WORD $0x04205040 // addvl x0, x0, #2
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x04fc95ae // lsr z14.d, z13.d, #4                        
    WORD $0x0426316b // and z11.d, z11.d, z6.d                      
    WORD $0x042631ad // and z13.d, z13.d, z6.d                      
    WORD $0x0426318c // and z12.d, z12.d, z6.d                      
    WORD $0x042631ce // and z14.d, z14.d, z6.d                      
    WORD $0x85865847 // ldr z7, [x2, #54, MUL VL]                   
    WORD $0x85865c48 // ldr z8, [x2, #55, MUL VL]                   
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x85874047 // ldr z7, [x2, #56, MUL VL]                   
    WORD $0x85874448 // ldr z8, [x2, #57, MUL VL]                   
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x85874847 // ldr z7, [x2, #58, MUL VL]                   
    WORD $0x85874c48 // ldr z8, [x2, #59, MUL VL]                   
    WORD $0x052d30e9 // tbl z9.b, z7.b, z13.b                       
    WORD $0x052b30e7 // tbl z7.b, z7.b, z11.b                       
    WORD $0x052e310a // tbl z10.b, z8.b, z14.b                      
    WORD $0x052c3108 // tbl z8.b, z8.b, z12.b                       
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       

mulSve_10x3_64Xor_store:
    // Store 3 outputs
    WORD $0xe58041c0 // str z0, [x14]                               
    WORD $0xe58045c1 // str z1, [x14, #1, MUL VL]                   
    WORD $0x042e504e // addvl x14, x14, #2
    WORD $0xe58041e2 // str z2, [x15]                               
    WORD $0xe58045e3 // str z3, [x15, #1, MUL VL]                   
    WORD $0x042f504f // addvl x15, x15, #2
    WORD $0xe58041a4 // str z4, [x13]                               
    WORD $0xe58045a5 // str z5, [x13, #1, MUL VL]                   
    WORD $0x042d504d // addvl x13, x13, #2

    // Prepare for next loop
    WORD $0xf10004c6 // subs x6, x6, #1                             
    BNE  mulSve_10x3_64Xor_loop

mulSve_10x3_64Xor_end:
    RET

// func mulSve_10x4(matrix []byte, in [][]byte, out [][]byte, start int, n int)
// Requires: SVE
TEXT Â·mulSve_10x4(SB), NOSPLIT, $8-88
    WORD $0x25d8e3e0 // ptrue p0.d
    // Loading no tables to registers
    // Destination kept on stack
    // Full registers estimated 89 YMM used
    MOVD n+80(FP), R0
    MOVD matrix_base+0(FP), R2
    WORD $0xd345fc00 // lsr x0, x0, #5                              
    WORD $0xd37be800 // lsl x0, x0, #5
    WORD $0x04bf5030 // rdvl x16, #1
    WORD $0x9ad00800 // udiv x0, x0, x16
    WORD $0xea00001f // tst x0, x0                                  
    BEQ    mulSve_10x4_end
    MOVD in_base+24(FP), R3
    MOVD (R3), R1
    MOVD 24(R3), R4
    MOVD 48(R3), R5
    MOVD 72(R3), R8
    MOVD 96(R3), R9
    MOVD 120(R3), R10
    MOVD 144(R3), R11
    MOVD 168(R3), R12
    MOVD 192(R3), R13
    MOVD 216(R3), R3
    MOVD out_base+48(FP), R14
    MOVD start+72(FP), R15

    // Add start offset to input
    WORD $0x8b0f0021 // add x1, x1, x15                             
    WORD $0x8b0f0084 // add x4, x4, x15                             
    WORD $0x8b0f00a5 // add x5, x5, x15                             
    WORD $0x8b0f0108 // add x8, x8, x15                             
    WORD $0x8b0f0129 // add x9, x9, x15                             
    WORD $0x8b0f014a // add x10, x10, x15                           
    WORD $0x8b0f016b // add x11, x11, x15                           
    WORD $0x8b0f018c // add x12, x12, x15                           
    WORD $0x8b0f01ad // add x13, x13, x15                           
    WORD $0x8b0f0063 // add x3, x3, x15                             
    WORD $0xd343fdef // lsr x15, x15, #3                            
    WORD $0xd28001e6 // mov x6, #15                                 
    WORD $0x05e038c4 // mov z4.d, x6                                
    WORD $0x05212084 // dup z4.b, z4.b[0]                           

    // Load number of input shards
    MOVD   in_len+32(FP), R16
    WORD $0x04bf5031 // rdvl x17, #1
    WORD $0xd343fe31 // lsr  x17, x17, #3

mulSve_10x4_loop:
    // Load and process 32 bytes from input 0 to 4 outputs
    WORD $0x85804027 // ldr z7, [x1]                                
    WORD $0x04215021 // addvl x1, x1, #1
    WORD $0x04fc94e8 // lsr z8.d, z7.d, #4                          
    WORD $0x042430e7 // and z7.d, z7.d, z4.d                        
    WORD $0x04243108 // and z8.d, z8.d, z4.d                        
    WORD $0x85804045 // ldr z5, [x2]                                
    WORD $0x85804446 // ldr z6, [x2, #1, MUL VL]                    
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a530c0 // eor z0.d, z6.d, z5.d                        
    WORD $0x85804845 // ldr z5, [x2, #2, MUL VL]                    
    WORD $0x85804c46 // ldr z6, [x2, #3, MUL VL]                    
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a530c1 // eor z1.d, z6.d, z5.d                        
    WORD $0x85805045 // ldr z5, [x2, #4, MUL VL]                    
    WORD $0x85805446 // ldr z6, [x2, #5, MUL VL]                    
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a530c2 // eor z2.d, z6.d, z5.d                        
    WORD $0x85805845 // ldr z5, [x2, #6, MUL VL]                    
    WORD $0x85805c46 // ldr z6, [x2, #7, MUL VL]                    
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a530c3 // eor z3.d, z6.d, z5.d                        
    // Check for early termination
    CMP    $1, R16
    BEQ    mulSve_10x4_store

    // Load and process 32 bytes from input 1 to 4 outputs
    WORD $0x85804087 // ldr z7, [x4]                                
    WORD $0x04245024 // addvl x4, x4, #1
    WORD $0x04fc94e8 // lsr z8.d, z7.d, #4                          
    WORD $0x042430e7 // and z7.d, z7.d, z4.d                        
    WORD $0x04243108 // and z8.d, z8.d, z4.d                        
    WORD $0x85814045 // ldr z5, [x2, #8, MUL VL]                    
    WORD $0x85814446 // ldr z6, [x2, #9, MUL VL]                    
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53000 // eor z0.d, z0.d, z5.d                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x85814845 // ldr z5, [x2, #10, MUL VL]                   
    WORD $0x85814c46 // ldr z6, [x2, #11, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53021 // eor z1.d, z1.d, z5.d                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    WORD $0x85815045 // ldr z5, [x2, #12, MUL VL]                   
    WORD $0x85815446 // ldr z6, [x2, #13, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53042 // eor z2.d, z2.d, z5.d                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x85815845 // ldr z5, [x2, #14, MUL VL]                   
    WORD $0x85815c46 // ldr z6, [x2, #15, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53063 // eor z3.d, z3.d, z5.d                        
    WORD $0x04a63063 // eor z3.d, z3.d, z6.d                        
    // Check for early termination
    CMP    $2, R16
    BEQ    mulSve_10x4_store

    // Load and process 32 bytes from input 2 to 4 outputs
    WORD $0x858040a7 // ldr z7, [x5]                                
    WORD $0x04255025 // addvl x5, x5, #1
    WORD $0x04fc94e8 // lsr z8.d, z7.d, #4                          
    WORD $0x042430e7 // and z7.d, z7.d, z4.d                        
    WORD $0x04243108 // and z8.d, z8.d, z4.d                        
    WORD $0x85824045 // ldr z5, [x2, #16, MUL VL]                   
    WORD $0x85824446 // ldr z6, [x2, #17, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53000 // eor z0.d, z0.d, z5.d                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x85824845 // ldr z5, [x2, #18, MUL VL]                   
    WORD $0x85824c46 // ldr z6, [x2, #19, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53021 // eor z1.d, z1.d, z5.d                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    WORD $0x85825045 // ldr z5, [x2, #20, MUL VL]                   
    WORD $0x85825446 // ldr z6, [x2, #21, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53042 // eor z2.d, z2.d, z5.d                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x85825845 // ldr z5, [x2, #22, MUL VL]                   
    WORD $0x85825c46 // ldr z6, [x2, #23, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53063 // eor z3.d, z3.d, z5.d                        
    WORD $0x04a63063 // eor z3.d, z3.d, z6.d                        
    // Check for early termination
    CMP    $3, R16
    BEQ    mulSve_10x4_store

    // Load and process 32 bytes from input 3 to 4 outputs
    WORD $0x85804107 // ldr z7, [x8]                                
    WORD $0x04285028 // addvl x8, x8, #1
    WORD $0x04fc94e8 // lsr z8.d, z7.d, #4                          
    WORD $0x042430e7 // and z7.d, z7.d, z4.d                        
    WORD $0x04243108 // and z8.d, z8.d, z4.d                        
    WORD $0x85834045 // ldr z5, [x2, #24, MUL VL]                   
    WORD $0x85834446 // ldr z6, [x2, #25, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53000 // eor z0.d, z0.d, z5.d                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x85834845 // ldr z5, [x2, #26, MUL VL]                   
    WORD $0x85834c46 // ldr z6, [x2, #27, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53021 // eor z1.d, z1.d, z5.d                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    WORD $0x85835045 // ldr z5, [x2, #28, MUL VL]                   
    WORD $0x85835446 // ldr z6, [x2, #29, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53042 // eor z2.d, z2.d, z5.d                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x85835845 // ldr z5, [x2, #30, MUL VL]                   
    WORD $0x85835c46 // ldr z6, [x2, #31, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53063 // eor z3.d, z3.d, z5.d                        
    WORD $0x04a63063 // eor z3.d, z3.d, z6.d                        
    // Check for early termination
    CMP    $4, R16
    BEQ    mulSve_10x4_store

    // Load and process 32 bytes from input 4 to 4 outputs
    WORD $0x85804127 // ldr z7, [x9]                                
    WORD $0x04295029 // addvl x9, x9, #1
    WORD $0x04fc94e8 // lsr z8.d, z7.d, #4                          
    WORD $0x042430e7 // and z7.d, z7.d, z4.d                        
    WORD $0x04243108 // and z8.d, z8.d, z4.d                        
    WORD $0x85844045 // ldr z5, [x2, #32, MUL VL]                   
    WORD $0x85844446 // ldr z6, [x2, #33, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53000 // eor z0.d, z0.d, z5.d                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x85844845 // ldr z5, [x2, #34, MUL VL]                   
    WORD $0x85844c46 // ldr z6, [x2, #35, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53021 // eor z1.d, z1.d, z5.d                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    WORD $0x85845045 // ldr z5, [x2, #36, MUL VL]                   
    WORD $0x85845446 // ldr z6, [x2, #37, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53042 // eor z2.d, z2.d, z5.d                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x85845845 // ldr z5, [x2, #38, MUL VL]                   
    WORD $0x85845c46 // ldr z6, [x2, #39, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53063 // eor z3.d, z3.d, z5.d                        
    WORD $0x04a63063 // eor z3.d, z3.d, z6.d                        
    // Check for early termination
    CMP    $5, R16
    BEQ    mulSve_10x4_store

    // Load and process 32 bytes from input 5 to 4 outputs
    WORD $0x85804147 // ldr z7, [x10]                               
    WORD $0x042a502a // addvl x10, x10, #1
    WORD $0x04fc94e8 // lsr z8.d, z7.d, #4                          
    WORD $0x042430e7 // and z7.d, z7.d, z4.d                        
    WORD $0x04243108 // and z8.d, z8.d, z4.d                        
    WORD $0x85854045 // ldr z5, [x2, #40, MUL VL]                   
    WORD $0x85854446 // ldr z6, [x2, #41, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53000 // eor z0.d, z0.d, z5.d                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x85854845 // ldr z5, [x2, #42, MUL VL]                   
    WORD $0x85854c46 // ldr z6, [x2, #43, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53021 // eor z1.d, z1.d, z5.d                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    WORD $0x85855045 // ldr z5, [x2, #44, MUL VL]                   
    WORD $0x85855446 // ldr z6, [x2, #45, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53042 // eor z2.d, z2.d, z5.d                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x85855845 // ldr z5, [x2, #46, MUL VL]                   
    WORD $0x85855c46 // ldr z6, [x2, #47, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53063 // eor z3.d, z3.d, z5.d                        
    WORD $0x04a63063 // eor z3.d, z3.d, z6.d                        
    // Check for early termination
    CMP    $6, R16
    BEQ    mulSve_10x4_store

    // Load and process 32 bytes from input 6 to 4 outputs
    WORD $0x85804167 // ldr z7, [x11]                               
    WORD $0x042b502b // addvl x11, x11, #1
    WORD $0x04fc94e8 // lsr z8.d, z7.d, #4                          
    WORD $0x042430e7 // and z7.d, z7.d, z4.d                        
    WORD $0x04243108 // and z8.d, z8.d, z4.d                        
    WORD $0x85864045 // ldr z5, [x2, #48, MUL VL]                   
    WORD $0x85864446 // ldr z6, [x2, #49, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53000 // eor z0.d, z0.d, z5.d                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x85864845 // ldr z5, [x2, #50, MUL VL]                   
    WORD $0x85864c46 // ldr z6, [x2, #51, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53021 // eor z1.d, z1.d, z5.d                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    WORD $0x85865045 // ldr z5, [x2, #52, MUL VL]                   
    WORD $0x85865446 // ldr z6, [x2, #53, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53042 // eor z2.d, z2.d, z5.d                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x85865845 // ldr z5, [x2, #54, MUL VL]                   
    WORD $0x85865c46 // ldr z6, [x2, #55, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53063 // eor z3.d, z3.d, z5.d                        
    WORD $0x04a63063 // eor z3.d, z3.d, z6.d                        
    // Check for early termination
    CMP    $7, R16
    BEQ    mulSve_10x4_store

    // Load and process 32 bytes from input 7 to 4 outputs
    WORD $0x85804187 // ldr z7, [x12]                               
    WORD $0x042c502c // addvl x12, x12, #1
    WORD $0x04fc94e8 // lsr z8.d, z7.d, #4                          
    WORD $0x042430e7 // and z7.d, z7.d, z4.d                        
    WORD $0x04243108 // and z8.d, z8.d, z4.d                        
    WORD $0x85874045 // ldr z5, [x2, #56, MUL VL]                   
    WORD $0x85874446 // ldr z6, [x2, #57, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53000 // eor z0.d, z0.d, z5.d                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x85874845 // ldr z5, [x2, #58, MUL VL]                   
    WORD $0x85874c46 // ldr z6, [x2, #59, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53021 // eor z1.d, z1.d, z5.d                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    WORD $0x85875045 // ldr z5, [x2, #60, MUL VL]                   
    WORD $0x85875446 // ldr z6, [x2, #61, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53042 // eor z2.d, z2.d, z5.d                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x85875845 // ldr z5, [x2, #62, MUL VL]                   
    WORD $0x85875c46 // ldr z6, [x2, #63, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53063 // eor z3.d, z3.d, z5.d                        
    WORD $0x04a63063 // eor z3.d, z3.d, z6.d                        
    // Check for early termination
    CMP    $8, R16
    BEQ    mulSve_10x4_store

    // Load and process 32 bytes from input 8 to 4 outputs
    WORD $0x858041a7 // ldr z7, [x13]                               
    WORD $0x042d502d // addvl x13, x13, #1
    WORD $0x04fc94e8 // lsr z8.d, z7.d, #4                          
    WORD $0x042430e7 // and z7.d, z7.d, z4.d                        
    WORD $0x04243108 // and z8.d, z8.d, z4.d                        
    WORD $0x85884045 // ldr z5, [x2, #64, MUL VL]                   
    WORD $0x85884446 // ldr z6, [x2, #65, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53000 // eor z0.d, z0.d, z5.d                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x85884845 // ldr z5, [x2, #66, MUL VL]                   
    WORD $0x85884c46 // ldr z6, [x2, #67, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53021 // eor z1.d, z1.d, z5.d                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    WORD $0x85885045 // ldr z5, [x2, #68, MUL VL]                   
    WORD $0x85885446 // ldr z6, [x2, #69, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53042 // eor z2.d, z2.d, z5.d                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x85885845 // ldr z5, [x2, #70, MUL VL]                   
    WORD $0x85885c46 // ldr z6, [x2, #71, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53063 // eor z3.d, z3.d, z5.d                        
    WORD $0x04a63063 // eor z3.d, z3.d, z6.d                        
    // Check for early termination
    CMP    $9, R16
    BEQ    mulSve_10x4_store

    // Load and process 32 bytes from input 9 to 4 outputs
    WORD $0x85804067 // ldr z7, [x3]                                
    WORD $0x04235023 // addvl x3, x3, #1
    WORD $0x04fc94e8 // lsr z8.d, z7.d, #4                          
    WORD $0x042430e7 // and z7.d, z7.d, z4.d                        
    WORD $0x04243108 // and z8.d, z8.d, z4.d                        
    WORD $0x85894045 // ldr z5, [x2, #72, MUL VL]                   
    WORD $0x85894446 // ldr z6, [x2, #73, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53000 // eor z0.d, z0.d, z5.d                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x85894845 // ldr z5, [x2, #74, MUL VL]                   
    WORD $0x85894c46 // ldr z6, [x2, #75, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53021 // eor z1.d, z1.d, z5.d                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    WORD $0x85895045 // ldr z5, [x2, #76, MUL VL]                   
    WORD $0x85895446 // ldr z6, [x2, #77, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53042 // eor z2.d, z2.d, z5.d                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x85895845 // ldr z5, [x2, #78, MUL VL]                   
    WORD $0x85895c46 // ldr z6, [x2, #79, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53063 // eor z3.d, z3.d, z5.d                        
    WORD $0x04a63063 // eor z3.d, z3.d, z6.d                        

mulSve_10x4_store:
    // Store 4 outputs
    MOVD (R14), R6
    WORD $0xe5ef40c0 // st1d { z0.d }, p0, [x6, x15, lsl #3]        
    MOVD 24(R14), R6
    WORD $0xe5ef40c1 // st1d { z1.d }, p0, [x6, x15, lsl #3]        
    MOVD 48(R14), R6
    WORD $0xe5ef40c2 // st1d { z2.d }, p0, [x6, x15, lsl #3]        
    MOVD 72(R14), R6
    WORD $0xe5ef40c3 // st1d { z3.d }, p0, [x6, x15, lsl #3]        

    // Prepare for next loop
    WORD $0x8b1101ef // add x15, x15, x17
    WORD $0xf1000400 // subs x0, x0, #1                             
    BNE  mulSve_10x4_loop

mulSve_10x4_end:
    RET

// func mulSve_10x4Xor(matrix []byte, in [][]byte, out [][]byte, start int, n int)
// Requires: SVE
TEXT Â·mulSve_10x4Xor(SB), NOSPLIT, $8-88
    WORD $0x25d8e3e0 // ptrue p0.d
    // Loading no tables to registers
    // Destination kept on stack
    // Full registers estimated 89 YMM used
    MOVD n+80(FP), R0
    MOVD matrix_base+0(FP), R2
    WORD $0xd345fc00 // lsr x0, x0, #5                              
    WORD $0xd37be800 // lsl x0, x0, #5
    WORD $0x04bf5030 // rdvl x16, #1
    WORD $0x9ad00800 // udiv x0, x0, x16
    WORD $0xea00001f // tst x0, x0                                  
    BEQ    mulSve_10x4Xor_end
    MOVD in_base+24(FP), R3
    MOVD (R3), R1
    MOVD 24(R3), R4
    MOVD 48(R3), R5
    MOVD 72(R3), R8
    MOVD 96(R3), R9
    MOVD 120(R3), R10
    MOVD 144(R3), R11
    MOVD 168(R3), R12
    MOVD 192(R3), R13
    MOVD 216(R3), R3
    MOVD out_base+48(FP), R14
    MOVD start+72(FP), R15

    // Add start offset to input
    WORD $0x8b0f0021 // add x1, x1, x15                             
    WORD $0x8b0f0084 // add x4, x4, x15                             
    WORD $0x8b0f00a5 // add x5, x5, x15                             
    WORD $0x8b0f0108 // add x8, x8, x15                             
    WORD $0x8b0f0129 // add x9, x9, x15                             
    WORD $0x8b0f014a // add x10, x10, x15                           
    WORD $0x8b0f016b // add x11, x11, x15                           
    WORD $0x8b0f018c // add x12, x12, x15                           
    WORD $0x8b0f01ad // add x13, x13, x15                           
    WORD $0x8b0f0063 // add x3, x3, x15                             
    WORD $0xd343fdef // lsr x15, x15, #3                            
    WORD $0xd28001e6 // mov x6, #15                                 
    WORD $0x05e038c4 // mov z4.d, x6                                
    WORD $0x05212084 // dup z4.b, z4.b[0]                           

    // Load number of input shards
    MOVD   in_len+32(FP), R16
    WORD $0x04bf5031 // rdvl x17, #1
    WORD $0xd343fe31 // lsr  x17, x17, #3

mulSve_10x4Xor_loop:
    // Load and process 32 bytes from input 0 to 4 outputs
    WORD $0x85804027 // ldr z7, [x1]                                
    WORD $0x04215021 // addvl x1, x1, #1
    WORD $0x04fc94e8 // lsr z8.d, z7.d, #4                          
    WORD $0x042430e7 // and z7.d, z7.d, z4.d                        
    WORD $0x04243108 // and z8.d, z8.d, z4.d                        
    MOVD (R14), R6
    WORD $0xa5ef40c0 // ld1d { z0.d }, p0/z, [x6, x15, lsl #3]      
    WORD $0x85804045 // ldr z5, [x2]                                
    WORD $0x85804446 // ldr z6, [x2, #1, MUL VL]                    
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53000 // eor z0.d, z0.d, z5.d                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    MOVD 24(R14), R6
    WORD $0xa5ef40c1 // ld1d { z1.d }, p0/z, [x6, x15, lsl #3]      
    WORD $0x85804845 // ldr z5, [x2, #2, MUL VL]                    
    WORD $0x85804c46 // ldr z6, [x2, #3, MUL VL]                    
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53021 // eor z1.d, z1.d, z5.d                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    MOVD 48(R14), R6
    WORD $0xa5ef40c2 // ld1d { z2.d }, p0/z, [x6, x15, lsl #3]      
    WORD $0x85805045 // ldr z5, [x2, #4, MUL VL]                    
    WORD $0x85805446 // ldr z6, [x2, #5, MUL VL]                    
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53042 // eor z2.d, z2.d, z5.d                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    MOVD 72(R14), R6
    WORD $0xa5ef40c3 // ld1d { z3.d }, p0/z, [x6, x15, lsl #3]      
    WORD $0x85805845 // ldr z5, [x2, #6, MUL VL]                    
    WORD $0x85805c46 // ldr z6, [x2, #7, MUL VL]                    
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53063 // eor z3.d, z3.d, z5.d                        
    WORD $0x04a63063 // eor z3.d, z3.d, z6.d                        
    // Check for early termination
    CMP    $1, R16
    BEQ    mulSve_10x4Xor_store

    // Load and process 32 bytes from input 1 to 4 outputs
    WORD $0x85804087 // ldr z7, [x4]                                
    WORD $0x04245024 // addvl x4, x4, #1
    WORD $0x04fc94e8 // lsr z8.d, z7.d, #4                          
    WORD $0x042430e7 // and z7.d, z7.d, z4.d                        
    WORD $0x04243108 // and z8.d, z8.d, z4.d                        
    WORD $0x85814045 // ldr z5, [x2, #8, MUL VL]                    
    WORD $0x85814446 // ldr z6, [x2, #9, MUL VL]                    
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53000 // eor z0.d, z0.d, z5.d                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x85814845 // ldr z5, [x2, #10, MUL VL]                   
    WORD $0x85814c46 // ldr z6, [x2, #11, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53021 // eor z1.d, z1.d, z5.d                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    WORD $0x85815045 // ldr z5, [x2, #12, MUL VL]                   
    WORD $0x85815446 // ldr z6, [x2, #13, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53042 // eor z2.d, z2.d, z5.d                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x85815845 // ldr z5, [x2, #14, MUL VL]                   
    WORD $0x85815c46 // ldr z6, [x2, #15, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53063 // eor z3.d, z3.d, z5.d                        
    WORD $0x04a63063 // eor z3.d, z3.d, z6.d                        
    // Check for early termination
    CMP    $2, R16
    BEQ    mulSve_10x4Xor_store

    // Load and process 32 bytes from input 2 to 4 outputs
    WORD $0x858040a7 // ldr z7, [x5]                                
    WORD $0x04255025 // addvl x5, x5, #1
    WORD $0x04fc94e8 // lsr z8.d, z7.d, #4                          
    WORD $0x042430e7 // and z7.d, z7.d, z4.d                        
    WORD $0x04243108 // and z8.d, z8.d, z4.d                        
    WORD $0x85824045 // ldr z5, [x2, #16, MUL VL]                   
    WORD $0x85824446 // ldr z6, [x2, #17, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53000 // eor z0.d, z0.d, z5.d                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x85824845 // ldr z5, [x2, #18, MUL VL]                   
    WORD $0x85824c46 // ldr z6, [x2, #19, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53021 // eor z1.d, z1.d, z5.d                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    WORD $0x85825045 // ldr z5, [x2, #20, MUL VL]                   
    WORD $0x85825446 // ldr z6, [x2, #21, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53042 // eor z2.d, z2.d, z5.d                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x85825845 // ldr z5, [x2, #22, MUL VL]                   
    WORD $0x85825c46 // ldr z6, [x2, #23, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53063 // eor z3.d, z3.d, z5.d                        
    WORD $0x04a63063 // eor z3.d, z3.d, z6.d                        
    // Check for early termination
    CMP    $3, R16
    BEQ    mulSve_10x4Xor_store

    // Load and process 32 bytes from input 3 to 4 outputs
    WORD $0x85804107 // ldr z7, [x8]                                
    WORD $0x04285028 // addvl x8, x8, #1
    WORD $0x04fc94e8 // lsr z8.d, z7.d, #4                          
    WORD $0x042430e7 // and z7.d, z7.d, z4.d                        
    WORD $0x04243108 // and z8.d, z8.d, z4.d                        
    WORD $0x85834045 // ldr z5, [x2, #24, MUL VL]                   
    WORD $0x85834446 // ldr z6, [x2, #25, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53000 // eor z0.d, z0.d, z5.d                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x85834845 // ldr z5, [x2, #26, MUL VL]                   
    WORD $0x85834c46 // ldr z6, [x2, #27, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53021 // eor z1.d, z1.d, z5.d                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    WORD $0x85835045 // ldr z5, [x2, #28, MUL VL]                   
    WORD $0x85835446 // ldr z6, [x2, #29, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53042 // eor z2.d, z2.d, z5.d                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x85835845 // ldr z5, [x2, #30, MUL VL]                   
    WORD $0x85835c46 // ldr z6, [x2, #31, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53063 // eor z3.d, z3.d, z5.d                        
    WORD $0x04a63063 // eor z3.d, z3.d, z6.d                        
    // Check for early termination
    CMP    $4, R16
    BEQ    mulSve_10x4Xor_store

    // Load and process 32 bytes from input 4 to 4 outputs
    WORD $0x85804127 // ldr z7, [x9]                                
    WORD $0x04295029 // addvl x9, x9, #1
    WORD $0x04fc94e8 // lsr z8.d, z7.d, #4                          
    WORD $0x042430e7 // and z7.d, z7.d, z4.d                        
    WORD $0x04243108 // and z8.d, z8.d, z4.d                        
    WORD $0x85844045 // ldr z5, [x2, #32, MUL VL]                   
    WORD $0x85844446 // ldr z6, [x2, #33, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53000 // eor z0.d, z0.d, z5.d                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x85844845 // ldr z5, [x2, #34, MUL VL]                   
    WORD $0x85844c46 // ldr z6, [x2, #35, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53021 // eor z1.d, z1.d, z5.d                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    WORD $0x85845045 // ldr z5, [x2, #36, MUL VL]                   
    WORD $0x85845446 // ldr z6, [x2, #37, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53042 // eor z2.d, z2.d, z5.d                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x85845845 // ldr z5, [x2, #38, MUL VL]                   
    WORD $0x85845c46 // ldr z6, [x2, #39, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53063 // eor z3.d, z3.d, z5.d                        
    WORD $0x04a63063 // eor z3.d, z3.d, z6.d                        
    // Check for early termination
    CMP    $5, R16
    BEQ    mulSve_10x4Xor_store

    // Load and process 32 bytes from input 5 to 4 outputs
    WORD $0x85804147 // ldr z7, [x10]                               
    WORD $0x042a502a // addvl x10, x10, #1
    WORD $0x04fc94e8 // lsr z8.d, z7.d, #4                          
    WORD $0x042430e7 // and z7.d, z7.d, z4.d                        
    WORD $0x04243108 // and z8.d, z8.d, z4.d                        
    WORD $0x85854045 // ldr z5, [x2, #40, MUL VL]                   
    WORD $0x85854446 // ldr z6, [x2, #41, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53000 // eor z0.d, z0.d, z5.d                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x85854845 // ldr z5, [x2, #42, MUL VL]                   
    WORD $0x85854c46 // ldr z6, [x2, #43, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53021 // eor z1.d, z1.d, z5.d                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    WORD $0x85855045 // ldr z5, [x2, #44, MUL VL]                   
    WORD $0x85855446 // ldr z6, [x2, #45, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53042 // eor z2.d, z2.d, z5.d                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x85855845 // ldr z5, [x2, #46, MUL VL]                   
    WORD $0x85855c46 // ldr z6, [x2, #47, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53063 // eor z3.d, z3.d, z5.d                        
    WORD $0x04a63063 // eor z3.d, z3.d, z6.d                        
    // Check for early termination
    CMP    $6, R16
    BEQ    mulSve_10x4Xor_store

    // Load and process 32 bytes from input 6 to 4 outputs
    WORD $0x85804167 // ldr z7, [x11]                               
    WORD $0x042b502b // addvl x11, x11, #1
    WORD $0x04fc94e8 // lsr z8.d, z7.d, #4                          
    WORD $0x042430e7 // and z7.d, z7.d, z4.d                        
    WORD $0x04243108 // and z8.d, z8.d, z4.d                        
    WORD $0x85864045 // ldr z5, [x2, #48, MUL VL]                   
    WORD $0x85864446 // ldr z6, [x2, #49, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53000 // eor z0.d, z0.d, z5.d                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x85864845 // ldr z5, [x2, #50, MUL VL]                   
    WORD $0x85864c46 // ldr z6, [x2, #51, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53021 // eor z1.d, z1.d, z5.d                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    WORD $0x85865045 // ldr z5, [x2, #52, MUL VL]                   
    WORD $0x85865446 // ldr z6, [x2, #53, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53042 // eor z2.d, z2.d, z5.d                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x85865845 // ldr z5, [x2, #54, MUL VL]                   
    WORD $0x85865c46 // ldr z6, [x2, #55, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53063 // eor z3.d, z3.d, z5.d                        
    WORD $0x04a63063 // eor z3.d, z3.d, z6.d                        
    // Check for early termination
    CMP    $7, R16
    BEQ    mulSve_10x4Xor_store

    // Load and process 32 bytes from input 7 to 4 outputs
    WORD $0x85804187 // ldr z7, [x12]                               
    WORD $0x042c502c // addvl x12, x12, #1
    WORD $0x04fc94e8 // lsr z8.d, z7.d, #4                          
    WORD $0x042430e7 // and z7.d, z7.d, z4.d                        
    WORD $0x04243108 // and z8.d, z8.d, z4.d                        
    WORD $0x85874045 // ldr z5, [x2, #56, MUL VL]                   
    WORD $0x85874446 // ldr z6, [x2, #57, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53000 // eor z0.d, z0.d, z5.d                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x85874845 // ldr z5, [x2, #58, MUL VL]                   
    WORD $0x85874c46 // ldr z6, [x2, #59, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53021 // eor z1.d, z1.d, z5.d                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    WORD $0x85875045 // ldr z5, [x2, #60, MUL VL]                   
    WORD $0x85875446 // ldr z6, [x2, #61, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53042 // eor z2.d, z2.d, z5.d                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x85875845 // ldr z5, [x2, #62, MUL VL]                   
    WORD $0x85875c46 // ldr z6, [x2, #63, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53063 // eor z3.d, z3.d, z5.d                        
    WORD $0x04a63063 // eor z3.d, z3.d, z6.d                        
    // Check for early termination
    CMP    $8, R16
    BEQ    mulSve_10x4Xor_store

    // Load and process 32 bytes from input 8 to 4 outputs
    WORD $0x858041a7 // ldr z7, [x13]                               
    WORD $0x042d502d // addvl x13, x13, #1
    WORD $0x04fc94e8 // lsr z8.d, z7.d, #4                          
    WORD $0x042430e7 // and z7.d, z7.d, z4.d                        
    WORD $0x04243108 // and z8.d, z8.d, z4.d                        
    WORD $0x85884045 // ldr z5, [x2, #64, MUL VL]                   
    WORD $0x85884446 // ldr z6, [x2, #65, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53000 // eor z0.d, z0.d, z5.d                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x85884845 // ldr z5, [x2, #66, MUL VL]                   
    WORD $0x85884c46 // ldr z6, [x2, #67, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53021 // eor z1.d, z1.d, z5.d                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    WORD $0x85885045 // ldr z5, [x2, #68, MUL VL]                   
    WORD $0x85885446 // ldr z6, [x2, #69, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53042 // eor z2.d, z2.d, z5.d                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x85885845 // ldr z5, [x2, #70, MUL VL]                   
    WORD $0x85885c46 // ldr z6, [x2, #71, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53063 // eor z3.d, z3.d, z5.d                        
    WORD $0x04a63063 // eor z3.d, z3.d, z6.d                        
    // Check for early termination
    CMP    $9, R16
    BEQ    mulSve_10x4Xor_store

    // Load and process 32 bytes from input 9 to 4 outputs
    WORD $0x85804067 // ldr z7, [x3]                                
    WORD $0x04235023 // addvl x3, x3, #1
    WORD $0x04fc94e8 // lsr z8.d, z7.d, #4                          
    WORD $0x042430e7 // and z7.d, z7.d, z4.d                        
    WORD $0x04243108 // and z8.d, z8.d, z4.d                        
    WORD $0x85894045 // ldr z5, [x2, #72, MUL VL]                   
    WORD $0x85894446 // ldr z6, [x2, #73, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53000 // eor z0.d, z0.d, z5.d                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x85894845 // ldr z5, [x2, #74, MUL VL]                   
    WORD $0x85894c46 // ldr z6, [x2, #75, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53021 // eor z1.d, z1.d, z5.d                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    WORD $0x85895045 // ldr z5, [x2, #76, MUL VL]                   
    WORD $0x85895446 // ldr z6, [x2, #77, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53042 // eor z2.d, z2.d, z5.d                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x85895845 // ldr z5, [x2, #78, MUL VL]                   
    WORD $0x85895c46 // ldr z6, [x2, #79, MUL VL]                   
    WORD $0x052730a5 // tbl z5.b, z5.b, z7.b                        
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x04a53063 // eor z3.d, z3.d, z5.d                        
    WORD $0x04a63063 // eor z3.d, z3.d, z6.d                        

mulSve_10x4Xor_store:
    // Store 4 outputs
    MOVD (R14), R6
    WORD $0xe5ef40c0 // st1d { z0.d }, p0, [x6, x15, lsl #3]        
    MOVD 24(R14), R6
    WORD $0xe5ef40c1 // st1d { z1.d }, p0, [x6, x15, lsl #3]        
    MOVD 48(R14), R6
    WORD $0xe5ef40c2 // st1d { z2.d }, p0, [x6, x15, lsl #3]        
    MOVD 72(R14), R6
    WORD $0xe5ef40c3 // st1d { z3.d }, p0, [x6, x15, lsl #3]        

    // Prepare for next loop
    WORD $0x8b1101ef // add x15, x15, x17
    WORD $0xf1000400 // subs x0, x0, #1                             
    BNE  mulSve_10x4Xor_loop

mulSve_10x4Xor_end:
    RET

// func mulSve_10x5(matrix []byte, in [][]byte, out [][]byte, start int, n int)
// Requires: SVE
TEXT Â·mulSve_10x5(SB), NOSPLIT, $8-88
    WORD $0x25d8e3e0 // ptrue p0.d
    // Loading no tables to registers
    // Destination kept on stack
    // Full registers estimated 110 YMM used
    MOVD n+80(FP), R0
    MOVD matrix_base+0(FP), R2
    WORD $0xd345fc00 // lsr x0, x0, #5                              
    WORD $0xd37be800 // lsl x0, x0, #5
    WORD $0x04bf5030 // rdvl x16, #1
    WORD $0x9ad00800 // udiv x0, x0, x16
    WORD $0xea00001f // tst x0, x0                                  
    BEQ    mulSve_10x5_end
    MOVD in_base+24(FP), R3
    MOVD (R3), R1
    MOVD 24(R3), R4
    MOVD 48(R3), R5
    MOVD 72(R3), R8
    MOVD 96(R3), R9
    MOVD 120(R3), R10
    MOVD 144(R3), R11
    MOVD 168(R3), R12
    MOVD 192(R3), R13
    MOVD 216(R3), R3
    MOVD out_base+48(FP), R14
    MOVD start+72(FP), R15

    // Add start offset to input
    WORD $0x8b0f0021 // add x1, x1, x15                             
    WORD $0x8b0f0084 // add x4, x4, x15                             
    WORD $0x8b0f00a5 // add x5, x5, x15                             
    WORD $0x8b0f0108 // add x8, x8, x15                             
    WORD $0x8b0f0129 // add x9, x9, x15                             
    WORD $0x8b0f014a // add x10, x10, x15                           
    WORD $0x8b0f016b // add x11, x11, x15                           
    WORD $0x8b0f018c // add x12, x12, x15                           
    WORD $0x8b0f01ad // add x13, x13, x15                           
    WORD $0x8b0f0063 // add x3, x3, x15                             
    WORD $0xd343fdef // lsr x15, x15, #3                            
    WORD $0xd28001e6 // mov x6, #15                                 
    WORD $0x05e038c5 // mov z5.d, x6                                
    WORD $0x052120a5 // dup z5.b, z5.b[0]                           

    // Load number of input shards
    MOVD   in_len+32(FP), R16
    WORD $0x04bf5031 // rdvl x17, #1
    WORD $0xd343fe31 // lsr  x17, x17, #3

mulSve_10x5_loop:
    // Load and process 32 bytes from input 0 to 5 outputs
    WORD $0x85804028 // ldr z8, [x1]                                
    WORD $0x04215021 // addvl x1, x1, #1
    WORD $0x04fc9509 // lsr z9.d, z8.d, #4                          
    WORD $0x04253108 // and z8.d, z8.d, z5.d                        
    WORD $0x04253129 // and z9.d, z9.d, z5.d                        
    WORD $0x85804046 // ldr z6, [x2]                                
    WORD $0x85804447 // ldr z7, [x2, #1, MUL VL]                    
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a630e0 // eor z0.d, z7.d, z6.d                        
    WORD $0x85804846 // ldr z6, [x2, #2, MUL VL]                    
    WORD $0x85804c47 // ldr z7, [x2, #3, MUL VL]                    
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a630e1 // eor z1.d, z7.d, z6.d                        
    WORD $0x85805046 // ldr z6, [x2, #4, MUL VL]                    
    WORD $0x85805447 // ldr z7, [x2, #5, MUL VL]                    
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a630e2 // eor z2.d, z7.d, z6.d                        
    WORD $0x85805846 // ldr z6, [x2, #6, MUL VL]                    
    WORD $0x85805c47 // ldr z7, [x2, #7, MUL VL]                    
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a630e3 // eor z3.d, z7.d, z6.d                        
    WORD $0x85814046 // ldr z6, [x2, #8, MUL VL]                    
    WORD $0x85814447 // ldr z7, [x2, #9, MUL VL]                    
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a630e4 // eor z4.d, z7.d, z6.d                        
    // Check for early termination
    CMP    $1, R16
    BEQ    mulSve_10x5_store

    // Load and process 32 bytes from input 1 to 5 outputs
    WORD $0x85804088 // ldr z8, [x4]                                
    WORD $0x04245024 // addvl x4, x4, #1
    WORD $0x04fc9509 // lsr z9.d, z8.d, #4                          
    WORD $0x04253108 // and z8.d, z8.d, z5.d                        
    WORD $0x04253129 // and z9.d, z9.d, z5.d                        
    WORD $0x85814846 // ldr z6, [x2, #10, MUL VL]                   
    WORD $0x85814c47 // ldr z7, [x2, #11, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x85815046 // ldr z6, [x2, #12, MUL VL]                   
    WORD $0x85815447 // ldr z7, [x2, #13, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x85815846 // ldr z6, [x2, #14, MUL VL]                   
    WORD $0x85815c47 // ldr z7, [x2, #15, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x85824046 // ldr z6, [x2, #16, MUL VL]                   
    WORD $0x85824447 // ldr z7, [x2, #17, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63063 // eor z3.d, z3.d, z6.d                        
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x85824846 // ldr z6, [x2, #18, MUL VL]                   
    WORD $0x85824c47 // ldr z7, [x2, #19, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63084 // eor z4.d, z4.d, z6.d                        
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    // Check for early termination
    CMP    $2, R16
    BEQ    mulSve_10x5_store

    // Load and process 32 bytes from input 2 to 5 outputs
    WORD $0x858040a8 // ldr z8, [x5]                                
    WORD $0x04255025 // addvl x5, x5, #1
    WORD $0x04fc9509 // lsr z9.d, z8.d, #4                          
    WORD $0x04253108 // and z8.d, z8.d, z5.d                        
    WORD $0x04253129 // and z9.d, z9.d, z5.d                        
    WORD $0x85825046 // ldr z6, [x2, #20, MUL VL]                   
    WORD $0x85825447 // ldr z7, [x2, #21, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x85825846 // ldr z6, [x2, #22, MUL VL]                   
    WORD $0x85825c47 // ldr z7, [x2, #23, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x85834046 // ldr z6, [x2, #24, MUL VL]                   
    WORD $0x85834447 // ldr z7, [x2, #25, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x85834846 // ldr z6, [x2, #26, MUL VL]                   
    WORD $0x85834c47 // ldr z7, [x2, #27, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63063 // eor z3.d, z3.d, z6.d                        
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x85835046 // ldr z6, [x2, #28, MUL VL]                   
    WORD $0x85835447 // ldr z7, [x2, #29, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63084 // eor z4.d, z4.d, z6.d                        
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    // Check for early termination
    CMP    $3, R16
    BEQ    mulSve_10x5_store

    // Load and process 32 bytes from input 3 to 5 outputs
    WORD $0x85804108 // ldr z8, [x8]                                
    WORD $0x04285028 // addvl x8, x8, #1
    WORD $0x04fc9509 // lsr z9.d, z8.d, #4                          
    WORD $0x04253108 // and z8.d, z8.d, z5.d                        
    WORD $0x04253129 // and z9.d, z9.d, z5.d                        
    WORD $0x85835846 // ldr z6, [x2, #30, MUL VL]                   
    WORD $0x85835c47 // ldr z7, [x2, #31, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x85844046 // ldr z6, [x2, #32, MUL VL]                   
    WORD $0x85844447 // ldr z7, [x2, #33, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x85844846 // ldr z6, [x2, #34, MUL VL]                   
    WORD $0x85844c47 // ldr z7, [x2, #35, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x85845046 // ldr z6, [x2, #36, MUL VL]                   
    WORD $0x85845447 // ldr z7, [x2, #37, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63063 // eor z3.d, z3.d, z6.d                        
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x85845846 // ldr z6, [x2, #38, MUL VL]                   
    WORD $0x85845c47 // ldr z7, [x2, #39, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63084 // eor z4.d, z4.d, z6.d                        
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    // Check for early termination
    CMP    $4, R16
    BEQ    mulSve_10x5_store

    // Load and process 32 bytes from input 4 to 5 outputs
    WORD $0x85804128 // ldr z8, [x9]                                
    WORD $0x04295029 // addvl x9, x9, #1
    WORD $0x04fc9509 // lsr z9.d, z8.d, #4                          
    WORD $0x04253108 // and z8.d, z8.d, z5.d                        
    WORD $0x04253129 // and z9.d, z9.d, z5.d                        
    WORD $0x85854046 // ldr z6, [x2, #40, MUL VL]                   
    WORD $0x85854447 // ldr z7, [x2, #41, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x85854846 // ldr z6, [x2, #42, MUL VL]                   
    WORD $0x85854c47 // ldr z7, [x2, #43, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x85855046 // ldr z6, [x2, #44, MUL VL]                   
    WORD $0x85855447 // ldr z7, [x2, #45, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x85855846 // ldr z6, [x2, #46, MUL VL]                   
    WORD $0x85855c47 // ldr z7, [x2, #47, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63063 // eor z3.d, z3.d, z6.d                        
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x85864046 // ldr z6, [x2, #48, MUL VL]                   
    WORD $0x85864447 // ldr z7, [x2, #49, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63084 // eor z4.d, z4.d, z6.d                        
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    // Check for early termination
    CMP    $5, R16
    BEQ    mulSve_10x5_store

    // Load and process 32 bytes from input 5 to 5 outputs
    WORD $0x85804148 // ldr z8, [x10]                               
    WORD $0x042a502a // addvl x10, x10, #1
    WORD $0x04fc9509 // lsr z9.d, z8.d, #4                          
    WORD $0x04253108 // and z8.d, z8.d, z5.d                        
    WORD $0x04253129 // and z9.d, z9.d, z5.d                        
    WORD $0x85864846 // ldr z6, [x2, #50, MUL VL]                   
    WORD $0x85864c47 // ldr z7, [x2, #51, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x85865046 // ldr z6, [x2, #52, MUL VL]                   
    WORD $0x85865447 // ldr z7, [x2, #53, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x85865846 // ldr z6, [x2, #54, MUL VL]                   
    WORD $0x85865c47 // ldr z7, [x2, #55, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x85874046 // ldr z6, [x2, #56, MUL VL]                   
    WORD $0x85874447 // ldr z7, [x2, #57, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63063 // eor z3.d, z3.d, z6.d                        
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x85874846 // ldr z6, [x2, #58, MUL VL]                   
    WORD $0x85874c47 // ldr z7, [x2, #59, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63084 // eor z4.d, z4.d, z6.d                        
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    // Check for early termination
    CMP    $6, R16
    BEQ    mulSve_10x5_store

    // Load and process 32 bytes from input 6 to 5 outputs
    WORD $0x85804168 // ldr z8, [x11]                               
    WORD $0x042b502b // addvl x11, x11, #1
    WORD $0x04fc9509 // lsr z9.d, z8.d, #4                          
    WORD $0x04253108 // and z8.d, z8.d, z5.d                        
    WORD $0x04253129 // and z9.d, z9.d, z5.d                        
    WORD $0x85875046 // ldr z6, [x2, #60, MUL VL]                   
    WORD $0x85875447 // ldr z7, [x2, #61, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x85875846 // ldr z6, [x2, #62, MUL VL]                   
    WORD $0x85875c47 // ldr z7, [x2, #63, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x85884046 // ldr z6, [x2, #64, MUL VL]                   
    WORD $0x85884447 // ldr z7, [x2, #65, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x85884846 // ldr z6, [x2, #66, MUL VL]                   
    WORD $0x85884c47 // ldr z7, [x2, #67, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63063 // eor z3.d, z3.d, z6.d                        
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x85885046 // ldr z6, [x2, #68, MUL VL]                   
    WORD $0x85885447 // ldr z7, [x2, #69, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63084 // eor z4.d, z4.d, z6.d                        
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    // Check for early termination
    CMP    $7, R16
    BEQ    mulSve_10x5_store

    // Load and process 32 bytes from input 7 to 5 outputs
    WORD $0x85804188 // ldr z8, [x12]                               
    WORD $0x042c502c // addvl x12, x12, #1
    WORD $0x04fc9509 // lsr z9.d, z8.d, #4                          
    WORD $0x04253108 // and z8.d, z8.d, z5.d                        
    WORD $0x04253129 // and z9.d, z9.d, z5.d                        
    WORD $0x85885846 // ldr z6, [x2, #70, MUL VL]                   
    WORD $0x85885c47 // ldr z7, [x2, #71, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x85894046 // ldr z6, [x2, #72, MUL VL]                   
    WORD $0x85894447 // ldr z7, [x2, #73, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x85894846 // ldr z6, [x2, #74, MUL VL]                   
    WORD $0x85894c47 // ldr z7, [x2, #75, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x85895046 // ldr z6, [x2, #76, MUL VL]                   
    WORD $0x85895447 // ldr z7, [x2, #77, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63063 // eor z3.d, z3.d, z6.d                        
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x85895846 // ldr z6, [x2, #78, MUL VL]                   
    WORD $0x85895c47 // ldr z7, [x2, #79, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63084 // eor z4.d, z4.d, z6.d                        
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    // Check for early termination
    CMP    $8, R16
    BEQ    mulSve_10x5_store

    // Load and process 32 bytes from input 8 to 5 outputs
    WORD $0x858041a8 // ldr z8, [x13]                               
    WORD $0x042d502d // addvl x13, x13, #1
    WORD $0x04fc9509 // lsr z9.d, z8.d, #4                          
    WORD $0x04253108 // and z8.d, z8.d, z5.d                        
    WORD $0x04253129 // and z9.d, z9.d, z5.d                        
    WORD $0x858a4046 // ldr z6, [x2, #80, MUL VL]                   
    WORD $0x858a4447 // ldr z7, [x2, #81, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x858a4846 // ldr z6, [x2, #82, MUL VL]                   
    WORD $0x858a4c47 // ldr z7, [x2, #83, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x858a5046 // ldr z6, [x2, #84, MUL VL]                   
    WORD $0x858a5447 // ldr z7, [x2, #85, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x858a5846 // ldr z6, [x2, #86, MUL VL]                   
    WORD $0x858a5c47 // ldr z7, [x2, #87, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63063 // eor z3.d, z3.d, z6.d                        
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x858b4046 // ldr z6, [x2, #88, MUL VL]                   
    WORD $0x858b4447 // ldr z7, [x2, #89, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63084 // eor z4.d, z4.d, z6.d                        
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    // Check for early termination
    CMP    $9, R16
    BEQ    mulSve_10x5_store

    // Load and process 32 bytes from input 9 to 5 outputs
    WORD $0x85804068 // ldr z8, [x3]                                
    WORD $0x04235023 // addvl x3, x3, #1
    WORD $0x04fc9509 // lsr z9.d, z8.d, #4                          
    WORD $0x04253108 // and z8.d, z8.d, z5.d                        
    WORD $0x04253129 // and z9.d, z9.d, z5.d                        
    WORD $0x858b4846 // ldr z6, [x2, #90, MUL VL]                   
    WORD $0x858b4c47 // ldr z7, [x2, #91, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x858b5046 // ldr z6, [x2, #92, MUL VL]                   
    WORD $0x858b5447 // ldr z7, [x2, #93, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x858b5846 // ldr z6, [x2, #94, MUL VL]                   
    WORD $0x858b5c47 // ldr z7, [x2, #95, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x858c4046 // ldr z6, [x2, #96, MUL VL]                   
    WORD $0x858c4447 // ldr z7, [x2, #97, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63063 // eor z3.d, z3.d, z6.d                        
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x858c4846 // ldr z6, [x2, #98, MUL VL]                   
    WORD $0x858c4c47 // ldr z7, [x2, #99, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63084 // eor z4.d, z4.d, z6.d                        
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        

mulSve_10x5_store:
    // Store 5 outputs
    MOVD (R14), R6
    WORD $0xe5ef40c0 // st1d { z0.d }, p0, [x6, x15, lsl #3]        
    MOVD 24(R14), R6
    WORD $0xe5ef40c1 // st1d { z1.d }, p0, [x6, x15, lsl #3]        
    MOVD 48(R14), R6
    WORD $0xe5ef40c2 // st1d { z2.d }, p0, [x6, x15, lsl #3]        
    MOVD 72(R14), R6
    WORD $0xe5ef40c3 // st1d { z3.d }, p0, [x6, x15, lsl #3]        
    MOVD 96(R14), R6
    WORD $0xe5ef40c4 // st1d { z4.d }, p0, [x6, x15, lsl #3]        

    // Prepare for next loop
    WORD $0x8b1101ef // add x15, x15, x17
    WORD $0xf1000400 // subs x0, x0, #1                             
    BNE  mulSve_10x5_loop

mulSve_10x5_end:
    RET

// func mulSve_10x5Xor(matrix []byte, in [][]byte, out [][]byte, start int, n int)
// Requires: SVE
TEXT Â·mulSve_10x5Xor(SB), NOSPLIT, $8-88
    WORD $0x25d8e3e0 // ptrue p0.d
    // Loading no tables to registers
    // Destination kept on stack
    // Full registers estimated 110 YMM used
    MOVD n+80(FP), R0
    MOVD matrix_base+0(FP), R2
    WORD $0xd345fc00 // lsr x0, x0, #5                              
    WORD $0xd37be800 // lsl x0, x0, #5
    WORD $0x04bf5030 // rdvl x16, #1
    WORD $0x9ad00800 // udiv x0, x0, x16
    WORD $0xea00001f // tst x0, x0                                  
    BEQ    mulSve_10x5Xor_end
    MOVD in_base+24(FP), R3
    MOVD (R3), R1
    MOVD 24(R3), R4
    MOVD 48(R3), R5
    MOVD 72(R3), R8
    MOVD 96(R3), R9
    MOVD 120(R3), R10
    MOVD 144(R3), R11
    MOVD 168(R3), R12
    MOVD 192(R3), R13
    MOVD 216(R3), R3
    MOVD out_base+48(FP), R14
    MOVD start+72(FP), R15

    // Add start offset to input
    WORD $0x8b0f0021 // add x1, x1, x15                             
    WORD $0x8b0f0084 // add x4, x4, x15                             
    WORD $0x8b0f00a5 // add x5, x5, x15                             
    WORD $0x8b0f0108 // add x8, x8, x15                             
    WORD $0x8b0f0129 // add x9, x9, x15                             
    WORD $0x8b0f014a // add x10, x10, x15                           
    WORD $0x8b0f016b // add x11, x11, x15                           
    WORD $0x8b0f018c // add x12, x12, x15                           
    WORD $0x8b0f01ad // add x13, x13, x15                           
    WORD $0x8b0f0063 // add x3, x3, x15                             
    WORD $0xd343fdef // lsr x15, x15, #3                            
    WORD $0xd28001e6 // mov x6, #15                                 
    WORD $0x05e038c5 // mov z5.d, x6                                
    WORD $0x052120a5 // dup z5.b, z5.b[0]                           

    // Load number of input shards
    MOVD   in_len+32(FP), R16
    WORD $0x04bf5031 // rdvl x17, #1
    WORD $0xd343fe31 // lsr  x17, x17, #3

mulSve_10x5Xor_loop:
    // Load and process 32 bytes from input 0 to 5 outputs
    WORD $0x85804028 // ldr z8, [x1]                                
    WORD $0x04215021 // addvl x1, x1, #1
    WORD $0x04fc9509 // lsr z9.d, z8.d, #4                          
    WORD $0x04253108 // and z8.d, z8.d, z5.d                        
    WORD $0x04253129 // and z9.d, z9.d, z5.d                        
    MOVD (R14), R6
    WORD $0xa5ef40c0 // ld1d { z0.d }, p0/z, [x6, x15, lsl #3]      
    WORD $0x85804046 // ldr z6, [x2]                                
    WORD $0x85804447 // ldr z7, [x2, #1, MUL VL]                    
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    MOVD 24(R14), R6
    WORD $0xa5ef40c1 // ld1d { z1.d }, p0/z, [x6, x15, lsl #3]      
    WORD $0x85804846 // ldr z6, [x2, #2, MUL VL]                    
    WORD $0x85804c47 // ldr z7, [x2, #3, MUL VL]                    
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    MOVD 48(R14), R6
    WORD $0xa5ef40c2 // ld1d { z2.d }, p0/z, [x6, x15, lsl #3]      
    WORD $0x85805046 // ldr z6, [x2, #4, MUL VL]                    
    WORD $0x85805447 // ldr z7, [x2, #5, MUL VL]                    
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    MOVD 72(R14), R6
    WORD $0xa5ef40c3 // ld1d { z3.d }, p0/z, [x6, x15, lsl #3]      
    WORD $0x85805846 // ldr z6, [x2, #6, MUL VL]                    
    WORD $0x85805c47 // ldr z7, [x2, #7, MUL VL]                    
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63063 // eor z3.d, z3.d, z6.d                        
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    MOVD 96(R14), R6
    WORD $0xa5ef40c4 // ld1d { z4.d }, p0/z, [x6, x15, lsl #3]      
    WORD $0x85814046 // ldr z6, [x2, #8, MUL VL]                    
    WORD $0x85814447 // ldr z7, [x2, #9, MUL VL]                    
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63084 // eor z4.d, z4.d, z6.d                        
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    // Check for early termination
    CMP    $1, R16
    BEQ    mulSve_10x5Xor_store

    // Load and process 32 bytes from input 1 to 5 outputs
    WORD $0x85804088 // ldr z8, [x4]                                
    WORD $0x04245024 // addvl x4, x4, #1
    WORD $0x04fc9509 // lsr z9.d, z8.d, #4                          
    WORD $0x04253108 // and z8.d, z8.d, z5.d                        
    WORD $0x04253129 // and z9.d, z9.d, z5.d                        
    WORD $0x85814846 // ldr z6, [x2, #10, MUL VL]                   
    WORD $0x85814c47 // ldr z7, [x2, #11, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x85815046 // ldr z6, [x2, #12, MUL VL]                   
    WORD $0x85815447 // ldr z7, [x2, #13, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x85815846 // ldr z6, [x2, #14, MUL VL]                   
    WORD $0x85815c47 // ldr z7, [x2, #15, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x85824046 // ldr z6, [x2, #16, MUL VL]                   
    WORD $0x85824447 // ldr z7, [x2, #17, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63063 // eor z3.d, z3.d, z6.d                        
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x85824846 // ldr z6, [x2, #18, MUL VL]                   
    WORD $0x85824c47 // ldr z7, [x2, #19, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63084 // eor z4.d, z4.d, z6.d                        
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    // Check for early termination
    CMP    $2, R16
    BEQ    mulSve_10x5Xor_store

    // Load and process 32 bytes from input 2 to 5 outputs
    WORD $0x858040a8 // ldr z8, [x5]                                
    WORD $0x04255025 // addvl x5, x5, #1
    WORD $0x04fc9509 // lsr z9.d, z8.d, #4                          
    WORD $0x04253108 // and z8.d, z8.d, z5.d                        
    WORD $0x04253129 // and z9.d, z9.d, z5.d                        
    WORD $0x85825046 // ldr z6, [x2, #20, MUL VL]                   
    WORD $0x85825447 // ldr z7, [x2, #21, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x85825846 // ldr z6, [x2, #22, MUL VL]                   
    WORD $0x85825c47 // ldr z7, [x2, #23, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x85834046 // ldr z6, [x2, #24, MUL VL]                   
    WORD $0x85834447 // ldr z7, [x2, #25, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x85834846 // ldr z6, [x2, #26, MUL VL]                   
    WORD $0x85834c47 // ldr z7, [x2, #27, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63063 // eor z3.d, z3.d, z6.d                        
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x85835046 // ldr z6, [x2, #28, MUL VL]                   
    WORD $0x85835447 // ldr z7, [x2, #29, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63084 // eor z4.d, z4.d, z6.d                        
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    // Check for early termination
    CMP    $3, R16
    BEQ    mulSve_10x5Xor_store

    // Load and process 32 bytes from input 3 to 5 outputs
    WORD $0x85804108 // ldr z8, [x8]                                
    WORD $0x04285028 // addvl x8, x8, #1
    WORD $0x04fc9509 // lsr z9.d, z8.d, #4                          
    WORD $0x04253108 // and z8.d, z8.d, z5.d                        
    WORD $0x04253129 // and z9.d, z9.d, z5.d                        
    WORD $0x85835846 // ldr z6, [x2, #30, MUL VL]                   
    WORD $0x85835c47 // ldr z7, [x2, #31, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x85844046 // ldr z6, [x2, #32, MUL VL]                   
    WORD $0x85844447 // ldr z7, [x2, #33, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x85844846 // ldr z6, [x2, #34, MUL VL]                   
    WORD $0x85844c47 // ldr z7, [x2, #35, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x85845046 // ldr z6, [x2, #36, MUL VL]                   
    WORD $0x85845447 // ldr z7, [x2, #37, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63063 // eor z3.d, z3.d, z6.d                        
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x85845846 // ldr z6, [x2, #38, MUL VL]                   
    WORD $0x85845c47 // ldr z7, [x2, #39, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63084 // eor z4.d, z4.d, z6.d                        
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    // Check for early termination
    CMP    $4, R16
    BEQ    mulSve_10x5Xor_store

    // Load and process 32 bytes from input 4 to 5 outputs
    WORD $0x85804128 // ldr z8, [x9]                                
    WORD $0x04295029 // addvl x9, x9, #1
    WORD $0x04fc9509 // lsr z9.d, z8.d, #4                          
    WORD $0x04253108 // and z8.d, z8.d, z5.d                        
    WORD $0x04253129 // and z9.d, z9.d, z5.d                        
    WORD $0x85854046 // ldr z6, [x2, #40, MUL VL]                   
    WORD $0x85854447 // ldr z7, [x2, #41, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x85854846 // ldr z6, [x2, #42, MUL VL]                   
    WORD $0x85854c47 // ldr z7, [x2, #43, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x85855046 // ldr z6, [x2, #44, MUL VL]                   
    WORD $0x85855447 // ldr z7, [x2, #45, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x85855846 // ldr z6, [x2, #46, MUL VL]                   
    WORD $0x85855c47 // ldr z7, [x2, #47, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63063 // eor z3.d, z3.d, z6.d                        
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x85864046 // ldr z6, [x2, #48, MUL VL]                   
    WORD $0x85864447 // ldr z7, [x2, #49, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63084 // eor z4.d, z4.d, z6.d                        
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    // Check for early termination
    CMP    $5, R16
    BEQ    mulSve_10x5Xor_store

    // Load and process 32 bytes from input 5 to 5 outputs
    WORD $0x85804148 // ldr z8, [x10]                               
    WORD $0x042a502a // addvl x10, x10, #1
    WORD $0x04fc9509 // lsr z9.d, z8.d, #4                          
    WORD $0x04253108 // and z8.d, z8.d, z5.d                        
    WORD $0x04253129 // and z9.d, z9.d, z5.d                        
    WORD $0x85864846 // ldr z6, [x2, #50, MUL VL]                   
    WORD $0x85864c47 // ldr z7, [x2, #51, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x85865046 // ldr z6, [x2, #52, MUL VL]                   
    WORD $0x85865447 // ldr z7, [x2, #53, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x85865846 // ldr z6, [x2, #54, MUL VL]                   
    WORD $0x85865c47 // ldr z7, [x2, #55, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x85874046 // ldr z6, [x2, #56, MUL VL]                   
    WORD $0x85874447 // ldr z7, [x2, #57, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63063 // eor z3.d, z3.d, z6.d                        
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x85874846 // ldr z6, [x2, #58, MUL VL]                   
    WORD $0x85874c47 // ldr z7, [x2, #59, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63084 // eor z4.d, z4.d, z6.d                        
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    // Check for early termination
    CMP    $6, R16
    BEQ    mulSve_10x5Xor_store

    // Load and process 32 bytes from input 6 to 5 outputs
    WORD $0x85804168 // ldr z8, [x11]                               
    WORD $0x042b502b // addvl x11, x11, #1
    WORD $0x04fc9509 // lsr z9.d, z8.d, #4                          
    WORD $0x04253108 // and z8.d, z8.d, z5.d                        
    WORD $0x04253129 // and z9.d, z9.d, z5.d                        
    WORD $0x85875046 // ldr z6, [x2, #60, MUL VL]                   
    WORD $0x85875447 // ldr z7, [x2, #61, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x85875846 // ldr z6, [x2, #62, MUL VL]                   
    WORD $0x85875c47 // ldr z7, [x2, #63, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x85884046 // ldr z6, [x2, #64, MUL VL]                   
    WORD $0x85884447 // ldr z7, [x2, #65, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x85884846 // ldr z6, [x2, #66, MUL VL]                   
    WORD $0x85884c47 // ldr z7, [x2, #67, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63063 // eor z3.d, z3.d, z6.d                        
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x85885046 // ldr z6, [x2, #68, MUL VL]                   
    WORD $0x85885447 // ldr z7, [x2, #69, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63084 // eor z4.d, z4.d, z6.d                        
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    // Check for early termination
    CMP    $7, R16
    BEQ    mulSve_10x5Xor_store

    // Load and process 32 bytes from input 7 to 5 outputs
    WORD $0x85804188 // ldr z8, [x12]                               
    WORD $0x042c502c // addvl x12, x12, #1
    WORD $0x04fc9509 // lsr z9.d, z8.d, #4                          
    WORD $0x04253108 // and z8.d, z8.d, z5.d                        
    WORD $0x04253129 // and z9.d, z9.d, z5.d                        
    WORD $0x85885846 // ldr z6, [x2, #70, MUL VL]                   
    WORD $0x85885c47 // ldr z7, [x2, #71, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x85894046 // ldr z6, [x2, #72, MUL VL]                   
    WORD $0x85894447 // ldr z7, [x2, #73, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x85894846 // ldr z6, [x2, #74, MUL VL]                   
    WORD $0x85894c47 // ldr z7, [x2, #75, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x85895046 // ldr z6, [x2, #76, MUL VL]                   
    WORD $0x85895447 // ldr z7, [x2, #77, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63063 // eor z3.d, z3.d, z6.d                        
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x85895846 // ldr z6, [x2, #78, MUL VL]                   
    WORD $0x85895c47 // ldr z7, [x2, #79, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63084 // eor z4.d, z4.d, z6.d                        
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    // Check for early termination
    CMP    $8, R16
    BEQ    mulSve_10x5Xor_store

    // Load and process 32 bytes from input 8 to 5 outputs
    WORD $0x858041a8 // ldr z8, [x13]                               
    WORD $0x042d502d // addvl x13, x13, #1
    WORD $0x04fc9509 // lsr z9.d, z8.d, #4                          
    WORD $0x04253108 // and z8.d, z8.d, z5.d                        
    WORD $0x04253129 // and z9.d, z9.d, z5.d                        
    WORD $0x858a4046 // ldr z6, [x2, #80, MUL VL]                   
    WORD $0x858a4447 // ldr z7, [x2, #81, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x858a4846 // ldr z6, [x2, #82, MUL VL]                   
    WORD $0x858a4c47 // ldr z7, [x2, #83, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x858a5046 // ldr z6, [x2, #84, MUL VL]                   
    WORD $0x858a5447 // ldr z7, [x2, #85, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x858a5846 // ldr z6, [x2, #86, MUL VL]                   
    WORD $0x858a5c47 // ldr z7, [x2, #87, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63063 // eor z3.d, z3.d, z6.d                        
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x858b4046 // ldr z6, [x2, #88, MUL VL]                   
    WORD $0x858b4447 // ldr z7, [x2, #89, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63084 // eor z4.d, z4.d, z6.d                        
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    // Check for early termination
    CMP    $9, R16
    BEQ    mulSve_10x5Xor_store

    // Load and process 32 bytes from input 9 to 5 outputs
    WORD $0x85804068 // ldr z8, [x3]                                
    WORD $0x04235023 // addvl x3, x3, #1
    WORD $0x04fc9509 // lsr z9.d, z8.d, #4                          
    WORD $0x04253108 // and z8.d, z8.d, z5.d                        
    WORD $0x04253129 // and z9.d, z9.d, z5.d                        
    WORD $0x858b4846 // ldr z6, [x2, #90, MUL VL]                   
    WORD $0x858b4c47 // ldr z7, [x2, #91, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63000 // eor z0.d, z0.d, z6.d                        
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x858b5046 // ldr z6, [x2, #92, MUL VL]                   
    WORD $0x858b5447 // ldr z7, [x2, #93, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63021 // eor z1.d, z1.d, z6.d                        
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x858b5846 // ldr z6, [x2, #94, MUL VL]                   
    WORD $0x858b5c47 // ldr z7, [x2, #95, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63042 // eor z2.d, z2.d, z6.d                        
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x858c4046 // ldr z6, [x2, #96, MUL VL]                   
    WORD $0x858c4447 // ldr z7, [x2, #97, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63063 // eor z3.d, z3.d, z6.d                        
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x858c4846 // ldr z6, [x2, #98, MUL VL]                   
    WORD $0x858c4c47 // ldr z7, [x2, #99, MUL VL]                   
    WORD $0x052830c6 // tbl z6.b, z6.b, z8.b                        
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x04a63084 // eor z4.d, z4.d, z6.d                        
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        

mulSve_10x5Xor_store:
    // Store 5 outputs
    MOVD (R14), R6
    WORD $0xe5ef40c0 // st1d { z0.d }, p0, [x6, x15, lsl #3]        
    MOVD 24(R14), R6
    WORD $0xe5ef40c1 // st1d { z1.d }, p0, [x6, x15, lsl #3]        
    MOVD 48(R14), R6
    WORD $0xe5ef40c2 // st1d { z2.d }, p0, [x6, x15, lsl #3]        
    MOVD 72(R14), R6
    WORD $0xe5ef40c3 // st1d { z3.d }, p0, [x6, x15, lsl #3]        
    MOVD 96(R14), R6
    WORD $0xe5ef40c4 // st1d { z4.d }, p0, [x6, x15, lsl #3]        

    // Prepare for next loop
    WORD $0x8b1101ef // add x15, x15, x17
    WORD $0xf1000400 // subs x0, x0, #1                             
    BNE  mulSve_10x5Xor_loop

mulSve_10x5Xor_end:
    RET

// func mulSve_10x6(matrix []byte, in [][]byte, out [][]byte, start int, n int)
// Requires: SVE
TEXT Â·mulSve_10x6(SB), NOSPLIT, $8-88
    WORD $0x25d8e3e0 // ptrue p0.d
    // Loading no tables to registers
    // Destination kept on stack
    // Full registers estimated 131 YMM used
    MOVD n+80(FP), R0
    MOVD matrix_base+0(FP), R2
    WORD $0xd345fc00 // lsr x0, x0, #5                              
    WORD $0xd37be800 // lsl x0, x0, #5
    WORD $0x04bf5030 // rdvl x16, #1
    WORD $0x9ad00800 // udiv x0, x0, x16
    WORD $0xea00001f // tst x0, x0                                  
    BEQ    mulSve_10x6_end
    MOVD in_base+24(FP), R3
    MOVD (R3), R1
    MOVD 24(R3), R4
    MOVD 48(R3), R5
    MOVD 72(R3), R8
    MOVD 96(R3), R9
    MOVD 120(R3), R10
    MOVD 144(R3), R11
    MOVD 168(R3), R12
    MOVD 192(R3), R13
    MOVD 216(R3), R3
    MOVD out_base+48(FP), R14
    MOVD start+72(FP), R15

    // Add start offset to input
    WORD $0x8b0f0021 // add x1, x1, x15                             
    WORD $0x8b0f0084 // add x4, x4, x15                             
    WORD $0x8b0f00a5 // add x5, x5, x15                             
    WORD $0x8b0f0108 // add x8, x8, x15                             
    WORD $0x8b0f0129 // add x9, x9, x15                             
    WORD $0x8b0f014a // add x10, x10, x15                           
    WORD $0x8b0f016b // add x11, x11, x15                           
    WORD $0x8b0f018c // add x12, x12, x15                           
    WORD $0x8b0f01ad // add x13, x13, x15                           
    WORD $0x8b0f0063 // add x3, x3, x15                             
    WORD $0xd343fdef // lsr x15, x15, #3                            
    WORD $0xd28001e6 // mov x6, #15                                 
    WORD $0x05e038c6 // mov z6.d, x6                                
    WORD $0x052120c6 // dup z6.b, z6.b[0]                           

    // Load number of input shards
    MOVD   in_len+32(FP), R16
    WORD $0x04bf5031 // rdvl x17, #1
    WORD $0xd343fe31 // lsr  x17, x17, #3

mulSve_10x6_loop:
    // Load and process 32 bytes from input 0 to 6 outputs
    WORD $0x85804029 // ldr z9, [x1]                                
    WORD $0x04215021 // addvl x1, x1, #1
    WORD $0x04fc952a // lsr z10.d, z9.d, #4                         
    WORD $0x04263129 // and z9.d, z9.d, z6.d                        
    WORD $0x0426314a // and z10.d, z10.d, z6.d                      
    WORD $0x85804047 // ldr z7, [x2]                                
    WORD $0x85804448 // ldr z8, [x2, #1, MUL VL]                    
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73100 // eor z0.d, z8.d, z7.d                        
    WORD $0x85804847 // ldr z7, [x2, #2, MUL VL]                    
    WORD $0x85804c48 // ldr z8, [x2, #3, MUL VL]                    
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73101 // eor z1.d, z8.d, z7.d                        
    WORD $0x85805047 // ldr z7, [x2, #4, MUL VL]                    
    WORD $0x85805448 // ldr z8, [x2, #5, MUL VL]                    
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73102 // eor z2.d, z8.d, z7.d                        
    WORD $0x85805847 // ldr z7, [x2, #6, MUL VL]                    
    WORD $0x85805c48 // ldr z8, [x2, #7, MUL VL]                    
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73103 // eor z3.d, z8.d, z7.d                        
    WORD $0x85814047 // ldr z7, [x2, #8, MUL VL]                    
    WORD $0x85814448 // ldr z8, [x2, #9, MUL VL]                    
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73104 // eor z4.d, z8.d, z7.d                        
    WORD $0x85814847 // ldr z7, [x2, #10, MUL VL]                   
    WORD $0x85814c48 // ldr z8, [x2, #11, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73105 // eor z5.d, z8.d, z7.d                        
    // Check for early termination
    CMP    $1, R16
    BEQ    mulSve_10x6_store

    // Load and process 32 bytes from input 1 to 6 outputs
    WORD $0x85804089 // ldr z9, [x4]                                
    WORD $0x04245024 // addvl x4, x4, #1
    WORD $0x04fc952a // lsr z10.d, z9.d, #4                         
    WORD $0x04263129 // and z9.d, z9.d, z6.d                        
    WORD $0x0426314a // and z10.d, z10.d, z6.d                      
    WORD $0x85815047 // ldr z7, [x2, #12, MUL VL]                   
    WORD $0x85815448 // ldr z8, [x2, #13, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x85815847 // ldr z7, [x2, #14, MUL VL]                   
    WORD $0x85815c48 // ldr z8, [x2, #15, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x85824047 // ldr z7, [x2, #16, MUL VL]                   
    WORD $0x85824448 // ldr z8, [x2, #17, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x85824847 // ldr z7, [x2, #18, MUL VL]                   
    WORD $0x85824c48 // ldr z8, [x2, #19, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    WORD $0x85825047 // ldr z7, [x2, #20, MUL VL]                   
    WORD $0x85825448 // ldr z8, [x2, #21, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x85825847 // ldr z7, [x2, #22, MUL VL]                   
    WORD $0x85825c48 // ldr z8, [x2, #23, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a730a5 // eor z5.d, z5.d, z7.d                        
    WORD $0x04a830a5 // eor z5.d, z5.d, z8.d                        
    // Check for early termination
    CMP    $2, R16
    BEQ    mulSve_10x6_store

    // Load and process 32 bytes from input 2 to 6 outputs
    WORD $0x858040a9 // ldr z9, [x5]                                
    WORD $0x04255025 // addvl x5, x5, #1
    WORD $0x04fc952a // lsr z10.d, z9.d, #4                         
    WORD $0x04263129 // and z9.d, z9.d, z6.d                        
    WORD $0x0426314a // and z10.d, z10.d, z6.d                      
    WORD $0x85834047 // ldr z7, [x2, #24, MUL VL]                   
    WORD $0x85834448 // ldr z8, [x2, #25, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x85834847 // ldr z7, [x2, #26, MUL VL]                   
    WORD $0x85834c48 // ldr z8, [x2, #27, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x85835047 // ldr z7, [x2, #28, MUL VL]                   
    WORD $0x85835448 // ldr z8, [x2, #29, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x85835847 // ldr z7, [x2, #30, MUL VL]                   
    WORD $0x85835c48 // ldr z8, [x2, #31, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    WORD $0x85844047 // ldr z7, [x2, #32, MUL VL]                   
    WORD $0x85844448 // ldr z8, [x2, #33, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x85844847 // ldr z7, [x2, #34, MUL VL]                   
    WORD $0x85844c48 // ldr z8, [x2, #35, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a730a5 // eor z5.d, z5.d, z7.d                        
    WORD $0x04a830a5 // eor z5.d, z5.d, z8.d                        
    // Check for early termination
    CMP    $3, R16
    BEQ    mulSve_10x6_store

    // Load and process 32 bytes from input 3 to 6 outputs
    WORD $0x85804109 // ldr z9, [x8]                                
    WORD $0x04285028 // addvl x8, x8, #1
    WORD $0x04fc952a // lsr z10.d, z9.d, #4                         
    WORD $0x04263129 // and z9.d, z9.d, z6.d                        
    WORD $0x0426314a // and z10.d, z10.d, z6.d                      
    WORD $0x85845047 // ldr z7, [x2, #36, MUL VL]                   
    WORD $0x85845448 // ldr z8, [x2, #37, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x85845847 // ldr z7, [x2, #38, MUL VL]                   
    WORD $0x85845c48 // ldr z8, [x2, #39, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x85854047 // ldr z7, [x2, #40, MUL VL]                   
    WORD $0x85854448 // ldr z8, [x2, #41, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x85854847 // ldr z7, [x2, #42, MUL VL]                   
    WORD $0x85854c48 // ldr z8, [x2, #43, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    WORD $0x85855047 // ldr z7, [x2, #44, MUL VL]                   
    WORD $0x85855448 // ldr z8, [x2, #45, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x85855847 // ldr z7, [x2, #46, MUL VL]                   
    WORD $0x85855c48 // ldr z8, [x2, #47, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a730a5 // eor z5.d, z5.d, z7.d                        
    WORD $0x04a830a5 // eor z5.d, z5.d, z8.d                        
    // Check for early termination
    CMP    $4, R16
    BEQ    mulSve_10x6_store

    // Load and process 32 bytes from input 4 to 6 outputs
    WORD $0x85804129 // ldr z9, [x9]                                
    WORD $0x04295029 // addvl x9, x9, #1
    WORD $0x04fc952a // lsr z10.d, z9.d, #4                         
    WORD $0x04263129 // and z9.d, z9.d, z6.d                        
    WORD $0x0426314a // and z10.d, z10.d, z6.d                      
    WORD $0x85864047 // ldr z7, [x2, #48, MUL VL]                   
    WORD $0x85864448 // ldr z8, [x2, #49, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x85864847 // ldr z7, [x2, #50, MUL VL]                   
    WORD $0x85864c48 // ldr z8, [x2, #51, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x85865047 // ldr z7, [x2, #52, MUL VL]                   
    WORD $0x85865448 // ldr z8, [x2, #53, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x85865847 // ldr z7, [x2, #54, MUL VL]                   
    WORD $0x85865c48 // ldr z8, [x2, #55, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    WORD $0x85874047 // ldr z7, [x2, #56, MUL VL]                   
    WORD $0x85874448 // ldr z8, [x2, #57, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x85874847 // ldr z7, [x2, #58, MUL VL]                   
    WORD $0x85874c48 // ldr z8, [x2, #59, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a730a5 // eor z5.d, z5.d, z7.d                        
    WORD $0x04a830a5 // eor z5.d, z5.d, z8.d                        
    // Check for early termination
    CMP    $5, R16
    BEQ    mulSve_10x6_store

    // Load and process 32 bytes from input 5 to 6 outputs
    WORD $0x85804149 // ldr z9, [x10]                               
    WORD $0x042a502a // addvl x10, x10, #1
    WORD $0x04fc952a // lsr z10.d, z9.d, #4                         
    WORD $0x04263129 // and z9.d, z9.d, z6.d                        
    WORD $0x0426314a // and z10.d, z10.d, z6.d                      
    WORD $0x85875047 // ldr z7, [x2, #60, MUL VL]                   
    WORD $0x85875448 // ldr z8, [x2, #61, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x85875847 // ldr z7, [x2, #62, MUL VL]                   
    WORD $0x85875c48 // ldr z8, [x2, #63, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x85884047 // ldr z7, [x2, #64, MUL VL]                   
    WORD $0x85884448 // ldr z8, [x2, #65, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x85884847 // ldr z7, [x2, #66, MUL VL]                   
    WORD $0x85884c48 // ldr z8, [x2, #67, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    WORD $0x85885047 // ldr z7, [x2, #68, MUL VL]                   
    WORD $0x85885448 // ldr z8, [x2, #69, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x85885847 // ldr z7, [x2, #70, MUL VL]                   
    WORD $0x85885c48 // ldr z8, [x2, #71, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a730a5 // eor z5.d, z5.d, z7.d                        
    WORD $0x04a830a5 // eor z5.d, z5.d, z8.d                        
    // Check for early termination
    CMP    $6, R16
    BEQ    mulSve_10x6_store

    // Load and process 32 bytes from input 6 to 6 outputs
    WORD $0x85804169 // ldr z9, [x11]                               
    WORD $0x042b502b // addvl x11, x11, #1
    WORD $0x04fc952a // lsr z10.d, z9.d, #4                         
    WORD $0x04263129 // and z9.d, z9.d, z6.d                        
    WORD $0x0426314a // and z10.d, z10.d, z6.d                      
    WORD $0x85894047 // ldr z7, [x2, #72, MUL VL]                   
    WORD $0x85894448 // ldr z8, [x2, #73, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x85894847 // ldr z7, [x2, #74, MUL VL]                   
    WORD $0x85894c48 // ldr z8, [x2, #75, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x85895047 // ldr z7, [x2, #76, MUL VL]                   
    WORD $0x85895448 // ldr z8, [x2, #77, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x85895847 // ldr z7, [x2, #78, MUL VL]                   
    WORD $0x85895c48 // ldr z8, [x2, #79, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    WORD $0x858a4047 // ldr z7, [x2, #80, MUL VL]                   
    WORD $0x858a4448 // ldr z8, [x2, #81, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x858a4847 // ldr z7, [x2, #82, MUL VL]                   
    WORD $0x858a4c48 // ldr z8, [x2, #83, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a730a5 // eor z5.d, z5.d, z7.d                        
    WORD $0x04a830a5 // eor z5.d, z5.d, z8.d                        
    // Check for early termination
    CMP    $7, R16
    BEQ    mulSve_10x6_store

    // Load and process 32 bytes from input 7 to 6 outputs
    WORD $0x85804189 // ldr z9, [x12]                               
    WORD $0x042c502c // addvl x12, x12, #1
    WORD $0x04fc952a // lsr z10.d, z9.d, #4                         
    WORD $0x04263129 // and z9.d, z9.d, z6.d                        
    WORD $0x0426314a // and z10.d, z10.d, z6.d                      
    WORD $0x858a5047 // ldr z7, [x2, #84, MUL VL]                   
    WORD $0x858a5448 // ldr z8, [x2, #85, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x858a5847 // ldr z7, [x2, #86, MUL VL]                   
    WORD $0x858a5c48 // ldr z8, [x2, #87, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x858b4047 // ldr z7, [x2, #88, MUL VL]                   
    WORD $0x858b4448 // ldr z8, [x2, #89, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x858b4847 // ldr z7, [x2, #90, MUL VL]                   
    WORD $0x858b4c48 // ldr z8, [x2, #91, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    WORD $0x858b5047 // ldr z7, [x2, #92, MUL VL]                   
    WORD $0x858b5448 // ldr z8, [x2, #93, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x858b5847 // ldr z7, [x2, #94, MUL VL]                   
    WORD $0x858b5c48 // ldr z8, [x2, #95, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a730a5 // eor z5.d, z5.d, z7.d                        
    WORD $0x04a830a5 // eor z5.d, z5.d, z8.d                        
    // Check for early termination
    CMP    $8, R16
    BEQ    mulSve_10x6_store

    // Load and process 32 bytes from input 8 to 6 outputs
    WORD $0x858041a9 // ldr z9, [x13]                               
    WORD $0x042d502d // addvl x13, x13, #1
    WORD $0x04fc952a // lsr z10.d, z9.d, #4                         
    WORD $0x04263129 // and z9.d, z9.d, z6.d                        
    WORD $0x0426314a // and z10.d, z10.d, z6.d                      
    WORD $0x858c4047 // ldr z7, [x2, #96, MUL VL]                   
    WORD $0x858c4448 // ldr z8, [x2, #97, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x858c4847 // ldr z7, [x2, #98, MUL VL]                   
    WORD $0x858c4c48 // ldr z8, [x2, #99, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x858c5047 // ldr z7, [x2, #100, MUL VL]                  
    WORD $0x858c5448 // ldr z8, [x2, #101, MUL VL]                  
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x858c5847 // ldr z7, [x2, #102, MUL VL]                  
    WORD $0x858c5c48 // ldr z8, [x2, #103, MUL VL]                  
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    WORD $0x858d4047 // ldr z7, [x2, #104, MUL VL]                  
    WORD $0x858d4448 // ldr z8, [x2, #105, MUL VL]                  
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x858d4847 // ldr z7, [x2, #106, MUL VL]                  
    WORD $0x858d4c48 // ldr z8, [x2, #107, MUL VL]                  
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a730a5 // eor z5.d, z5.d, z7.d                        
    WORD $0x04a830a5 // eor z5.d, z5.d, z8.d                        
    // Check for early termination
    CMP    $9, R16
    BEQ    mulSve_10x6_store

    // Load and process 32 bytes from input 9 to 6 outputs
    WORD $0x85804069 // ldr z9, [x3]                                
    WORD $0x04235023 // addvl x3, x3, #1
    WORD $0x04fc952a // lsr z10.d, z9.d, #4                         
    WORD $0x04263129 // and z9.d, z9.d, z6.d                        
    WORD $0x0426314a // and z10.d, z10.d, z6.d                      
    WORD $0x858d5047 // ldr z7, [x2, #108, MUL VL]                  
    WORD $0x858d5448 // ldr z8, [x2, #109, MUL VL]                  
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x858d5847 // ldr z7, [x2, #110, MUL VL]                  
    WORD $0x858d5c48 // ldr z8, [x2, #111, MUL VL]                  
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x858e4047 // ldr z7, [x2, #112, MUL VL]                  
    WORD $0x858e4448 // ldr z8, [x2, #113, MUL VL]                  
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x858e4847 // ldr z7, [x2, #114, MUL VL]                  
    WORD $0x858e4c48 // ldr z8, [x2, #115, MUL VL]                  
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    WORD $0x858e5047 // ldr z7, [x2, #116, MUL VL]                  
    WORD $0x858e5448 // ldr z8, [x2, #117, MUL VL]                  
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x858e5847 // ldr z7, [x2, #118, MUL VL]                  
    WORD $0x858e5c48 // ldr z8, [x2, #119, MUL VL]                  
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a730a5 // eor z5.d, z5.d, z7.d                        
    WORD $0x04a830a5 // eor z5.d, z5.d, z8.d                        

mulSve_10x6_store:
    // Store 6 outputs
    MOVD (R14), R6
    WORD $0xe5ef40c0 // st1d { z0.d }, p0, [x6, x15, lsl #3]        
    MOVD 24(R14), R6
    WORD $0xe5ef40c1 // st1d { z1.d }, p0, [x6, x15, lsl #3]        
    MOVD 48(R14), R6
    WORD $0xe5ef40c2 // st1d { z2.d }, p0, [x6, x15, lsl #3]        
    MOVD 72(R14), R6
    WORD $0xe5ef40c3 // st1d { z3.d }, p0, [x6, x15, lsl #3]        
    MOVD 96(R14), R6
    WORD $0xe5ef40c4 // st1d { z4.d }, p0, [x6, x15, lsl #3]        
    MOVD 120(R14), R6
    WORD $0xe5ef40c5 // st1d { z5.d }, p0, [x6, x15, lsl #3]        

    // Prepare for next loop
    WORD $0x8b1101ef // add x15, x15, x17
    WORD $0xf1000400 // subs x0, x0, #1                             
    BNE  mulSve_10x6_loop

mulSve_10x6_end:
    RET

// func mulSve_10x6Xor(matrix []byte, in [][]byte, out [][]byte, start int, n int)
// Requires: SVE
TEXT Â·mulSve_10x6Xor(SB), NOSPLIT, $8-88
    WORD $0x25d8e3e0 // ptrue p0.d
    // Loading no tables to registers
    // Destination kept on stack
    // Full registers estimated 131 YMM used
    MOVD n+80(FP), R0
    MOVD matrix_base+0(FP), R2
    WORD $0xd345fc00 // lsr x0, x0, #5                              
    WORD $0xd37be800 // lsl x0, x0, #5
    WORD $0x04bf5030 // rdvl x16, #1
    WORD $0x9ad00800 // udiv x0, x0, x16
    WORD $0xea00001f // tst x0, x0                                  
    BEQ    mulSve_10x6Xor_end
    MOVD in_base+24(FP), R3
    MOVD (R3), R1
    MOVD 24(R3), R4
    MOVD 48(R3), R5
    MOVD 72(R3), R8
    MOVD 96(R3), R9
    MOVD 120(R3), R10
    MOVD 144(R3), R11
    MOVD 168(R3), R12
    MOVD 192(R3), R13
    MOVD 216(R3), R3
    MOVD out_base+48(FP), R14
    MOVD start+72(FP), R15

    // Add start offset to input
    WORD $0x8b0f0021 // add x1, x1, x15                             
    WORD $0x8b0f0084 // add x4, x4, x15                             
    WORD $0x8b0f00a5 // add x5, x5, x15                             
    WORD $0x8b0f0108 // add x8, x8, x15                             
    WORD $0x8b0f0129 // add x9, x9, x15                             
    WORD $0x8b0f014a // add x10, x10, x15                           
    WORD $0x8b0f016b // add x11, x11, x15                           
    WORD $0x8b0f018c // add x12, x12, x15                           
    WORD $0x8b0f01ad // add x13, x13, x15                           
    WORD $0x8b0f0063 // add x3, x3, x15                             
    WORD $0xd343fdef // lsr x15, x15, #3                            
    WORD $0xd28001e6 // mov x6, #15                                 
    WORD $0x05e038c6 // mov z6.d, x6                                
    WORD $0x052120c6 // dup z6.b, z6.b[0]                           

    // Load number of input shards
    MOVD   in_len+32(FP), R16
    WORD $0x04bf5031 // rdvl x17, #1
    WORD $0xd343fe31 // lsr  x17, x17, #3

mulSve_10x6Xor_loop:
    // Load and process 32 bytes from input 0 to 6 outputs
    WORD $0x85804029 // ldr z9, [x1]                                
    WORD $0x04215021 // addvl x1, x1, #1
    WORD $0x04fc952a // lsr z10.d, z9.d, #4                         
    WORD $0x04263129 // and z9.d, z9.d, z6.d                        
    WORD $0x0426314a // and z10.d, z10.d, z6.d                      
    MOVD (R14), R6
    WORD $0xa5ef40c0 // ld1d { z0.d }, p0/z, [x6, x15, lsl #3]      
    WORD $0x85804047 // ldr z7, [x2]                                
    WORD $0x85804448 // ldr z8, [x2, #1, MUL VL]                    
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    MOVD 24(R14), R6
    WORD $0xa5ef40c1 // ld1d { z1.d }, p0/z, [x6, x15, lsl #3]      
    WORD $0x85804847 // ldr z7, [x2, #2, MUL VL]                    
    WORD $0x85804c48 // ldr z8, [x2, #3, MUL VL]                    
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    MOVD 48(R14), R6
    WORD $0xa5ef40c2 // ld1d { z2.d }, p0/z, [x6, x15, lsl #3]      
    WORD $0x85805047 // ldr z7, [x2, #4, MUL VL]                    
    WORD $0x85805448 // ldr z8, [x2, #5, MUL VL]                    
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    MOVD 72(R14), R6
    WORD $0xa5ef40c3 // ld1d { z3.d }, p0/z, [x6, x15, lsl #3]      
    WORD $0x85805847 // ldr z7, [x2, #6, MUL VL]                    
    WORD $0x85805c48 // ldr z8, [x2, #7, MUL VL]                    
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    MOVD 96(R14), R6
    WORD $0xa5ef40c4 // ld1d { z4.d }, p0/z, [x6, x15, lsl #3]      
    WORD $0x85814047 // ldr z7, [x2, #8, MUL VL]                    
    WORD $0x85814448 // ldr z8, [x2, #9, MUL VL]                    
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    MOVD 120(R14), R6
    WORD $0xa5ef40c5 // ld1d { z5.d }, p0/z, [x6, x15, lsl #3]      
    WORD $0x85814847 // ldr z7, [x2, #10, MUL VL]                   
    WORD $0x85814c48 // ldr z8, [x2, #11, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a730a5 // eor z5.d, z5.d, z7.d                        
    WORD $0x04a830a5 // eor z5.d, z5.d, z8.d                        
    // Check for early termination
    CMP    $1, R16
    BEQ    mulSve_10x6Xor_store

    // Load and process 32 bytes from input 1 to 6 outputs
    WORD $0x85804089 // ldr z9, [x4]                                
    WORD $0x04245024 // addvl x4, x4, #1
    WORD $0x04fc952a // lsr z10.d, z9.d, #4                         
    WORD $0x04263129 // and z9.d, z9.d, z6.d                        
    WORD $0x0426314a // and z10.d, z10.d, z6.d                      
    WORD $0x85815047 // ldr z7, [x2, #12, MUL VL]                   
    WORD $0x85815448 // ldr z8, [x2, #13, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x85815847 // ldr z7, [x2, #14, MUL VL]                   
    WORD $0x85815c48 // ldr z8, [x2, #15, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x85824047 // ldr z7, [x2, #16, MUL VL]                   
    WORD $0x85824448 // ldr z8, [x2, #17, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x85824847 // ldr z7, [x2, #18, MUL VL]                   
    WORD $0x85824c48 // ldr z8, [x2, #19, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    WORD $0x85825047 // ldr z7, [x2, #20, MUL VL]                   
    WORD $0x85825448 // ldr z8, [x2, #21, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x85825847 // ldr z7, [x2, #22, MUL VL]                   
    WORD $0x85825c48 // ldr z8, [x2, #23, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a730a5 // eor z5.d, z5.d, z7.d                        
    WORD $0x04a830a5 // eor z5.d, z5.d, z8.d                        
    // Check for early termination
    CMP    $2, R16
    BEQ    mulSve_10x6Xor_store

    // Load and process 32 bytes from input 2 to 6 outputs
    WORD $0x858040a9 // ldr z9, [x5]                                
    WORD $0x04255025 // addvl x5, x5, #1
    WORD $0x04fc952a // lsr z10.d, z9.d, #4                         
    WORD $0x04263129 // and z9.d, z9.d, z6.d                        
    WORD $0x0426314a // and z10.d, z10.d, z6.d                      
    WORD $0x85834047 // ldr z7, [x2, #24, MUL VL]                   
    WORD $0x85834448 // ldr z8, [x2, #25, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x85834847 // ldr z7, [x2, #26, MUL VL]                   
    WORD $0x85834c48 // ldr z8, [x2, #27, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x85835047 // ldr z7, [x2, #28, MUL VL]                   
    WORD $0x85835448 // ldr z8, [x2, #29, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x85835847 // ldr z7, [x2, #30, MUL VL]                   
    WORD $0x85835c48 // ldr z8, [x2, #31, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    WORD $0x85844047 // ldr z7, [x2, #32, MUL VL]                   
    WORD $0x85844448 // ldr z8, [x2, #33, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x85844847 // ldr z7, [x2, #34, MUL VL]                   
    WORD $0x85844c48 // ldr z8, [x2, #35, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a730a5 // eor z5.d, z5.d, z7.d                        
    WORD $0x04a830a5 // eor z5.d, z5.d, z8.d                        
    // Check for early termination
    CMP    $3, R16
    BEQ    mulSve_10x6Xor_store

    // Load and process 32 bytes from input 3 to 6 outputs
    WORD $0x85804109 // ldr z9, [x8]                                
    WORD $0x04285028 // addvl x8, x8, #1
    WORD $0x04fc952a // lsr z10.d, z9.d, #4                         
    WORD $0x04263129 // and z9.d, z9.d, z6.d                        
    WORD $0x0426314a // and z10.d, z10.d, z6.d                      
    WORD $0x85845047 // ldr z7, [x2, #36, MUL VL]                   
    WORD $0x85845448 // ldr z8, [x2, #37, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x85845847 // ldr z7, [x2, #38, MUL VL]                   
    WORD $0x85845c48 // ldr z8, [x2, #39, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x85854047 // ldr z7, [x2, #40, MUL VL]                   
    WORD $0x85854448 // ldr z8, [x2, #41, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x85854847 // ldr z7, [x2, #42, MUL VL]                   
    WORD $0x85854c48 // ldr z8, [x2, #43, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    WORD $0x85855047 // ldr z7, [x2, #44, MUL VL]                   
    WORD $0x85855448 // ldr z8, [x2, #45, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x85855847 // ldr z7, [x2, #46, MUL VL]                   
    WORD $0x85855c48 // ldr z8, [x2, #47, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a730a5 // eor z5.d, z5.d, z7.d                        
    WORD $0x04a830a5 // eor z5.d, z5.d, z8.d                        
    // Check for early termination
    CMP    $4, R16
    BEQ    mulSve_10x6Xor_store

    // Load and process 32 bytes from input 4 to 6 outputs
    WORD $0x85804129 // ldr z9, [x9]                                
    WORD $0x04295029 // addvl x9, x9, #1
    WORD $0x04fc952a // lsr z10.d, z9.d, #4                         
    WORD $0x04263129 // and z9.d, z9.d, z6.d                        
    WORD $0x0426314a // and z10.d, z10.d, z6.d                      
    WORD $0x85864047 // ldr z7, [x2, #48, MUL VL]                   
    WORD $0x85864448 // ldr z8, [x2, #49, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x85864847 // ldr z7, [x2, #50, MUL VL]                   
    WORD $0x85864c48 // ldr z8, [x2, #51, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x85865047 // ldr z7, [x2, #52, MUL VL]                   
    WORD $0x85865448 // ldr z8, [x2, #53, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x85865847 // ldr z7, [x2, #54, MUL VL]                   
    WORD $0x85865c48 // ldr z8, [x2, #55, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    WORD $0x85874047 // ldr z7, [x2, #56, MUL VL]                   
    WORD $0x85874448 // ldr z8, [x2, #57, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x85874847 // ldr z7, [x2, #58, MUL VL]                   
    WORD $0x85874c48 // ldr z8, [x2, #59, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a730a5 // eor z5.d, z5.d, z7.d                        
    WORD $0x04a830a5 // eor z5.d, z5.d, z8.d                        
    // Check for early termination
    CMP    $5, R16
    BEQ    mulSve_10x6Xor_store

    // Load and process 32 bytes from input 5 to 6 outputs
    WORD $0x85804149 // ldr z9, [x10]                               
    WORD $0x042a502a // addvl x10, x10, #1
    WORD $0x04fc952a // lsr z10.d, z9.d, #4                         
    WORD $0x04263129 // and z9.d, z9.d, z6.d                        
    WORD $0x0426314a // and z10.d, z10.d, z6.d                      
    WORD $0x85875047 // ldr z7, [x2, #60, MUL VL]                   
    WORD $0x85875448 // ldr z8, [x2, #61, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x85875847 // ldr z7, [x2, #62, MUL VL]                   
    WORD $0x85875c48 // ldr z8, [x2, #63, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x85884047 // ldr z7, [x2, #64, MUL VL]                   
    WORD $0x85884448 // ldr z8, [x2, #65, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x85884847 // ldr z7, [x2, #66, MUL VL]                   
    WORD $0x85884c48 // ldr z8, [x2, #67, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    WORD $0x85885047 // ldr z7, [x2, #68, MUL VL]                   
    WORD $0x85885448 // ldr z8, [x2, #69, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x85885847 // ldr z7, [x2, #70, MUL VL]                   
    WORD $0x85885c48 // ldr z8, [x2, #71, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a730a5 // eor z5.d, z5.d, z7.d                        
    WORD $0x04a830a5 // eor z5.d, z5.d, z8.d                        
    // Check for early termination
    CMP    $6, R16
    BEQ    mulSve_10x6Xor_store

    // Load and process 32 bytes from input 6 to 6 outputs
    WORD $0x85804169 // ldr z9, [x11]                               
    WORD $0x042b502b // addvl x11, x11, #1
    WORD $0x04fc952a // lsr z10.d, z9.d, #4                         
    WORD $0x04263129 // and z9.d, z9.d, z6.d                        
    WORD $0x0426314a // and z10.d, z10.d, z6.d                      
    WORD $0x85894047 // ldr z7, [x2, #72, MUL VL]                   
    WORD $0x85894448 // ldr z8, [x2, #73, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x85894847 // ldr z7, [x2, #74, MUL VL]                   
    WORD $0x85894c48 // ldr z8, [x2, #75, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x85895047 // ldr z7, [x2, #76, MUL VL]                   
    WORD $0x85895448 // ldr z8, [x2, #77, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x85895847 // ldr z7, [x2, #78, MUL VL]                   
    WORD $0x85895c48 // ldr z8, [x2, #79, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    WORD $0x858a4047 // ldr z7, [x2, #80, MUL VL]                   
    WORD $0x858a4448 // ldr z8, [x2, #81, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x858a4847 // ldr z7, [x2, #82, MUL VL]                   
    WORD $0x858a4c48 // ldr z8, [x2, #83, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a730a5 // eor z5.d, z5.d, z7.d                        
    WORD $0x04a830a5 // eor z5.d, z5.d, z8.d                        
    // Check for early termination
    CMP    $7, R16
    BEQ    mulSve_10x6Xor_store

    // Load and process 32 bytes from input 7 to 6 outputs
    WORD $0x85804189 // ldr z9, [x12]                               
    WORD $0x042c502c // addvl x12, x12, #1
    WORD $0x04fc952a // lsr z10.d, z9.d, #4                         
    WORD $0x04263129 // and z9.d, z9.d, z6.d                        
    WORD $0x0426314a // and z10.d, z10.d, z6.d                      
    WORD $0x858a5047 // ldr z7, [x2, #84, MUL VL]                   
    WORD $0x858a5448 // ldr z8, [x2, #85, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x858a5847 // ldr z7, [x2, #86, MUL VL]                   
    WORD $0x858a5c48 // ldr z8, [x2, #87, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x858b4047 // ldr z7, [x2, #88, MUL VL]                   
    WORD $0x858b4448 // ldr z8, [x2, #89, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x858b4847 // ldr z7, [x2, #90, MUL VL]                   
    WORD $0x858b4c48 // ldr z8, [x2, #91, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    WORD $0x858b5047 // ldr z7, [x2, #92, MUL VL]                   
    WORD $0x858b5448 // ldr z8, [x2, #93, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x858b5847 // ldr z7, [x2, #94, MUL VL]                   
    WORD $0x858b5c48 // ldr z8, [x2, #95, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a730a5 // eor z5.d, z5.d, z7.d                        
    WORD $0x04a830a5 // eor z5.d, z5.d, z8.d                        
    // Check for early termination
    CMP    $8, R16
    BEQ    mulSve_10x6Xor_store

    // Load and process 32 bytes from input 8 to 6 outputs
    WORD $0x858041a9 // ldr z9, [x13]                               
    WORD $0x042d502d // addvl x13, x13, #1
    WORD $0x04fc952a // lsr z10.d, z9.d, #4                         
    WORD $0x04263129 // and z9.d, z9.d, z6.d                        
    WORD $0x0426314a // and z10.d, z10.d, z6.d                      
    WORD $0x858c4047 // ldr z7, [x2, #96, MUL VL]                   
    WORD $0x858c4448 // ldr z8, [x2, #97, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x858c4847 // ldr z7, [x2, #98, MUL VL]                   
    WORD $0x858c4c48 // ldr z8, [x2, #99, MUL VL]                   
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x858c5047 // ldr z7, [x2, #100, MUL VL]                  
    WORD $0x858c5448 // ldr z8, [x2, #101, MUL VL]                  
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x858c5847 // ldr z7, [x2, #102, MUL VL]                  
    WORD $0x858c5c48 // ldr z8, [x2, #103, MUL VL]                  
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    WORD $0x858d4047 // ldr z7, [x2, #104, MUL VL]                  
    WORD $0x858d4448 // ldr z8, [x2, #105, MUL VL]                  
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x858d4847 // ldr z7, [x2, #106, MUL VL]                  
    WORD $0x858d4c48 // ldr z8, [x2, #107, MUL VL]                  
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a730a5 // eor z5.d, z5.d, z7.d                        
    WORD $0x04a830a5 // eor z5.d, z5.d, z8.d                        
    // Check for early termination
    CMP    $9, R16
    BEQ    mulSve_10x6Xor_store

    // Load and process 32 bytes from input 9 to 6 outputs
    WORD $0x85804069 // ldr z9, [x3]                                
    WORD $0x04235023 // addvl x3, x3, #1
    WORD $0x04fc952a // lsr z10.d, z9.d, #4                         
    WORD $0x04263129 // and z9.d, z9.d, z6.d                        
    WORD $0x0426314a // and z10.d, z10.d, z6.d                      
    WORD $0x858d5047 // ldr z7, [x2, #108, MUL VL]                  
    WORD $0x858d5448 // ldr z8, [x2, #109, MUL VL]                  
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73000 // eor z0.d, z0.d, z7.d                        
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x858d5847 // ldr z7, [x2, #110, MUL VL]                  
    WORD $0x858d5c48 // ldr z8, [x2, #111, MUL VL]                  
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73021 // eor z1.d, z1.d, z7.d                        
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x858e4047 // ldr z7, [x2, #112, MUL VL]                  
    WORD $0x858e4448 // ldr z8, [x2, #113, MUL VL]                  
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73042 // eor z2.d, z2.d, z7.d                        
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x858e4847 // ldr z7, [x2, #114, MUL VL]                  
    WORD $0x858e4c48 // ldr z8, [x2, #115, MUL VL]                  
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73063 // eor z3.d, z3.d, z7.d                        
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    WORD $0x858e5047 // ldr z7, [x2, #116, MUL VL]                  
    WORD $0x858e5448 // ldr z8, [x2, #117, MUL VL]                  
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a73084 // eor z4.d, z4.d, z7.d                        
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x858e5847 // ldr z7, [x2, #118, MUL VL]                  
    WORD $0x858e5c48 // ldr z8, [x2, #119, MUL VL]                  
    WORD $0x052930e7 // tbl z7.b, z7.b, z9.b                        
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x04a730a5 // eor z5.d, z5.d, z7.d                        
    WORD $0x04a830a5 // eor z5.d, z5.d, z8.d                        

mulSve_10x6Xor_store:
    // Store 6 outputs
    MOVD (R14), R6
    WORD $0xe5ef40c0 // st1d { z0.d }, p0, [x6, x15, lsl #3]        
    MOVD 24(R14), R6
    WORD $0xe5ef40c1 // st1d { z1.d }, p0, [x6, x15, lsl #3]        
    MOVD 48(R14), R6
    WORD $0xe5ef40c2 // st1d { z2.d }, p0, [x6, x15, lsl #3]        
    MOVD 72(R14), R6
    WORD $0xe5ef40c3 // st1d { z3.d }, p0, [x6, x15, lsl #3]        
    MOVD 96(R14), R6
    WORD $0xe5ef40c4 // st1d { z4.d }, p0, [x6, x15, lsl #3]        
    MOVD 120(R14), R6
    WORD $0xe5ef40c5 // st1d { z5.d }, p0, [x6, x15, lsl #3]        

    // Prepare for next loop
    WORD $0x8b1101ef // add x15, x15, x17
    WORD $0xf1000400 // subs x0, x0, #1                             
    BNE  mulSve_10x6Xor_loop

mulSve_10x6Xor_end:
    RET

// func mulSve_10x7(matrix []byte, in [][]byte, out [][]byte, start int, n int)
// Requires: SVE
TEXT Â·mulSve_10x7(SB), NOSPLIT, $8-88
    WORD $0x25d8e3e0 // ptrue p0.d
    // Loading no tables to registers
    // Destination kept on stack
    // Full registers estimated 152 YMM used
    MOVD n+80(FP), R0
    MOVD matrix_base+0(FP), R2
    WORD $0xd345fc00 // lsr x0, x0, #5                              
    WORD $0xd37be800 // lsl x0, x0, #5
    WORD $0x04bf5030 // rdvl x16, #1
    WORD $0x9ad00800 // udiv x0, x0, x16
    WORD $0xea00001f // tst x0, x0                                  
    BEQ    mulSve_10x7_end
    MOVD in_base+24(FP), R3
    MOVD (R3), R1
    MOVD 24(R3), R4
    MOVD 48(R3), R5
    MOVD 72(R3), R8
    MOVD 96(R3), R9
    MOVD 120(R3), R10
    MOVD 144(R3), R11
    MOVD 168(R3), R12
    MOVD 192(R3), R13
    MOVD 216(R3), R3
    MOVD out_base+48(FP), R14
    MOVD start+72(FP), R15

    // Add start offset to input
    WORD $0x8b0f0021 // add x1, x1, x15                             
    WORD $0x8b0f0084 // add x4, x4, x15                             
    WORD $0x8b0f00a5 // add x5, x5, x15                             
    WORD $0x8b0f0108 // add x8, x8, x15                             
    WORD $0x8b0f0129 // add x9, x9, x15                             
    WORD $0x8b0f014a // add x10, x10, x15                           
    WORD $0x8b0f016b // add x11, x11, x15                           
    WORD $0x8b0f018c // add x12, x12, x15                           
    WORD $0x8b0f01ad // add x13, x13, x15                           
    WORD $0x8b0f0063 // add x3, x3, x15                             
    WORD $0xd343fdef // lsr x15, x15, #3                            
    WORD $0xd28001e6 // mov x6, #15                                 
    WORD $0x05e038c7 // mov z7.d, x6                                
    WORD $0x052120e7 // dup z7.b, z7.b[0]                           

    // Load number of input shards
    MOVD   in_len+32(FP), R16
    WORD $0x04bf5031 // rdvl x17, #1
    WORD $0xd343fe31 // lsr  x17, x17, #3

mulSve_10x7_loop:
    // Load and process 32 bytes from input 0 to 7 outputs
    WORD $0x8580402a // ldr z10, [x1]                               
    WORD $0x04215021 // addvl x1, x1, #1
    WORD $0x04fc954b // lsr z11.d, z10.d, #4                        
    WORD $0x0427314a // and z10.d, z10.d, z7.d                      
    WORD $0x0427316b // and z11.d, z11.d, z7.d                      
    WORD $0x85804048 // ldr z8, [x2]                                
    WORD $0x85804449 // ldr z9, [x2, #1, MUL VL]                    
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83120 // eor z0.d, z9.d, z8.d                        
    WORD $0x85804848 // ldr z8, [x2, #2, MUL VL]                    
    WORD $0x85804c49 // ldr z9, [x2, #3, MUL VL]                    
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83121 // eor z1.d, z9.d, z8.d                        
    WORD $0x85805048 // ldr z8, [x2, #4, MUL VL]                    
    WORD $0x85805449 // ldr z9, [x2, #5, MUL VL]                    
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83122 // eor z2.d, z9.d, z8.d                        
    WORD $0x85805848 // ldr z8, [x2, #6, MUL VL]                    
    WORD $0x85805c49 // ldr z9, [x2, #7, MUL VL]                    
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83123 // eor z3.d, z9.d, z8.d                        
    WORD $0x85814048 // ldr z8, [x2, #8, MUL VL]                    
    WORD $0x85814449 // ldr z9, [x2, #9, MUL VL]                    
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83124 // eor z4.d, z9.d, z8.d                        
    WORD $0x85814848 // ldr z8, [x2, #10, MUL VL]                   
    WORD $0x85814c49 // ldr z9, [x2, #11, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83125 // eor z5.d, z9.d, z8.d                        
    WORD $0x85815048 // ldr z8, [x2, #12, MUL VL]                   
    WORD $0x85815449 // ldr z9, [x2, #13, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83126 // eor z6.d, z9.d, z8.d                        
    // Check for early termination
    CMP    $1, R16
    BEQ    mulSve_10x7_store

    // Load and process 32 bytes from input 1 to 7 outputs
    WORD $0x8580408a // ldr z10, [x4]                               
    WORD $0x04245024 // addvl x4, x4, #1
    WORD $0x04fc954b // lsr z11.d, z10.d, #4                        
    WORD $0x0427314a // and z10.d, z10.d, z7.d                      
    WORD $0x0427316b // and z11.d, z11.d, z7.d                      
    WORD $0x85815848 // ldr z8, [x2, #14, MUL VL]                   
    WORD $0x85815c49 // ldr z9, [x2, #15, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x04a93000 // eor z0.d, z0.d, z9.d                        
    WORD $0x85824048 // ldr z8, [x2, #16, MUL VL]                   
    WORD $0x85824449 // ldr z9, [x2, #17, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x85824848 // ldr z8, [x2, #18, MUL VL]                   
    WORD $0x85824c49 // ldr z9, [x2, #19, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x04a93042 // eor z2.d, z2.d, z9.d                        
    WORD $0x85825048 // ldr z8, [x2, #20, MUL VL]                   
    WORD $0x85825449 // ldr z9, [x2, #21, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x85825848 // ldr z8, [x2, #22, MUL VL]                   
    WORD $0x85825c49 // ldr z9, [x2, #23, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x04a93084 // eor z4.d, z4.d, z9.d                        
    WORD $0x85834048 // ldr z8, [x2, #24, MUL VL]                   
    WORD $0x85834449 // ldr z9, [x2, #25, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a830a5 // eor z5.d, z5.d, z8.d                        
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x85834848 // ldr z8, [x2, #26, MUL VL]                   
    WORD $0x85834c49 // ldr z9, [x2, #27, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a830c6 // eor z6.d, z6.d, z8.d                        
    WORD $0x04a930c6 // eor z6.d, z6.d, z9.d                        
    // Check for early termination
    CMP    $2, R16
    BEQ    mulSve_10x7_store

    // Load and process 32 bytes from input 2 to 7 outputs
    WORD $0x858040aa // ldr z10, [x5]                               
    WORD $0x04255025 // addvl x5, x5, #1
    WORD $0x04fc954b // lsr z11.d, z10.d, #4                        
    WORD $0x0427314a // and z10.d, z10.d, z7.d                      
    WORD $0x0427316b // and z11.d, z11.d, z7.d                      
    WORD $0x85835048 // ldr z8, [x2, #28, MUL VL]                   
    WORD $0x85835449 // ldr z9, [x2, #29, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x04a93000 // eor z0.d, z0.d, z9.d                        
    WORD $0x85835848 // ldr z8, [x2, #30, MUL VL]                   
    WORD $0x85835c49 // ldr z9, [x2, #31, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x85844048 // ldr z8, [x2, #32, MUL VL]                   
    WORD $0x85844449 // ldr z9, [x2, #33, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x04a93042 // eor z2.d, z2.d, z9.d                        
    WORD $0x85844848 // ldr z8, [x2, #34, MUL VL]                   
    WORD $0x85844c49 // ldr z9, [x2, #35, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x85845048 // ldr z8, [x2, #36, MUL VL]                   
    WORD $0x85845449 // ldr z9, [x2, #37, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x04a93084 // eor z4.d, z4.d, z9.d                        
    WORD $0x85845848 // ldr z8, [x2, #38, MUL VL]                   
    WORD $0x85845c49 // ldr z9, [x2, #39, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a830a5 // eor z5.d, z5.d, z8.d                        
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x85854048 // ldr z8, [x2, #40, MUL VL]                   
    WORD $0x85854449 // ldr z9, [x2, #41, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a830c6 // eor z6.d, z6.d, z8.d                        
    WORD $0x04a930c6 // eor z6.d, z6.d, z9.d                        
    // Check for early termination
    CMP    $3, R16
    BEQ    mulSve_10x7_store

    // Load and process 32 bytes from input 3 to 7 outputs
    WORD $0x8580410a // ldr z10, [x8]                               
    WORD $0x04285028 // addvl x8, x8, #1
    WORD $0x04fc954b // lsr z11.d, z10.d, #4                        
    WORD $0x0427314a // and z10.d, z10.d, z7.d                      
    WORD $0x0427316b // and z11.d, z11.d, z7.d                      
    WORD $0x85854848 // ldr z8, [x2, #42, MUL VL]                   
    WORD $0x85854c49 // ldr z9, [x2, #43, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x04a93000 // eor z0.d, z0.d, z9.d                        
    WORD $0x85855048 // ldr z8, [x2, #44, MUL VL]                   
    WORD $0x85855449 // ldr z9, [x2, #45, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x85855848 // ldr z8, [x2, #46, MUL VL]                   
    WORD $0x85855c49 // ldr z9, [x2, #47, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x04a93042 // eor z2.d, z2.d, z9.d                        
    WORD $0x85864048 // ldr z8, [x2, #48, MUL VL]                   
    WORD $0x85864449 // ldr z9, [x2, #49, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x85864848 // ldr z8, [x2, #50, MUL VL]                   
    WORD $0x85864c49 // ldr z9, [x2, #51, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x04a93084 // eor z4.d, z4.d, z9.d                        
    WORD $0x85865048 // ldr z8, [x2, #52, MUL VL]                   
    WORD $0x85865449 // ldr z9, [x2, #53, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a830a5 // eor z5.d, z5.d, z8.d                        
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x85865848 // ldr z8, [x2, #54, MUL VL]                   
    WORD $0x85865c49 // ldr z9, [x2, #55, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a830c6 // eor z6.d, z6.d, z8.d                        
    WORD $0x04a930c6 // eor z6.d, z6.d, z9.d                        
    // Check for early termination
    CMP    $4, R16
    BEQ    mulSve_10x7_store

    // Load and process 32 bytes from input 4 to 7 outputs
    WORD $0x8580412a // ldr z10, [x9]                               
    WORD $0x04295029 // addvl x9, x9, #1
    WORD $0x04fc954b // lsr z11.d, z10.d, #4                        
    WORD $0x0427314a // and z10.d, z10.d, z7.d                      
    WORD $0x0427316b // and z11.d, z11.d, z7.d                      
    WORD $0x85874048 // ldr z8, [x2, #56, MUL VL]                   
    WORD $0x85874449 // ldr z9, [x2, #57, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x04a93000 // eor z0.d, z0.d, z9.d                        
    WORD $0x85874848 // ldr z8, [x2, #58, MUL VL]                   
    WORD $0x85874c49 // ldr z9, [x2, #59, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x85875048 // ldr z8, [x2, #60, MUL VL]                   
    WORD $0x85875449 // ldr z9, [x2, #61, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x04a93042 // eor z2.d, z2.d, z9.d                        
    WORD $0x85875848 // ldr z8, [x2, #62, MUL VL]                   
    WORD $0x85875c49 // ldr z9, [x2, #63, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x85884048 // ldr z8, [x2, #64, MUL VL]                   
    WORD $0x85884449 // ldr z9, [x2, #65, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x04a93084 // eor z4.d, z4.d, z9.d                        
    WORD $0x85884848 // ldr z8, [x2, #66, MUL VL]                   
    WORD $0x85884c49 // ldr z9, [x2, #67, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a830a5 // eor z5.d, z5.d, z8.d                        
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x85885048 // ldr z8, [x2, #68, MUL VL]                   
    WORD $0x85885449 // ldr z9, [x2, #69, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a830c6 // eor z6.d, z6.d, z8.d                        
    WORD $0x04a930c6 // eor z6.d, z6.d, z9.d                        
    // Check for early termination
    CMP    $5, R16
    BEQ    mulSve_10x7_store

    // Load and process 32 bytes from input 5 to 7 outputs
    WORD $0x8580414a // ldr z10, [x10]                              
    WORD $0x042a502a // addvl x10, x10, #1
    WORD $0x04fc954b // lsr z11.d, z10.d, #4                        
    WORD $0x0427314a // and z10.d, z10.d, z7.d                      
    WORD $0x0427316b // and z11.d, z11.d, z7.d                      
    WORD $0x85885848 // ldr z8, [x2, #70, MUL VL]                   
    WORD $0x85885c49 // ldr z9, [x2, #71, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x04a93000 // eor z0.d, z0.d, z9.d                        
    WORD $0x85894048 // ldr z8, [x2, #72, MUL VL]                   
    WORD $0x85894449 // ldr z9, [x2, #73, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x85894848 // ldr z8, [x2, #74, MUL VL]                   
    WORD $0x85894c49 // ldr z9, [x2, #75, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x04a93042 // eor z2.d, z2.d, z9.d                        
    WORD $0x85895048 // ldr z8, [x2, #76, MUL VL]                   
    WORD $0x85895449 // ldr z9, [x2, #77, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x85895848 // ldr z8, [x2, #78, MUL VL]                   
    WORD $0x85895c49 // ldr z9, [x2, #79, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x04a93084 // eor z4.d, z4.d, z9.d                        
    WORD $0x858a4048 // ldr z8, [x2, #80, MUL VL]                   
    WORD $0x858a4449 // ldr z9, [x2, #81, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a830a5 // eor z5.d, z5.d, z8.d                        
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x858a4848 // ldr z8, [x2, #82, MUL VL]                   
    WORD $0x858a4c49 // ldr z9, [x2, #83, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a830c6 // eor z6.d, z6.d, z8.d                        
    WORD $0x04a930c6 // eor z6.d, z6.d, z9.d                        
    // Check for early termination
    CMP    $6, R16
    BEQ    mulSve_10x7_store

    // Load and process 32 bytes from input 6 to 7 outputs
    WORD $0x8580416a // ldr z10, [x11]                              
    WORD $0x042b502b // addvl x11, x11, #1
    WORD $0x04fc954b // lsr z11.d, z10.d, #4                        
    WORD $0x0427314a // and z10.d, z10.d, z7.d                      
    WORD $0x0427316b // and z11.d, z11.d, z7.d                      
    WORD $0x858a5048 // ldr z8, [x2, #84, MUL VL]                   
    WORD $0x858a5449 // ldr z9, [x2, #85, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x04a93000 // eor z0.d, z0.d, z9.d                        
    WORD $0x858a5848 // ldr z8, [x2, #86, MUL VL]                   
    WORD $0x858a5c49 // ldr z9, [x2, #87, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x858b4048 // ldr z8, [x2, #88, MUL VL]                   
    WORD $0x858b4449 // ldr z9, [x2, #89, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x04a93042 // eor z2.d, z2.d, z9.d                        
    WORD $0x858b4848 // ldr z8, [x2, #90, MUL VL]                   
    WORD $0x858b4c49 // ldr z9, [x2, #91, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x858b5048 // ldr z8, [x2, #92, MUL VL]                   
    WORD $0x858b5449 // ldr z9, [x2, #93, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x04a93084 // eor z4.d, z4.d, z9.d                        
    WORD $0x858b5848 // ldr z8, [x2, #94, MUL VL]                   
    WORD $0x858b5c49 // ldr z9, [x2, #95, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a830a5 // eor z5.d, z5.d, z8.d                        
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x858c4048 // ldr z8, [x2, #96, MUL VL]                   
    WORD $0x858c4449 // ldr z9, [x2, #97, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a830c6 // eor z6.d, z6.d, z8.d                        
    WORD $0x04a930c6 // eor z6.d, z6.d, z9.d                        
    // Check for early termination
    CMP    $7, R16
    BEQ    mulSve_10x7_store

    // Load and process 32 bytes from input 7 to 7 outputs
    WORD $0x8580418a // ldr z10, [x12]                              
    WORD $0x042c502c // addvl x12, x12, #1
    WORD $0x04fc954b // lsr z11.d, z10.d, #4                        
    WORD $0x0427314a // and z10.d, z10.d, z7.d                      
    WORD $0x0427316b // and z11.d, z11.d, z7.d                      
    WORD $0x858c4848 // ldr z8, [x2, #98, MUL VL]                   
    WORD $0x858c4c49 // ldr z9, [x2, #99, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x04a93000 // eor z0.d, z0.d, z9.d                        
    WORD $0x858c5048 // ldr z8, [x2, #100, MUL VL]                  
    WORD $0x858c5449 // ldr z9, [x2, #101, MUL VL]                  
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x858c5848 // ldr z8, [x2, #102, MUL VL]                  
    WORD $0x858c5c49 // ldr z9, [x2, #103, MUL VL]                  
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x04a93042 // eor z2.d, z2.d, z9.d                        
    WORD $0x858d4048 // ldr z8, [x2, #104, MUL VL]                  
    WORD $0x858d4449 // ldr z9, [x2, #105, MUL VL]                  
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x858d4848 // ldr z8, [x2, #106, MUL VL]                  
    WORD $0x858d4c49 // ldr z9, [x2, #107, MUL VL]                  
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x04a93084 // eor z4.d, z4.d, z9.d                        
    WORD $0x858d5048 // ldr z8, [x2, #108, MUL VL]                  
    WORD $0x858d5449 // ldr z9, [x2, #109, MUL VL]                  
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a830a5 // eor z5.d, z5.d, z8.d                        
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x858d5848 // ldr z8, [x2, #110, MUL VL]                  
    WORD $0x858d5c49 // ldr z9, [x2, #111, MUL VL]                  
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a830c6 // eor z6.d, z6.d, z8.d                        
    WORD $0x04a930c6 // eor z6.d, z6.d, z9.d                        
    // Check for early termination
    CMP    $8, R16
    BEQ    mulSve_10x7_store

    // Load and process 32 bytes from input 8 to 7 outputs
    WORD $0x858041aa // ldr z10, [x13]                              
    WORD $0x042d502d // addvl x13, x13, #1
    WORD $0x04fc954b // lsr z11.d, z10.d, #4                        
    WORD $0x0427314a // and z10.d, z10.d, z7.d                      
    WORD $0x0427316b // and z11.d, z11.d, z7.d                      
    WORD $0x858e4048 // ldr z8, [x2, #112, MUL VL]                  
    WORD $0x858e4449 // ldr z9, [x2, #113, MUL VL]                  
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x04a93000 // eor z0.d, z0.d, z9.d                        
    WORD $0x858e4848 // ldr z8, [x2, #114, MUL VL]                  
    WORD $0x858e4c49 // ldr z9, [x2, #115, MUL VL]                  
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x858e5048 // ldr z8, [x2, #116, MUL VL]                  
    WORD $0x858e5449 // ldr z9, [x2, #117, MUL VL]                  
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x04a93042 // eor z2.d, z2.d, z9.d                        
    WORD $0x858e5848 // ldr z8, [x2, #118, MUL VL]                  
    WORD $0x858e5c49 // ldr z9, [x2, #119, MUL VL]                  
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x858f4048 // ldr z8, [x2, #120, MUL VL]                  
    WORD $0x858f4449 // ldr z9, [x2, #121, MUL VL]                  
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x04a93084 // eor z4.d, z4.d, z9.d                        
    WORD $0x858f4848 // ldr z8, [x2, #122, MUL VL]                  
    WORD $0x858f4c49 // ldr z9, [x2, #123, MUL VL]                  
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a830a5 // eor z5.d, z5.d, z8.d                        
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x858f5048 // ldr z8, [x2, #124, MUL VL]                  
    WORD $0x858f5449 // ldr z9, [x2, #125, MUL VL]                  
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a830c6 // eor z6.d, z6.d, z8.d                        
    WORD $0x04a930c6 // eor z6.d, z6.d, z9.d                        
    // Check for early termination
    CMP    $9, R16
    BEQ    mulSve_10x7_store

    // Load and process 32 bytes from input 9 to 7 outputs
    WORD $0x8580406a // ldr z10, [x3]                               
    WORD $0x04235023 // addvl x3, x3, #1
    WORD $0x04fc954b // lsr z11.d, z10.d, #4                        
    WORD $0x0427314a // and z10.d, z10.d, z7.d                      
    WORD $0x0427316b // and z11.d, z11.d, z7.d                      
    WORD $0x858f5848 // ldr z8, [x2, #126, MUL VL]                  
    WORD $0x858f5c49 // ldr z9, [x2, #127, MUL VL]                  
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x04a93000 // eor z0.d, z0.d, z9.d                        
    WORD $0x85904048 // ldr z8, [x2, #128, MUL VL]                  
    WORD $0x85904449 // ldr z9, [x2, #129, MUL VL]                  
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x85904848 // ldr z8, [x2, #130, MUL VL]                  
    WORD $0x85904c49 // ldr z9, [x2, #131, MUL VL]                  
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x04a93042 // eor z2.d, z2.d, z9.d                        
    WORD $0x85905048 // ldr z8, [x2, #132, MUL VL]                  
    WORD $0x85905449 // ldr z9, [x2, #133, MUL VL]                  
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x85905848 // ldr z8, [x2, #134, MUL VL]                  
    WORD $0x85905c49 // ldr z9, [x2, #135, MUL VL]                  
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x04a93084 // eor z4.d, z4.d, z9.d                        
    WORD $0x85914048 // ldr z8, [x2, #136, MUL VL]                  
    WORD $0x85914449 // ldr z9, [x2, #137, MUL VL]                  
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a830a5 // eor z5.d, z5.d, z8.d                        
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x85914848 // ldr z8, [x2, #138, MUL VL]                  
    WORD $0x85914c49 // ldr z9, [x2, #139, MUL VL]                  
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a830c6 // eor z6.d, z6.d, z8.d                        
    WORD $0x04a930c6 // eor z6.d, z6.d, z9.d                        

mulSve_10x7_store:
    // Store 7 outputs
    MOVD (R14), R6
    WORD $0xe5ef40c0 // st1d { z0.d }, p0, [x6, x15, lsl #3]        
    MOVD 24(R14), R6
    WORD $0xe5ef40c1 // st1d { z1.d }, p0, [x6, x15, lsl #3]        
    MOVD 48(R14), R6
    WORD $0xe5ef40c2 // st1d { z2.d }, p0, [x6, x15, lsl #3]        
    MOVD 72(R14), R6
    WORD $0xe5ef40c3 // st1d { z3.d }, p0, [x6, x15, lsl #3]        
    MOVD 96(R14), R6
    WORD $0xe5ef40c4 // st1d { z4.d }, p0, [x6, x15, lsl #3]        
    MOVD 120(R14), R6
    WORD $0xe5ef40c5 // st1d { z5.d }, p0, [x6, x15, lsl #3]        
    MOVD 144(R14), R6
    WORD $0xe5ef40c6 // st1d { z6.d }, p0, [x6, x15, lsl #3]        

    // Prepare for next loop
    WORD $0x8b1101ef // add x15, x15, x17
    WORD $0xf1000400 // subs x0, x0, #1                             
    BNE  mulSve_10x7_loop

mulSve_10x7_end:
    RET

// func mulSve_10x7Xor(matrix []byte, in [][]byte, out [][]byte, start int, n int)
// Requires: SVE
TEXT Â·mulSve_10x7Xor(SB), NOSPLIT, $8-88
    WORD $0x25d8e3e0 // ptrue p0.d
    // Loading no tables to registers
    // Destination kept on stack
    // Full registers estimated 152 YMM used
    MOVD n+80(FP), R0
    MOVD matrix_base+0(FP), R2
    WORD $0xd345fc00 // lsr x0, x0, #5                              
    WORD $0xd37be800 // lsl x0, x0, #5
    WORD $0x04bf5030 // rdvl x16, #1
    WORD $0x9ad00800 // udiv x0, x0, x16
    WORD $0xea00001f // tst x0, x0                                  
    BEQ    mulSve_10x7Xor_end
    MOVD in_base+24(FP), R3
    MOVD (R3), R1
    MOVD 24(R3), R4
    MOVD 48(R3), R5
    MOVD 72(R3), R8
    MOVD 96(R3), R9
    MOVD 120(R3), R10
    MOVD 144(R3), R11
    MOVD 168(R3), R12
    MOVD 192(R3), R13
    MOVD 216(R3), R3
    MOVD out_base+48(FP), R14
    MOVD start+72(FP), R15

    // Add start offset to input
    WORD $0x8b0f0021 // add x1, x1, x15                             
    WORD $0x8b0f0084 // add x4, x4, x15                             
    WORD $0x8b0f00a5 // add x5, x5, x15                             
    WORD $0x8b0f0108 // add x8, x8, x15                             
    WORD $0x8b0f0129 // add x9, x9, x15                             
    WORD $0x8b0f014a // add x10, x10, x15                           
    WORD $0x8b0f016b // add x11, x11, x15                           
    WORD $0x8b0f018c // add x12, x12, x15                           
    WORD $0x8b0f01ad // add x13, x13, x15                           
    WORD $0x8b0f0063 // add x3, x3, x15                             
    WORD $0xd343fdef // lsr x15, x15, #3                            
    WORD $0xd28001e6 // mov x6, #15                                 
    WORD $0x05e038c7 // mov z7.d, x6                                
    WORD $0x052120e7 // dup z7.b, z7.b[0]                           

    // Load number of input shards
    MOVD   in_len+32(FP), R16
    WORD $0x04bf5031 // rdvl x17, #1
    WORD $0xd343fe31 // lsr  x17, x17, #3

mulSve_10x7Xor_loop:
    // Load and process 32 bytes from input 0 to 7 outputs
    WORD $0x8580402a // ldr z10, [x1]                               
    WORD $0x04215021 // addvl x1, x1, #1
    WORD $0x04fc954b // lsr z11.d, z10.d, #4                        
    WORD $0x0427314a // and z10.d, z10.d, z7.d                      
    WORD $0x0427316b // and z11.d, z11.d, z7.d                      
    MOVD (R14), R6
    WORD $0xa5ef40c0 // ld1d { z0.d }, p0/z, [x6, x15, lsl #3]      
    WORD $0x85804048 // ldr z8, [x2]                                
    WORD $0x85804449 // ldr z9, [x2, #1, MUL VL]                    
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x04a93000 // eor z0.d, z0.d, z9.d                        
    MOVD 24(R14), R6
    WORD $0xa5ef40c1 // ld1d { z1.d }, p0/z, [x6, x15, lsl #3]      
    WORD $0x85804848 // ldr z8, [x2, #2, MUL VL]                    
    WORD $0x85804c49 // ldr z9, [x2, #3, MUL VL]                    
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    MOVD 48(R14), R6
    WORD $0xa5ef40c2 // ld1d { z2.d }, p0/z, [x6, x15, lsl #3]      
    WORD $0x85805048 // ldr z8, [x2, #4, MUL VL]                    
    WORD $0x85805449 // ldr z9, [x2, #5, MUL VL]                    
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x04a93042 // eor z2.d, z2.d, z9.d                        
    MOVD 72(R14), R6
    WORD $0xa5ef40c3 // ld1d { z3.d }, p0/z, [x6, x15, lsl #3]      
    WORD $0x85805848 // ldr z8, [x2, #6, MUL VL]                    
    WORD $0x85805c49 // ldr z9, [x2, #7, MUL VL]                    
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    MOVD 96(R14), R6
    WORD $0xa5ef40c4 // ld1d { z4.d }, p0/z, [x6, x15, lsl #3]      
    WORD $0x85814048 // ldr z8, [x2, #8, MUL VL]                    
    WORD $0x85814449 // ldr z9, [x2, #9, MUL VL]                    
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x04a93084 // eor z4.d, z4.d, z9.d                        
    MOVD 120(R14), R6
    WORD $0xa5ef40c5 // ld1d { z5.d }, p0/z, [x6, x15, lsl #3]      
    WORD $0x85814848 // ldr z8, [x2, #10, MUL VL]                   
    WORD $0x85814c49 // ldr z9, [x2, #11, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a830a5 // eor z5.d, z5.d, z8.d                        
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    MOVD 144(R14), R6
    WORD $0xa5ef40c6 // ld1d { z6.d }, p0/z, [x6, x15, lsl #3]      
    WORD $0x85815048 // ldr z8, [x2, #12, MUL VL]                   
    WORD $0x85815449 // ldr z9, [x2, #13, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a830c6 // eor z6.d, z6.d, z8.d                        
    WORD $0x04a930c6 // eor z6.d, z6.d, z9.d                        
    // Check for early termination
    CMP    $1, R16
    BEQ    mulSve_10x7Xor_store

    // Load and process 32 bytes from input 1 to 7 outputs
    WORD $0x8580408a // ldr z10, [x4]                               
    WORD $0x04245024 // addvl x4, x4, #1
    WORD $0x04fc954b // lsr z11.d, z10.d, #4                        
    WORD $0x0427314a // and z10.d, z10.d, z7.d                      
    WORD $0x0427316b // and z11.d, z11.d, z7.d                      
    WORD $0x85815848 // ldr z8, [x2, #14, MUL VL]                   
    WORD $0x85815c49 // ldr z9, [x2, #15, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x04a93000 // eor z0.d, z0.d, z9.d                        
    WORD $0x85824048 // ldr z8, [x2, #16, MUL VL]                   
    WORD $0x85824449 // ldr z9, [x2, #17, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x85824848 // ldr z8, [x2, #18, MUL VL]                   
    WORD $0x85824c49 // ldr z9, [x2, #19, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x04a93042 // eor z2.d, z2.d, z9.d                        
    WORD $0x85825048 // ldr z8, [x2, #20, MUL VL]                   
    WORD $0x85825449 // ldr z9, [x2, #21, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x85825848 // ldr z8, [x2, #22, MUL VL]                   
    WORD $0x85825c49 // ldr z9, [x2, #23, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x04a93084 // eor z4.d, z4.d, z9.d                        
    WORD $0x85834048 // ldr z8, [x2, #24, MUL VL]                   
    WORD $0x85834449 // ldr z9, [x2, #25, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a830a5 // eor z5.d, z5.d, z8.d                        
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x85834848 // ldr z8, [x2, #26, MUL VL]                   
    WORD $0x85834c49 // ldr z9, [x2, #27, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a830c6 // eor z6.d, z6.d, z8.d                        
    WORD $0x04a930c6 // eor z6.d, z6.d, z9.d                        
    // Check for early termination
    CMP    $2, R16
    BEQ    mulSve_10x7Xor_store

    // Load and process 32 bytes from input 2 to 7 outputs
    WORD $0x858040aa // ldr z10, [x5]                               
    WORD $0x04255025 // addvl x5, x5, #1
    WORD $0x04fc954b // lsr z11.d, z10.d, #4                        
    WORD $0x0427314a // and z10.d, z10.d, z7.d                      
    WORD $0x0427316b // and z11.d, z11.d, z7.d                      
    WORD $0x85835048 // ldr z8, [x2, #28, MUL VL]                   
    WORD $0x85835449 // ldr z9, [x2, #29, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x04a93000 // eor z0.d, z0.d, z9.d                        
    WORD $0x85835848 // ldr z8, [x2, #30, MUL VL]                   
    WORD $0x85835c49 // ldr z9, [x2, #31, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x85844048 // ldr z8, [x2, #32, MUL VL]                   
    WORD $0x85844449 // ldr z9, [x2, #33, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x04a93042 // eor z2.d, z2.d, z9.d                        
    WORD $0x85844848 // ldr z8, [x2, #34, MUL VL]                   
    WORD $0x85844c49 // ldr z9, [x2, #35, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x85845048 // ldr z8, [x2, #36, MUL VL]                   
    WORD $0x85845449 // ldr z9, [x2, #37, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x04a93084 // eor z4.d, z4.d, z9.d                        
    WORD $0x85845848 // ldr z8, [x2, #38, MUL VL]                   
    WORD $0x85845c49 // ldr z9, [x2, #39, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a830a5 // eor z5.d, z5.d, z8.d                        
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x85854048 // ldr z8, [x2, #40, MUL VL]                   
    WORD $0x85854449 // ldr z9, [x2, #41, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a830c6 // eor z6.d, z6.d, z8.d                        
    WORD $0x04a930c6 // eor z6.d, z6.d, z9.d                        
    // Check for early termination
    CMP    $3, R16
    BEQ    mulSve_10x7Xor_store

    // Load and process 32 bytes from input 3 to 7 outputs
    WORD $0x8580410a // ldr z10, [x8]                               
    WORD $0x04285028 // addvl x8, x8, #1
    WORD $0x04fc954b // lsr z11.d, z10.d, #4                        
    WORD $0x0427314a // and z10.d, z10.d, z7.d                      
    WORD $0x0427316b // and z11.d, z11.d, z7.d                      
    WORD $0x85854848 // ldr z8, [x2, #42, MUL VL]                   
    WORD $0x85854c49 // ldr z9, [x2, #43, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x04a93000 // eor z0.d, z0.d, z9.d                        
    WORD $0x85855048 // ldr z8, [x2, #44, MUL VL]                   
    WORD $0x85855449 // ldr z9, [x2, #45, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x85855848 // ldr z8, [x2, #46, MUL VL]                   
    WORD $0x85855c49 // ldr z9, [x2, #47, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x04a93042 // eor z2.d, z2.d, z9.d                        
    WORD $0x85864048 // ldr z8, [x2, #48, MUL VL]                   
    WORD $0x85864449 // ldr z9, [x2, #49, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x85864848 // ldr z8, [x2, #50, MUL VL]                   
    WORD $0x85864c49 // ldr z9, [x2, #51, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x04a93084 // eor z4.d, z4.d, z9.d                        
    WORD $0x85865048 // ldr z8, [x2, #52, MUL VL]                   
    WORD $0x85865449 // ldr z9, [x2, #53, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a830a5 // eor z5.d, z5.d, z8.d                        
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x85865848 // ldr z8, [x2, #54, MUL VL]                   
    WORD $0x85865c49 // ldr z9, [x2, #55, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a830c6 // eor z6.d, z6.d, z8.d                        
    WORD $0x04a930c6 // eor z6.d, z6.d, z9.d                        
    // Check for early termination
    CMP    $4, R16
    BEQ    mulSve_10x7Xor_store

    // Load and process 32 bytes from input 4 to 7 outputs
    WORD $0x8580412a // ldr z10, [x9]                               
    WORD $0x04295029 // addvl x9, x9, #1
    WORD $0x04fc954b // lsr z11.d, z10.d, #4                        
    WORD $0x0427314a // and z10.d, z10.d, z7.d                      
    WORD $0x0427316b // and z11.d, z11.d, z7.d                      
    WORD $0x85874048 // ldr z8, [x2, #56, MUL VL]                   
    WORD $0x85874449 // ldr z9, [x2, #57, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x04a93000 // eor z0.d, z0.d, z9.d                        
    WORD $0x85874848 // ldr z8, [x2, #58, MUL VL]                   
    WORD $0x85874c49 // ldr z9, [x2, #59, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x85875048 // ldr z8, [x2, #60, MUL VL]                   
    WORD $0x85875449 // ldr z9, [x2, #61, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x04a93042 // eor z2.d, z2.d, z9.d                        
    WORD $0x85875848 // ldr z8, [x2, #62, MUL VL]                   
    WORD $0x85875c49 // ldr z9, [x2, #63, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x85884048 // ldr z8, [x2, #64, MUL VL]                   
    WORD $0x85884449 // ldr z9, [x2, #65, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x04a93084 // eor z4.d, z4.d, z9.d                        
    WORD $0x85884848 // ldr z8, [x2, #66, MUL VL]                   
    WORD $0x85884c49 // ldr z9, [x2, #67, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a830a5 // eor z5.d, z5.d, z8.d                        
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x85885048 // ldr z8, [x2, #68, MUL VL]                   
    WORD $0x85885449 // ldr z9, [x2, #69, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a830c6 // eor z6.d, z6.d, z8.d                        
    WORD $0x04a930c6 // eor z6.d, z6.d, z9.d                        
    // Check for early termination
    CMP    $5, R16
    BEQ    mulSve_10x7Xor_store

    // Load and process 32 bytes from input 5 to 7 outputs
    WORD $0x8580414a // ldr z10, [x10]                              
    WORD $0x042a502a // addvl x10, x10, #1
    WORD $0x04fc954b // lsr z11.d, z10.d, #4                        
    WORD $0x0427314a // and z10.d, z10.d, z7.d                      
    WORD $0x0427316b // and z11.d, z11.d, z7.d                      
    WORD $0x85885848 // ldr z8, [x2, #70, MUL VL]                   
    WORD $0x85885c49 // ldr z9, [x2, #71, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x04a93000 // eor z0.d, z0.d, z9.d                        
    WORD $0x85894048 // ldr z8, [x2, #72, MUL VL]                   
    WORD $0x85894449 // ldr z9, [x2, #73, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x85894848 // ldr z8, [x2, #74, MUL VL]                   
    WORD $0x85894c49 // ldr z9, [x2, #75, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x04a93042 // eor z2.d, z2.d, z9.d                        
    WORD $0x85895048 // ldr z8, [x2, #76, MUL VL]                   
    WORD $0x85895449 // ldr z9, [x2, #77, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x85895848 // ldr z8, [x2, #78, MUL VL]                   
    WORD $0x85895c49 // ldr z9, [x2, #79, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x04a93084 // eor z4.d, z4.d, z9.d                        
    WORD $0x858a4048 // ldr z8, [x2, #80, MUL VL]                   
    WORD $0x858a4449 // ldr z9, [x2, #81, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a830a5 // eor z5.d, z5.d, z8.d                        
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x858a4848 // ldr z8, [x2, #82, MUL VL]                   
    WORD $0x858a4c49 // ldr z9, [x2, #83, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a830c6 // eor z6.d, z6.d, z8.d                        
    WORD $0x04a930c6 // eor z6.d, z6.d, z9.d                        
    // Check for early termination
    CMP    $6, R16
    BEQ    mulSve_10x7Xor_store

    // Load and process 32 bytes from input 6 to 7 outputs
    WORD $0x8580416a // ldr z10, [x11]                              
    WORD $0x042b502b // addvl x11, x11, #1
    WORD $0x04fc954b // lsr z11.d, z10.d, #4                        
    WORD $0x0427314a // and z10.d, z10.d, z7.d                      
    WORD $0x0427316b // and z11.d, z11.d, z7.d                      
    WORD $0x858a5048 // ldr z8, [x2, #84, MUL VL]                   
    WORD $0x858a5449 // ldr z9, [x2, #85, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x04a93000 // eor z0.d, z0.d, z9.d                        
    WORD $0x858a5848 // ldr z8, [x2, #86, MUL VL]                   
    WORD $0x858a5c49 // ldr z9, [x2, #87, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x858b4048 // ldr z8, [x2, #88, MUL VL]                   
    WORD $0x858b4449 // ldr z9, [x2, #89, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x04a93042 // eor z2.d, z2.d, z9.d                        
    WORD $0x858b4848 // ldr z8, [x2, #90, MUL VL]                   
    WORD $0x858b4c49 // ldr z9, [x2, #91, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x858b5048 // ldr z8, [x2, #92, MUL VL]                   
    WORD $0x858b5449 // ldr z9, [x2, #93, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x04a93084 // eor z4.d, z4.d, z9.d                        
    WORD $0x858b5848 // ldr z8, [x2, #94, MUL VL]                   
    WORD $0x858b5c49 // ldr z9, [x2, #95, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a830a5 // eor z5.d, z5.d, z8.d                        
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x858c4048 // ldr z8, [x2, #96, MUL VL]                   
    WORD $0x858c4449 // ldr z9, [x2, #97, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a830c6 // eor z6.d, z6.d, z8.d                        
    WORD $0x04a930c6 // eor z6.d, z6.d, z9.d                        
    // Check for early termination
    CMP    $7, R16
    BEQ    mulSve_10x7Xor_store

    // Load and process 32 bytes from input 7 to 7 outputs
    WORD $0x8580418a // ldr z10, [x12]                              
    WORD $0x042c502c // addvl x12, x12, #1
    WORD $0x04fc954b // lsr z11.d, z10.d, #4                        
    WORD $0x0427314a // and z10.d, z10.d, z7.d                      
    WORD $0x0427316b // and z11.d, z11.d, z7.d                      
    WORD $0x858c4848 // ldr z8, [x2, #98, MUL VL]                   
    WORD $0x858c4c49 // ldr z9, [x2, #99, MUL VL]                   
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x04a93000 // eor z0.d, z0.d, z9.d                        
    WORD $0x858c5048 // ldr z8, [x2, #100, MUL VL]                  
    WORD $0x858c5449 // ldr z9, [x2, #101, MUL VL]                  
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x858c5848 // ldr z8, [x2, #102, MUL VL]                  
    WORD $0x858c5c49 // ldr z9, [x2, #103, MUL VL]                  
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x04a93042 // eor z2.d, z2.d, z9.d                        
    WORD $0x858d4048 // ldr z8, [x2, #104, MUL VL]                  
    WORD $0x858d4449 // ldr z9, [x2, #105, MUL VL]                  
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x858d4848 // ldr z8, [x2, #106, MUL VL]                  
    WORD $0x858d4c49 // ldr z9, [x2, #107, MUL VL]                  
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x04a93084 // eor z4.d, z4.d, z9.d                        
    WORD $0x858d5048 // ldr z8, [x2, #108, MUL VL]                  
    WORD $0x858d5449 // ldr z9, [x2, #109, MUL VL]                  
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a830a5 // eor z5.d, z5.d, z8.d                        
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x858d5848 // ldr z8, [x2, #110, MUL VL]                  
    WORD $0x858d5c49 // ldr z9, [x2, #111, MUL VL]                  
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a830c6 // eor z6.d, z6.d, z8.d                        
    WORD $0x04a930c6 // eor z6.d, z6.d, z9.d                        
    // Check for early termination
    CMP    $8, R16
    BEQ    mulSve_10x7Xor_store

    // Load and process 32 bytes from input 8 to 7 outputs
    WORD $0x858041aa // ldr z10, [x13]                              
    WORD $0x042d502d // addvl x13, x13, #1
    WORD $0x04fc954b // lsr z11.d, z10.d, #4                        
    WORD $0x0427314a // and z10.d, z10.d, z7.d                      
    WORD $0x0427316b // and z11.d, z11.d, z7.d                      
    WORD $0x858e4048 // ldr z8, [x2, #112, MUL VL]                  
    WORD $0x858e4449 // ldr z9, [x2, #113, MUL VL]                  
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x04a93000 // eor z0.d, z0.d, z9.d                        
    WORD $0x858e4848 // ldr z8, [x2, #114, MUL VL]                  
    WORD $0x858e4c49 // ldr z9, [x2, #115, MUL VL]                  
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x858e5048 // ldr z8, [x2, #116, MUL VL]                  
    WORD $0x858e5449 // ldr z9, [x2, #117, MUL VL]                  
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x04a93042 // eor z2.d, z2.d, z9.d                        
    WORD $0x858e5848 // ldr z8, [x2, #118, MUL VL]                  
    WORD $0x858e5c49 // ldr z9, [x2, #119, MUL VL]                  
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x858f4048 // ldr z8, [x2, #120, MUL VL]                  
    WORD $0x858f4449 // ldr z9, [x2, #121, MUL VL]                  
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x04a93084 // eor z4.d, z4.d, z9.d                        
    WORD $0x858f4848 // ldr z8, [x2, #122, MUL VL]                  
    WORD $0x858f4c49 // ldr z9, [x2, #123, MUL VL]                  
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a830a5 // eor z5.d, z5.d, z8.d                        
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x858f5048 // ldr z8, [x2, #124, MUL VL]                  
    WORD $0x858f5449 // ldr z9, [x2, #125, MUL VL]                  
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a830c6 // eor z6.d, z6.d, z8.d                        
    WORD $0x04a930c6 // eor z6.d, z6.d, z9.d                        
    // Check for early termination
    CMP    $9, R16
    BEQ    mulSve_10x7Xor_store

    // Load and process 32 bytes from input 9 to 7 outputs
    WORD $0x8580406a // ldr z10, [x3]                               
    WORD $0x04235023 // addvl x3, x3, #1
    WORD $0x04fc954b // lsr z11.d, z10.d, #4                        
    WORD $0x0427314a // and z10.d, z10.d, z7.d                      
    WORD $0x0427316b // and z11.d, z11.d, z7.d                      
    WORD $0x858f5848 // ldr z8, [x2, #126, MUL VL]                  
    WORD $0x858f5c49 // ldr z9, [x2, #127, MUL VL]                  
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83000 // eor z0.d, z0.d, z8.d                        
    WORD $0x04a93000 // eor z0.d, z0.d, z9.d                        
    WORD $0x85904048 // ldr z8, [x2, #128, MUL VL]                  
    WORD $0x85904449 // ldr z9, [x2, #129, MUL VL]                  
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83021 // eor z1.d, z1.d, z8.d                        
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x85904848 // ldr z8, [x2, #130, MUL VL]                  
    WORD $0x85904c49 // ldr z9, [x2, #131, MUL VL]                  
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83042 // eor z2.d, z2.d, z8.d                        
    WORD $0x04a93042 // eor z2.d, z2.d, z9.d                        
    WORD $0x85905048 // ldr z8, [x2, #132, MUL VL]                  
    WORD $0x85905449 // ldr z9, [x2, #133, MUL VL]                  
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83063 // eor z3.d, z3.d, z8.d                        
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x85905848 // ldr z8, [x2, #134, MUL VL]                  
    WORD $0x85905c49 // ldr z9, [x2, #135, MUL VL]                  
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a83084 // eor z4.d, z4.d, z8.d                        
    WORD $0x04a93084 // eor z4.d, z4.d, z9.d                        
    WORD $0x85914048 // ldr z8, [x2, #136, MUL VL]                  
    WORD $0x85914449 // ldr z9, [x2, #137, MUL VL]                  
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a830a5 // eor z5.d, z5.d, z8.d                        
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x85914848 // ldr z8, [x2, #138, MUL VL]                  
    WORD $0x85914c49 // ldr z9, [x2, #139, MUL VL]                  
    WORD $0x052a3108 // tbl z8.b, z8.b, z10.b                       
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x04a830c6 // eor z6.d, z6.d, z8.d                        
    WORD $0x04a930c6 // eor z6.d, z6.d, z9.d                        

mulSve_10x7Xor_store:
    // Store 7 outputs
    MOVD (R14), R6
    WORD $0xe5ef40c0 // st1d { z0.d }, p0, [x6, x15, lsl #3]        
    MOVD 24(R14), R6
    WORD $0xe5ef40c1 // st1d { z1.d }, p0, [x6, x15, lsl #3]        
    MOVD 48(R14), R6
    WORD $0xe5ef40c2 // st1d { z2.d }, p0, [x6, x15, lsl #3]        
    MOVD 72(R14), R6
    WORD $0xe5ef40c3 // st1d { z3.d }, p0, [x6, x15, lsl #3]        
    MOVD 96(R14), R6
    WORD $0xe5ef40c4 // st1d { z4.d }, p0, [x6, x15, lsl #3]        
    MOVD 120(R14), R6
    WORD $0xe5ef40c5 // st1d { z5.d }, p0, [x6, x15, lsl #3]        
    MOVD 144(R14), R6
    WORD $0xe5ef40c6 // st1d { z6.d }, p0, [x6, x15, lsl #3]        

    // Prepare for next loop
    WORD $0x8b1101ef // add x15, x15, x17
    WORD $0xf1000400 // subs x0, x0, #1                             
    BNE  mulSve_10x7Xor_loop

mulSve_10x7Xor_end:
    RET

// func mulSve_10x8(matrix []byte, in [][]byte, out [][]byte, start int, n int)
// Requires: SVE
TEXT Â·mulSve_10x8(SB), NOSPLIT, $8-88
    WORD $0x25d8e3e0 // ptrue p0.d
    // Loading no tables to registers
    // Destination kept on stack
    // Full registers estimated 173 YMM used
    MOVD n+80(FP), R0
    MOVD matrix_base+0(FP), R2
    WORD $0xd345fc00 // lsr x0, x0, #5                              
    WORD $0xd37be800 // lsl x0, x0, #5
    WORD $0x04bf5030 // rdvl x16, #1
    WORD $0x9ad00800 // udiv x0, x0, x16
    WORD $0xea00001f // tst x0, x0                                  
    BEQ    mulSve_10x8_end
    MOVD in_base+24(FP), R3
    MOVD (R3), R1
    MOVD 24(R3), R4
    MOVD 48(R3), R5
    MOVD 72(R3), R8
    MOVD 96(R3), R9
    MOVD 120(R3), R10
    MOVD 144(R3), R11
    MOVD 168(R3), R12
    MOVD 192(R3), R13
    MOVD 216(R3), R3
    MOVD out_base+48(FP), R14
    MOVD start+72(FP), R15

    // Add start offset to input
    WORD $0x8b0f0021 // add x1, x1, x15                             
    WORD $0x8b0f0084 // add x4, x4, x15                             
    WORD $0x8b0f00a5 // add x5, x5, x15                             
    WORD $0x8b0f0108 // add x8, x8, x15                             
    WORD $0x8b0f0129 // add x9, x9, x15                             
    WORD $0x8b0f014a // add x10, x10, x15                           
    WORD $0x8b0f016b // add x11, x11, x15                           
    WORD $0x8b0f018c // add x12, x12, x15                           
    WORD $0x8b0f01ad // add x13, x13, x15                           
    WORD $0x8b0f0063 // add x3, x3, x15                             
    WORD $0xd343fdef // lsr x15, x15, #3                            
    WORD $0xd28001e6 // mov x6, #15                                 
    WORD $0x05e038c8 // mov z8.d, x6                                
    WORD $0x05212108 // dup z8.b, z8.b[0]                           

    // Load number of input shards
    MOVD   in_len+32(FP), R16
    WORD $0x04bf5031 // rdvl x17, #1
    WORD $0xd343fe31 // lsr  x17, x17, #3

mulSve_10x8_loop:
    // Load and process 32 bytes from input 0 to 8 outputs
    WORD $0x8580402b // ldr z11, [x1]                               
    WORD $0x04215021 // addvl x1, x1, #1
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x0428316b // and z11.d, z11.d, z8.d                      
    WORD $0x0428318c // and z12.d, z12.d, z8.d                      
    WORD $0x85804049 // ldr z9, [x2]                                
    WORD $0x8580444a // ldr z10, [x2, #1, MUL VL]                   
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93140 // eor z0.d, z10.d, z9.d                       
    WORD $0x85804849 // ldr z9, [x2, #2, MUL VL]                    
    WORD $0x85804c4a // ldr z10, [x2, #3, MUL VL]                   
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93141 // eor z1.d, z10.d, z9.d                       
    WORD $0x85805049 // ldr z9, [x2, #4, MUL VL]                    
    WORD $0x8580544a // ldr z10, [x2, #5, MUL VL]                   
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93142 // eor z2.d, z10.d, z9.d                       
    WORD $0x85805849 // ldr z9, [x2, #6, MUL VL]                    
    WORD $0x85805c4a // ldr z10, [x2, #7, MUL VL]                   
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93143 // eor z3.d, z10.d, z9.d                       
    WORD $0x85814049 // ldr z9, [x2, #8, MUL VL]                    
    WORD $0x8581444a // ldr z10, [x2, #9, MUL VL]                   
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93144 // eor z4.d, z10.d, z9.d                       
    WORD $0x85814849 // ldr z9, [x2, #10, MUL VL]                   
    WORD $0x85814c4a // ldr z10, [x2, #11, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93145 // eor z5.d, z10.d, z9.d                       
    WORD $0x85815049 // ldr z9, [x2, #12, MUL VL]                   
    WORD $0x8581544a // ldr z10, [x2, #13, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93146 // eor z6.d, z10.d, z9.d                       
    WORD $0x85815849 // ldr z9, [x2, #14, MUL VL]                   
    WORD $0x85815c4a // ldr z10, [x2, #15, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93147 // eor z7.d, z10.d, z9.d                       
    // Check for early termination
    CMP    $1, R16
    BEQ    mulSve_10x8_store

    // Load and process 32 bytes from input 1 to 8 outputs
    WORD $0x8580408b // ldr z11, [x4]                               
    WORD $0x04245024 // addvl x4, x4, #1
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x0428316b // and z11.d, z11.d, z8.d                      
    WORD $0x0428318c // and z12.d, z12.d, z8.d                      
    WORD $0x85824049 // ldr z9, [x2, #16, MUL VL]                   
    WORD $0x8582444a // ldr z10, [x2, #17, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93000 // eor z0.d, z0.d, z9.d                        
    WORD $0x04aa3000 // eor z0.d, z0.d, z10.d                       
    WORD $0x85824849 // ldr z9, [x2, #18, MUL VL]                   
    WORD $0x85824c4a // ldr z10, [x2, #19, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x85825049 // ldr z9, [x2, #20, MUL VL]                   
    WORD $0x8582544a // ldr z10, [x2, #21, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93042 // eor z2.d, z2.d, z9.d                        
    WORD $0x04aa3042 // eor z2.d, z2.d, z10.d                       
    WORD $0x85825849 // ldr z9, [x2, #22, MUL VL]                   
    WORD $0x85825c4a // ldr z10, [x2, #23, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x85834049 // ldr z9, [x2, #24, MUL VL]                   
    WORD $0x8583444a // ldr z10, [x2, #25, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93084 // eor z4.d, z4.d, z9.d                        
    WORD $0x04aa3084 // eor z4.d, z4.d, z10.d                       
    WORD $0x85834849 // ldr z9, [x2, #26, MUL VL]                   
    WORD $0x85834c4a // ldr z10, [x2, #27, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    WORD $0x85835049 // ldr z9, [x2, #28, MUL VL]                   
    WORD $0x8583544a // ldr z10, [x2, #29, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930c6 // eor z6.d, z6.d, z9.d                        
    WORD $0x04aa30c6 // eor z6.d, z6.d, z10.d                       
    WORD $0x85835849 // ldr z9, [x2, #30, MUL VL]                   
    WORD $0x85835c4a // ldr z10, [x2, #31, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930e7 // eor z7.d, z7.d, z9.d                        
    WORD $0x04aa30e7 // eor z7.d, z7.d, z10.d                       
    // Check for early termination
    CMP    $2, R16
    BEQ    mulSve_10x8_store

    // Load and process 32 bytes from input 2 to 8 outputs
    WORD $0x858040ab // ldr z11, [x5]                               
    WORD $0x04255025 // addvl x5, x5, #1
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x0428316b // and z11.d, z11.d, z8.d                      
    WORD $0x0428318c // and z12.d, z12.d, z8.d                      
    WORD $0x85844049 // ldr z9, [x2, #32, MUL VL]                   
    WORD $0x8584444a // ldr z10, [x2, #33, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93000 // eor z0.d, z0.d, z9.d                        
    WORD $0x04aa3000 // eor z0.d, z0.d, z10.d                       
    WORD $0x85844849 // ldr z9, [x2, #34, MUL VL]                   
    WORD $0x85844c4a // ldr z10, [x2, #35, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x85845049 // ldr z9, [x2, #36, MUL VL]                   
    WORD $0x8584544a // ldr z10, [x2, #37, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93042 // eor z2.d, z2.d, z9.d                        
    WORD $0x04aa3042 // eor z2.d, z2.d, z10.d                       
    WORD $0x85845849 // ldr z9, [x2, #38, MUL VL]                   
    WORD $0x85845c4a // ldr z10, [x2, #39, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x85854049 // ldr z9, [x2, #40, MUL VL]                   
    WORD $0x8585444a // ldr z10, [x2, #41, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93084 // eor z4.d, z4.d, z9.d                        
    WORD $0x04aa3084 // eor z4.d, z4.d, z10.d                       
    WORD $0x85854849 // ldr z9, [x2, #42, MUL VL]                   
    WORD $0x85854c4a // ldr z10, [x2, #43, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    WORD $0x85855049 // ldr z9, [x2, #44, MUL VL]                   
    WORD $0x8585544a // ldr z10, [x2, #45, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930c6 // eor z6.d, z6.d, z9.d                        
    WORD $0x04aa30c6 // eor z6.d, z6.d, z10.d                       
    WORD $0x85855849 // ldr z9, [x2, #46, MUL VL]                   
    WORD $0x85855c4a // ldr z10, [x2, #47, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930e7 // eor z7.d, z7.d, z9.d                        
    WORD $0x04aa30e7 // eor z7.d, z7.d, z10.d                       
    // Check for early termination
    CMP    $3, R16
    BEQ    mulSve_10x8_store

    // Load and process 32 bytes from input 3 to 8 outputs
    WORD $0x8580410b // ldr z11, [x8]                               
    WORD $0x04285028 // addvl x8, x8, #1
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x0428316b // and z11.d, z11.d, z8.d                      
    WORD $0x0428318c // and z12.d, z12.d, z8.d                      
    WORD $0x85864049 // ldr z9, [x2, #48, MUL VL]                   
    WORD $0x8586444a // ldr z10, [x2, #49, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93000 // eor z0.d, z0.d, z9.d                        
    WORD $0x04aa3000 // eor z0.d, z0.d, z10.d                       
    WORD $0x85864849 // ldr z9, [x2, #50, MUL VL]                   
    WORD $0x85864c4a // ldr z10, [x2, #51, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x85865049 // ldr z9, [x2, #52, MUL VL]                   
    WORD $0x8586544a // ldr z10, [x2, #53, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93042 // eor z2.d, z2.d, z9.d                        
    WORD $0x04aa3042 // eor z2.d, z2.d, z10.d                       
    WORD $0x85865849 // ldr z9, [x2, #54, MUL VL]                   
    WORD $0x85865c4a // ldr z10, [x2, #55, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x85874049 // ldr z9, [x2, #56, MUL VL]                   
    WORD $0x8587444a // ldr z10, [x2, #57, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93084 // eor z4.d, z4.d, z9.d                        
    WORD $0x04aa3084 // eor z4.d, z4.d, z10.d                       
    WORD $0x85874849 // ldr z9, [x2, #58, MUL VL]                   
    WORD $0x85874c4a // ldr z10, [x2, #59, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    WORD $0x85875049 // ldr z9, [x2, #60, MUL VL]                   
    WORD $0x8587544a // ldr z10, [x2, #61, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930c6 // eor z6.d, z6.d, z9.d                        
    WORD $0x04aa30c6 // eor z6.d, z6.d, z10.d                       
    WORD $0x85875849 // ldr z9, [x2, #62, MUL VL]                   
    WORD $0x85875c4a // ldr z10, [x2, #63, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930e7 // eor z7.d, z7.d, z9.d                        
    WORD $0x04aa30e7 // eor z7.d, z7.d, z10.d                       
    // Check for early termination
    CMP    $4, R16
    BEQ    mulSve_10x8_store

    // Load and process 32 bytes from input 4 to 8 outputs
    WORD $0x8580412b // ldr z11, [x9]                               
    WORD $0x04295029 // addvl x9, x9, #1
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x0428316b // and z11.d, z11.d, z8.d                      
    WORD $0x0428318c // and z12.d, z12.d, z8.d                      
    WORD $0x85884049 // ldr z9, [x2, #64, MUL VL]                   
    WORD $0x8588444a // ldr z10, [x2, #65, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93000 // eor z0.d, z0.d, z9.d                        
    WORD $0x04aa3000 // eor z0.d, z0.d, z10.d                       
    WORD $0x85884849 // ldr z9, [x2, #66, MUL VL]                   
    WORD $0x85884c4a // ldr z10, [x2, #67, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x85885049 // ldr z9, [x2, #68, MUL VL]                   
    WORD $0x8588544a // ldr z10, [x2, #69, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93042 // eor z2.d, z2.d, z9.d                        
    WORD $0x04aa3042 // eor z2.d, z2.d, z10.d                       
    WORD $0x85885849 // ldr z9, [x2, #70, MUL VL]                   
    WORD $0x85885c4a // ldr z10, [x2, #71, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x85894049 // ldr z9, [x2, #72, MUL VL]                   
    WORD $0x8589444a // ldr z10, [x2, #73, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93084 // eor z4.d, z4.d, z9.d                        
    WORD $0x04aa3084 // eor z4.d, z4.d, z10.d                       
    WORD $0x85894849 // ldr z9, [x2, #74, MUL VL]                   
    WORD $0x85894c4a // ldr z10, [x2, #75, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    WORD $0x85895049 // ldr z9, [x2, #76, MUL VL]                   
    WORD $0x8589544a // ldr z10, [x2, #77, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930c6 // eor z6.d, z6.d, z9.d                        
    WORD $0x04aa30c6 // eor z6.d, z6.d, z10.d                       
    WORD $0x85895849 // ldr z9, [x2, #78, MUL VL]                   
    WORD $0x85895c4a // ldr z10, [x2, #79, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930e7 // eor z7.d, z7.d, z9.d                        
    WORD $0x04aa30e7 // eor z7.d, z7.d, z10.d                       
    // Check for early termination
    CMP    $5, R16
    BEQ    mulSve_10x8_store

    // Load and process 32 bytes from input 5 to 8 outputs
    WORD $0x8580414b // ldr z11, [x10]                              
    WORD $0x042a502a // addvl x10, x10, #1
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x0428316b // and z11.d, z11.d, z8.d                      
    WORD $0x0428318c // and z12.d, z12.d, z8.d                      
    WORD $0x858a4049 // ldr z9, [x2, #80, MUL VL]                   
    WORD $0x858a444a // ldr z10, [x2, #81, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93000 // eor z0.d, z0.d, z9.d                        
    WORD $0x04aa3000 // eor z0.d, z0.d, z10.d                       
    WORD $0x858a4849 // ldr z9, [x2, #82, MUL VL]                   
    WORD $0x858a4c4a // ldr z10, [x2, #83, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x858a5049 // ldr z9, [x2, #84, MUL VL]                   
    WORD $0x858a544a // ldr z10, [x2, #85, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93042 // eor z2.d, z2.d, z9.d                        
    WORD $0x04aa3042 // eor z2.d, z2.d, z10.d                       
    WORD $0x858a5849 // ldr z9, [x2, #86, MUL VL]                   
    WORD $0x858a5c4a // ldr z10, [x2, #87, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x858b4049 // ldr z9, [x2, #88, MUL VL]                   
    WORD $0x858b444a // ldr z10, [x2, #89, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93084 // eor z4.d, z4.d, z9.d                        
    WORD $0x04aa3084 // eor z4.d, z4.d, z10.d                       
    WORD $0x858b4849 // ldr z9, [x2, #90, MUL VL]                   
    WORD $0x858b4c4a // ldr z10, [x2, #91, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    WORD $0x858b5049 // ldr z9, [x2, #92, MUL VL]                   
    WORD $0x858b544a // ldr z10, [x2, #93, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930c6 // eor z6.d, z6.d, z9.d                        
    WORD $0x04aa30c6 // eor z6.d, z6.d, z10.d                       
    WORD $0x858b5849 // ldr z9, [x2, #94, MUL VL]                   
    WORD $0x858b5c4a // ldr z10, [x2, #95, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930e7 // eor z7.d, z7.d, z9.d                        
    WORD $0x04aa30e7 // eor z7.d, z7.d, z10.d                       
    // Check for early termination
    CMP    $6, R16
    BEQ    mulSve_10x8_store

    // Load and process 32 bytes from input 6 to 8 outputs
    WORD $0x8580416b // ldr z11, [x11]                              
    WORD $0x042b502b // addvl x11, x11, #1
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x0428316b // and z11.d, z11.d, z8.d                      
    WORD $0x0428318c // and z12.d, z12.d, z8.d                      
    WORD $0x858c4049 // ldr z9, [x2, #96, MUL VL]                   
    WORD $0x858c444a // ldr z10, [x2, #97, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93000 // eor z0.d, z0.d, z9.d                        
    WORD $0x04aa3000 // eor z0.d, z0.d, z10.d                       
    WORD $0x858c4849 // ldr z9, [x2, #98, MUL VL]                   
    WORD $0x858c4c4a // ldr z10, [x2, #99, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x858c5049 // ldr z9, [x2, #100, MUL VL]                  
    WORD $0x858c544a // ldr z10, [x2, #101, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93042 // eor z2.d, z2.d, z9.d                        
    WORD $0x04aa3042 // eor z2.d, z2.d, z10.d                       
    WORD $0x858c5849 // ldr z9, [x2, #102, MUL VL]                  
    WORD $0x858c5c4a // ldr z10, [x2, #103, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x858d4049 // ldr z9, [x2, #104, MUL VL]                  
    WORD $0x858d444a // ldr z10, [x2, #105, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93084 // eor z4.d, z4.d, z9.d                        
    WORD $0x04aa3084 // eor z4.d, z4.d, z10.d                       
    WORD $0x858d4849 // ldr z9, [x2, #106, MUL VL]                  
    WORD $0x858d4c4a // ldr z10, [x2, #107, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    WORD $0x858d5049 // ldr z9, [x2, #108, MUL VL]                  
    WORD $0x858d544a // ldr z10, [x2, #109, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930c6 // eor z6.d, z6.d, z9.d                        
    WORD $0x04aa30c6 // eor z6.d, z6.d, z10.d                       
    WORD $0x858d5849 // ldr z9, [x2, #110, MUL VL]                  
    WORD $0x858d5c4a // ldr z10, [x2, #111, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930e7 // eor z7.d, z7.d, z9.d                        
    WORD $0x04aa30e7 // eor z7.d, z7.d, z10.d                       
    // Check for early termination
    CMP    $7, R16
    BEQ    mulSve_10x8_store

    // Load and process 32 bytes from input 7 to 8 outputs
    WORD $0x8580418b // ldr z11, [x12]                              
    WORD $0x042c502c // addvl x12, x12, #1
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x0428316b // and z11.d, z11.d, z8.d                      
    WORD $0x0428318c // and z12.d, z12.d, z8.d                      
    WORD $0x858e4049 // ldr z9, [x2, #112, MUL VL]                  
    WORD $0x858e444a // ldr z10, [x2, #113, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93000 // eor z0.d, z0.d, z9.d                        
    WORD $0x04aa3000 // eor z0.d, z0.d, z10.d                       
    WORD $0x858e4849 // ldr z9, [x2, #114, MUL VL]                  
    WORD $0x858e4c4a // ldr z10, [x2, #115, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x858e5049 // ldr z9, [x2, #116, MUL VL]                  
    WORD $0x858e544a // ldr z10, [x2, #117, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93042 // eor z2.d, z2.d, z9.d                        
    WORD $0x04aa3042 // eor z2.d, z2.d, z10.d                       
    WORD $0x858e5849 // ldr z9, [x2, #118, MUL VL]                  
    WORD $0x858e5c4a // ldr z10, [x2, #119, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x858f4049 // ldr z9, [x2, #120, MUL VL]                  
    WORD $0x858f444a // ldr z10, [x2, #121, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93084 // eor z4.d, z4.d, z9.d                        
    WORD $0x04aa3084 // eor z4.d, z4.d, z10.d                       
    WORD $0x858f4849 // ldr z9, [x2, #122, MUL VL]                  
    WORD $0x858f4c4a // ldr z10, [x2, #123, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    WORD $0x858f5049 // ldr z9, [x2, #124, MUL VL]                  
    WORD $0x858f544a // ldr z10, [x2, #125, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930c6 // eor z6.d, z6.d, z9.d                        
    WORD $0x04aa30c6 // eor z6.d, z6.d, z10.d                       
    WORD $0x858f5849 // ldr z9, [x2, #126, MUL VL]                  
    WORD $0x858f5c4a // ldr z10, [x2, #127, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930e7 // eor z7.d, z7.d, z9.d                        
    WORD $0x04aa30e7 // eor z7.d, z7.d, z10.d                       
    // Check for early termination
    CMP    $8, R16
    BEQ    mulSve_10x8_store

    // Load and process 32 bytes from input 8 to 8 outputs
    WORD $0x858041ab // ldr z11, [x13]                              
    WORD $0x042d502d // addvl x13, x13, #1
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x0428316b // and z11.d, z11.d, z8.d                      
    WORD $0x0428318c // and z12.d, z12.d, z8.d                      
    WORD $0x85904049 // ldr z9, [x2, #128, MUL VL]                  
    WORD $0x8590444a // ldr z10, [x2, #129, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93000 // eor z0.d, z0.d, z9.d                        
    WORD $0x04aa3000 // eor z0.d, z0.d, z10.d                       
    WORD $0x85904849 // ldr z9, [x2, #130, MUL VL]                  
    WORD $0x85904c4a // ldr z10, [x2, #131, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x85905049 // ldr z9, [x2, #132, MUL VL]                  
    WORD $0x8590544a // ldr z10, [x2, #133, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93042 // eor z2.d, z2.d, z9.d                        
    WORD $0x04aa3042 // eor z2.d, z2.d, z10.d                       
    WORD $0x85905849 // ldr z9, [x2, #134, MUL VL]                  
    WORD $0x85905c4a // ldr z10, [x2, #135, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x85914049 // ldr z9, [x2, #136, MUL VL]                  
    WORD $0x8591444a // ldr z10, [x2, #137, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93084 // eor z4.d, z4.d, z9.d                        
    WORD $0x04aa3084 // eor z4.d, z4.d, z10.d                       
    WORD $0x85914849 // ldr z9, [x2, #138, MUL VL]                  
    WORD $0x85914c4a // ldr z10, [x2, #139, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    WORD $0x85915049 // ldr z9, [x2, #140, MUL VL]                  
    WORD $0x8591544a // ldr z10, [x2, #141, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930c6 // eor z6.d, z6.d, z9.d                        
    WORD $0x04aa30c6 // eor z6.d, z6.d, z10.d                       
    WORD $0x85915849 // ldr z9, [x2, #142, MUL VL]                  
    WORD $0x85915c4a // ldr z10, [x2, #143, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930e7 // eor z7.d, z7.d, z9.d                        
    WORD $0x04aa30e7 // eor z7.d, z7.d, z10.d                       
    // Check for early termination
    CMP    $9, R16
    BEQ    mulSve_10x8_store

    // Load and process 32 bytes from input 9 to 8 outputs
    WORD $0x8580406b // ldr z11, [x3]                               
    WORD $0x04235023 // addvl x3, x3, #1
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x0428316b // and z11.d, z11.d, z8.d                      
    WORD $0x0428318c // and z12.d, z12.d, z8.d                      
    WORD $0x85924049 // ldr z9, [x2, #144, MUL VL]                  
    WORD $0x8592444a // ldr z10, [x2, #145, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93000 // eor z0.d, z0.d, z9.d                        
    WORD $0x04aa3000 // eor z0.d, z0.d, z10.d                       
    WORD $0x85924849 // ldr z9, [x2, #146, MUL VL]                  
    WORD $0x85924c4a // ldr z10, [x2, #147, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x85925049 // ldr z9, [x2, #148, MUL VL]                  
    WORD $0x8592544a // ldr z10, [x2, #149, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93042 // eor z2.d, z2.d, z9.d                        
    WORD $0x04aa3042 // eor z2.d, z2.d, z10.d                       
    WORD $0x85925849 // ldr z9, [x2, #150, MUL VL]                  
    WORD $0x85925c4a // ldr z10, [x2, #151, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x85934049 // ldr z9, [x2, #152, MUL VL]                  
    WORD $0x8593444a // ldr z10, [x2, #153, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93084 // eor z4.d, z4.d, z9.d                        
    WORD $0x04aa3084 // eor z4.d, z4.d, z10.d                       
    WORD $0x85934849 // ldr z9, [x2, #154, MUL VL]                  
    WORD $0x85934c4a // ldr z10, [x2, #155, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    WORD $0x85935049 // ldr z9, [x2, #156, MUL VL]                  
    WORD $0x8593544a // ldr z10, [x2, #157, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930c6 // eor z6.d, z6.d, z9.d                        
    WORD $0x04aa30c6 // eor z6.d, z6.d, z10.d                       
    WORD $0x85935849 // ldr z9, [x2, #158, MUL VL]                  
    WORD $0x85935c4a // ldr z10, [x2, #159, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930e7 // eor z7.d, z7.d, z9.d                        
    WORD $0x04aa30e7 // eor z7.d, z7.d, z10.d                       

mulSve_10x8_store:
    // Store 8 outputs
    MOVD (R14), R6
    WORD $0xe5ef40c0 // st1d { z0.d }, p0, [x6, x15, lsl #3]        
    MOVD 24(R14), R6
    WORD $0xe5ef40c1 // st1d { z1.d }, p0, [x6, x15, lsl #3]        
    MOVD 48(R14), R6
    WORD $0xe5ef40c2 // st1d { z2.d }, p0, [x6, x15, lsl #3]        
    MOVD 72(R14), R6
    WORD $0xe5ef40c3 // st1d { z3.d }, p0, [x6, x15, lsl #3]        
    MOVD 96(R14), R6
    WORD $0xe5ef40c4 // st1d { z4.d }, p0, [x6, x15, lsl #3]        
    MOVD 120(R14), R6
    WORD $0xe5ef40c5 // st1d { z5.d }, p0, [x6, x15, lsl #3]        
    MOVD 144(R14), R6
    WORD $0xe5ef40c6 // st1d { z6.d }, p0, [x6, x15, lsl #3]        
    MOVD 168(R14), R6
    WORD $0xe5ef40c7 // st1d { z7.d }, p0, [x6, x15, lsl #3]        

    // Prepare for next loop
    WORD $0x8b1101ef // add x15, x15, x17
    WORD $0xf1000400 // subs x0, x0, #1                             
    BNE  mulSve_10x8_loop

mulSve_10x8_end:
    RET

// func mulSve_10x8Xor(matrix []byte, in [][]byte, out [][]byte, start int, n int)
// Requires: SVE
TEXT Â·mulSve_10x8Xor(SB), NOSPLIT, $8-88
    WORD $0x25d8e3e0 // ptrue p0.d
    // Loading no tables to registers
    // Destination kept on stack
    // Full registers estimated 173 YMM used
    MOVD n+80(FP), R0
    MOVD matrix_base+0(FP), R2
    WORD $0xd345fc00 // lsr x0, x0, #5                              
    WORD $0xd37be800 // lsl x0, x0, #5
    WORD $0x04bf5030 // rdvl x16, #1
    WORD $0x9ad00800 // udiv x0, x0, x16
    WORD $0xea00001f // tst x0, x0                                  
    BEQ    mulSve_10x8Xor_end
    MOVD in_base+24(FP), R3
    MOVD (R3), R1
    MOVD 24(R3), R4
    MOVD 48(R3), R5
    MOVD 72(R3), R8
    MOVD 96(R3), R9
    MOVD 120(R3), R10
    MOVD 144(R3), R11
    MOVD 168(R3), R12
    MOVD 192(R3), R13
    MOVD 216(R3), R3
    MOVD out_base+48(FP), R14
    MOVD start+72(FP), R15

    // Add start offset to input
    WORD $0x8b0f0021 // add x1, x1, x15                             
    WORD $0x8b0f0084 // add x4, x4, x15                             
    WORD $0x8b0f00a5 // add x5, x5, x15                             
    WORD $0x8b0f0108 // add x8, x8, x15                             
    WORD $0x8b0f0129 // add x9, x9, x15                             
    WORD $0x8b0f014a // add x10, x10, x15                           
    WORD $0x8b0f016b // add x11, x11, x15                           
    WORD $0x8b0f018c // add x12, x12, x15                           
    WORD $0x8b0f01ad // add x13, x13, x15                           
    WORD $0x8b0f0063 // add x3, x3, x15                             
    WORD $0xd343fdef // lsr x15, x15, #3                            
    WORD $0xd28001e6 // mov x6, #15                                 
    WORD $0x05e038c8 // mov z8.d, x6                                
    WORD $0x05212108 // dup z8.b, z8.b[0]                           

    // Load number of input shards
    MOVD   in_len+32(FP), R16
    WORD $0x04bf5031 // rdvl x17, #1
    WORD $0xd343fe31 // lsr  x17, x17, #3

mulSve_10x8Xor_loop:
    // Load and process 32 bytes from input 0 to 8 outputs
    WORD $0x8580402b // ldr z11, [x1]                               
    WORD $0x04215021 // addvl x1, x1, #1
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x0428316b // and z11.d, z11.d, z8.d                      
    WORD $0x0428318c // and z12.d, z12.d, z8.d                      
    MOVD (R14), R6
    WORD $0xa5ef40c0 // ld1d { z0.d }, p0/z, [x6, x15, lsl #3]      
    WORD $0x85804049 // ldr z9, [x2]                                
    WORD $0x8580444a // ldr z10, [x2, #1, MUL VL]                   
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93000 // eor z0.d, z0.d, z9.d                        
    WORD $0x04aa3000 // eor z0.d, z0.d, z10.d                       
    MOVD 24(R14), R6
    WORD $0xa5ef40c1 // ld1d { z1.d }, p0/z, [x6, x15, lsl #3]      
    WORD $0x85804849 // ldr z9, [x2, #2, MUL VL]                    
    WORD $0x85804c4a // ldr z10, [x2, #3, MUL VL]                   
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    MOVD 48(R14), R6
    WORD $0xa5ef40c2 // ld1d { z2.d }, p0/z, [x6, x15, lsl #3]      
    WORD $0x85805049 // ldr z9, [x2, #4, MUL VL]                    
    WORD $0x8580544a // ldr z10, [x2, #5, MUL VL]                   
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93042 // eor z2.d, z2.d, z9.d                        
    WORD $0x04aa3042 // eor z2.d, z2.d, z10.d                       
    MOVD 72(R14), R6
    WORD $0xa5ef40c3 // ld1d { z3.d }, p0/z, [x6, x15, lsl #3]      
    WORD $0x85805849 // ldr z9, [x2, #6, MUL VL]                    
    WORD $0x85805c4a // ldr z10, [x2, #7, MUL VL]                   
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    MOVD 96(R14), R6
    WORD $0xa5ef40c4 // ld1d { z4.d }, p0/z, [x6, x15, lsl #3]      
    WORD $0x85814049 // ldr z9, [x2, #8, MUL VL]                    
    WORD $0x8581444a // ldr z10, [x2, #9, MUL VL]                   
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93084 // eor z4.d, z4.d, z9.d                        
    WORD $0x04aa3084 // eor z4.d, z4.d, z10.d                       
    MOVD 120(R14), R6
    WORD $0xa5ef40c5 // ld1d { z5.d }, p0/z, [x6, x15, lsl #3]      
    WORD $0x85814849 // ldr z9, [x2, #10, MUL VL]                   
    WORD $0x85814c4a // ldr z10, [x2, #11, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    MOVD 144(R14), R6
    WORD $0xa5ef40c6 // ld1d { z6.d }, p0/z, [x6, x15, lsl #3]      
    WORD $0x85815049 // ldr z9, [x2, #12, MUL VL]                   
    WORD $0x8581544a // ldr z10, [x2, #13, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930c6 // eor z6.d, z6.d, z9.d                        
    WORD $0x04aa30c6 // eor z6.d, z6.d, z10.d                       
    MOVD 168(R14), R6
    WORD $0xa5ef40c7 // ld1d { z7.d }, p0/z, [x6, x15, lsl #3]      
    WORD $0x85815849 // ldr z9, [x2, #14, MUL VL]                   
    WORD $0x85815c4a // ldr z10, [x2, #15, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930e7 // eor z7.d, z7.d, z9.d                        
    WORD $0x04aa30e7 // eor z7.d, z7.d, z10.d                       
    // Check for early termination
    CMP    $1, R16
    BEQ    mulSve_10x8Xor_store

    // Load and process 32 bytes from input 1 to 8 outputs
    WORD $0x8580408b // ldr z11, [x4]                               
    WORD $0x04245024 // addvl x4, x4, #1
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x0428316b // and z11.d, z11.d, z8.d                      
    WORD $0x0428318c // and z12.d, z12.d, z8.d                      
    WORD $0x85824049 // ldr z9, [x2, #16, MUL VL]                   
    WORD $0x8582444a // ldr z10, [x2, #17, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93000 // eor z0.d, z0.d, z9.d                        
    WORD $0x04aa3000 // eor z0.d, z0.d, z10.d                       
    WORD $0x85824849 // ldr z9, [x2, #18, MUL VL]                   
    WORD $0x85824c4a // ldr z10, [x2, #19, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x85825049 // ldr z9, [x2, #20, MUL VL]                   
    WORD $0x8582544a // ldr z10, [x2, #21, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93042 // eor z2.d, z2.d, z9.d                        
    WORD $0x04aa3042 // eor z2.d, z2.d, z10.d                       
    WORD $0x85825849 // ldr z9, [x2, #22, MUL VL]                   
    WORD $0x85825c4a // ldr z10, [x2, #23, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x85834049 // ldr z9, [x2, #24, MUL VL]                   
    WORD $0x8583444a // ldr z10, [x2, #25, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93084 // eor z4.d, z4.d, z9.d                        
    WORD $0x04aa3084 // eor z4.d, z4.d, z10.d                       
    WORD $0x85834849 // ldr z9, [x2, #26, MUL VL]                   
    WORD $0x85834c4a // ldr z10, [x2, #27, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    WORD $0x85835049 // ldr z9, [x2, #28, MUL VL]                   
    WORD $0x8583544a // ldr z10, [x2, #29, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930c6 // eor z6.d, z6.d, z9.d                        
    WORD $0x04aa30c6 // eor z6.d, z6.d, z10.d                       
    WORD $0x85835849 // ldr z9, [x2, #30, MUL VL]                   
    WORD $0x85835c4a // ldr z10, [x2, #31, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930e7 // eor z7.d, z7.d, z9.d                        
    WORD $0x04aa30e7 // eor z7.d, z7.d, z10.d                       
    // Check for early termination
    CMP    $2, R16
    BEQ    mulSve_10x8Xor_store

    // Load and process 32 bytes from input 2 to 8 outputs
    WORD $0x858040ab // ldr z11, [x5]                               
    WORD $0x04255025 // addvl x5, x5, #1
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x0428316b // and z11.d, z11.d, z8.d                      
    WORD $0x0428318c // and z12.d, z12.d, z8.d                      
    WORD $0x85844049 // ldr z9, [x2, #32, MUL VL]                   
    WORD $0x8584444a // ldr z10, [x2, #33, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93000 // eor z0.d, z0.d, z9.d                        
    WORD $0x04aa3000 // eor z0.d, z0.d, z10.d                       
    WORD $0x85844849 // ldr z9, [x2, #34, MUL VL]                   
    WORD $0x85844c4a // ldr z10, [x2, #35, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x85845049 // ldr z9, [x2, #36, MUL VL]                   
    WORD $0x8584544a // ldr z10, [x2, #37, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93042 // eor z2.d, z2.d, z9.d                        
    WORD $0x04aa3042 // eor z2.d, z2.d, z10.d                       
    WORD $0x85845849 // ldr z9, [x2, #38, MUL VL]                   
    WORD $0x85845c4a // ldr z10, [x2, #39, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x85854049 // ldr z9, [x2, #40, MUL VL]                   
    WORD $0x8585444a // ldr z10, [x2, #41, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93084 // eor z4.d, z4.d, z9.d                        
    WORD $0x04aa3084 // eor z4.d, z4.d, z10.d                       
    WORD $0x85854849 // ldr z9, [x2, #42, MUL VL]                   
    WORD $0x85854c4a // ldr z10, [x2, #43, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    WORD $0x85855049 // ldr z9, [x2, #44, MUL VL]                   
    WORD $0x8585544a // ldr z10, [x2, #45, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930c6 // eor z6.d, z6.d, z9.d                        
    WORD $0x04aa30c6 // eor z6.d, z6.d, z10.d                       
    WORD $0x85855849 // ldr z9, [x2, #46, MUL VL]                   
    WORD $0x85855c4a // ldr z10, [x2, #47, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930e7 // eor z7.d, z7.d, z9.d                        
    WORD $0x04aa30e7 // eor z7.d, z7.d, z10.d                       
    // Check for early termination
    CMP    $3, R16
    BEQ    mulSve_10x8Xor_store

    // Load and process 32 bytes from input 3 to 8 outputs
    WORD $0x8580410b // ldr z11, [x8]                               
    WORD $0x04285028 // addvl x8, x8, #1
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x0428316b // and z11.d, z11.d, z8.d                      
    WORD $0x0428318c // and z12.d, z12.d, z8.d                      
    WORD $0x85864049 // ldr z9, [x2, #48, MUL VL]                   
    WORD $0x8586444a // ldr z10, [x2, #49, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93000 // eor z0.d, z0.d, z9.d                        
    WORD $0x04aa3000 // eor z0.d, z0.d, z10.d                       
    WORD $0x85864849 // ldr z9, [x2, #50, MUL VL]                   
    WORD $0x85864c4a // ldr z10, [x2, #51, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x85865049 // ldr z9, [x2, #52, MUL VL]                   
    WORD $0x8586544a // ldr z10, [x2, #53, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93042 // eor z2.d, z2.d, z9.d                        
    WORD $0x04aa3042 // eor z2.d, z2.d, z10.d                       
    WORD $0x85865849 // ldr z9, [x2, #54, MUL VL]                   
    WORD $0x85865c4a // ldr z10, [x2, #55, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x85874049 // ldr z9, [x2, #56, MUL VL]                   
    WORD $0x8587444a // ldr z10, [x2, #57, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93084 // eor z4.d, z4.d, z9.d                        
    WORD $0x04aa3084 // eor z4.d, z4.d, z10.d                       
    WORD $0x85874849 // ldr z9, [x2, #58, MUL VL]                   
    WORD $0x85874c4a // ldr z10, [x2, #59, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    WORD $0x85875049 // ldr z9, [x2, #60, MUL VL]                   
    WORD $0x8587544a // ldr z10, [x2, #61, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930c6 // eor z6.d, z6.d, z9.d                        
    WORD $0x04aa30c6 // eor z6.d, z6.d, z10.d                       
    WORD $0x85875849 // ldr z9, [x2, #62, MUL VL]                   
    WORD $0x85875c4a // ldr z10, [x2, #63, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930e7 // eor z7.d, z7.d, z9.d                        
    WORD $0x04aa30e7 // eor z7.d, z7.d, z10.d                       
    // Check for early termination
    CMP    $4, R16
    BEQ    mulSve_10x8Xor_store

    // Load and process 32 bytes from input 4 to 8 outputs
    WORD $0x8580412b // ldr z11, [x9]                               
    WORD $0x04295029 // addvl x9, x9, #1
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x0428316b // and z11.d, z11.d, z8.d                      
    WORD $0x0428318c // and z12.d, z12.d, z8.d                      
    WORD $0x85884049 // ldr z9, [x2, #64, MUL VL]                   
    WORD $0x8588444a // ldr z10, [x2, #65, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93000 // eor z0.d, z0.d, z9.d                        
    WORD $0x04aa3000 // eor z0.d, z0.d, z10.d                       
    WORD $0x85884849 // ldr z9, [x2, #66, MUL VL]                   
    WORD $0x85884c4a // ldr z10, [x2, #67, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x85885049 // ldr z9, [x2, #68, MUL VL]                   
    WORD $0x8588544a // ldr z10, [x2, #69, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93042 // eor z2.d, z2.d, z9.d                        
    WORD $0x04aa3042 // eor z2.d, z2.d, z10.d                       
    WORD $0x85885849 // ldr z9, [x2, #70, MUL VL]                   
    WORD $0x85885c4a // ldr z10, [x2, #71, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x85894049 // ldr z9, [x2, #72, MUL VL]                   
    WORD $0x8589444a // ldr z10, [x2, #73, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93084 // eor z4.d, z4.d, z9.d                        
    WORD $0x04aa3084 // eor z4.d, z4.d, z10.d                       
    WORD $0x85894849 // ldr z9, [x2, #74, MUL VL]                   
    WORD $0x85894c4a // ldr z10, [x2, #75, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    WORD $0x85895049 // ldr z9, [x2, #76, MUL VL]                   
    WORD $0x8589544a // ldr z10, [x2, #77, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930c6 // eor z6.d, z6.d, z9.d                        
    WORD $0x04aa30c6 // eor z6.d, z6.d, z10.d                       
    WORD $0x85895849 // ldr z9, [x2, #78, MUL VL]                   
    WORD $0x85895c4a // ldr z10, [x2, #79, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930e7 // eor z7.d, z7.d, z9.d                        
    WORD $0x04aa30e7 // eor z7.d, z7.d, z10.d                       
    // Check for early termination
    CMP    $5, R16
    BEQ    mulSve_10x8Xor_store

    // Load and process 32 bytes from input 5 to 8 outputs
    WORD $0x8580414b // ldr z11, [x10]                              
    WORD $0x042a502a // addvl x10, x10, #1
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x0428316b // and z11.d, z11.d, z8.d                      
    WORD $0x0428318c // and z12.d, z12.d, z8.d                      
    WORD $0x858a4049 // ldr z9, [x2, #80, MUL VL]                   
    WORD $0x858a444a // ldr z10, [x2, #81, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93000 // eor z0.d, z0.d, z9.d                        
    WORD $0x04aa3000 // eor z0.d, z0.d, z10.d                       
    WORD $0x858a4849 // ldr z9, [x2, #82, MUL VL]                   
    WORD $0x858a4c4a // ldr z10, [x2, #83, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x858a5049 // ldr z9, [x2, #84, MUL VL]                   
    WORD $0x858a544a // ldr z10, [x2, #85, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93042 // eor z2.d, z2.d, z9.d                        
    WORD $0x04aa3042 // eor z2.d, z2.d, z10.d                       
    WORD $0x858a5849 // ldr z9, [x2, #86, MUL VL]                   
    WORD $0x858a5c4a // ldr z10, [x2, #87, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x858b4049 // ldr z9, [x2, #88, MUL VL]                   
    WORD $0x858b444a // ldr z10, [x2, #89, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93084 // eor z4.d, z4.d, z9.d                        
    WORD $0x04aa3084 // eor z4.d, z4.d, z10.d                       
    WORD $0x858b4849 // ldr z9, [x2, #90, MUL VL]                   
    WORD $0x858b4c4a // ldr z10, [x2, #91, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    WORD $0x858b5049 // ldr z9, [x2, #92, MUL VL]                   
    WORD $0x858b544a // ldr z10, [x2, #93, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930c6 // eor z6.d, z6.d, z9.d                        
    WORD $0x04aa30c6 // eor z6.d, z6.d, z10.d                       
    WORD $0x858b5849 // ldr z9, [x2, #94, MUL VL]                   
    WORD $0x858b5c4a // ldr z10, [x2, #95, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930e7 // eor z7.d, z7.d, z9.d                        
    WORD $0x04aa30e7 // eor z7.d, z7.d, z10.d                       
    // Check for early termination
    CMP    $6, R16
    BEQ    mulSve_10x8Xor_store

    // Load and process 32 bytes from input 6 to 8 outputs
    WORD $0x8580416b // ldr z11, [x11]                              
    WORD $0x042b502b // addvl x11, x11, #1
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x0428316b // and z11.d, z11.d, z8.d                      
    WORD $0x0428318c // and z12.d, z12.d, z8.d                      
    WORD $0x858c4049 // ldr z9, [x2, #96, MUL VL]                   
    WORD $0x858c444a // ldr z10, [x2, #97, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93000 // eor z0.d, z0.d, z9.d                        
    WORD $0x04aa3000 // eor z0.d, z0.d, z10.d                       
    WORD $0x858c4849 // ldr z9, [x2, #98, MUL VL]                   
    WORD $0x858c4c4a // ldr z10, [x2, #99, MUL VL]                  
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x858c5049 // ldr z9, [x2, #100, MUL VL]                  
    WORD $0x858c544a // ldr z10, [x2, #101, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93042 // eor z2.d, z2.d, z9.d                        
    WORD $0x04aa3042 // eor z2.d, z2.d, z10.d                       
    WORD $0x858c5849 // ldr z9, [x2, #102, MUL VL]                  
    WORD $0x858c5c4a // ldr z10, [x2, #103, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x858d4049 // ldr z9, [x2, #104, MUL VL]                  
    WORD $0x858d444a // ldr z10, [x2, #105, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93084 // eor z4.d, z4.d, z9.d                        
    WORD $0x04aa3084 // eor z4.d, z4.d, z10.d                       
    WORD $0x858d4849 // ldr z9, [x2, #106, MUL VL]                  
    WORD $0x858d4c4a // ldr z10, [x2, #107, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    WORD $0x858d5049 // ldr z9, [x2, #108, MUL VL]                  
    WORD $0x858d544a // ldr z10, [x2, #109, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930c6 // eor z6.d, z6.d, z9.d                        
    WORD $0x04aa30c6 // eor z6.d, z6.d, z10.d                       
    WORD $0x858d5849 // ldr z9, [x2, #110, MUL VL]                  
    WORD $0x858d5c4a // ldr z10, [x2, #111, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930e7 // eor z7.d, z7.d, z9.d                        
    WORD $0x04aa30e7 // eor z7.d, z7.d, z10.d                       
    // Check for early termination
    CMP    $7, R16
    BEQ    mulSve_10x8Xor_store

    // Load and process 32 bytes from input 7 to 8 outputs
    WORD $0x8580418b // ldr z11, [x12]                              
    WORD $0x042c502c // addvl x12, x12, #1
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x0428316b // and z11.d, z11.d, z8.d                      
    WORD $0x0428318c // and z12.d, z12.d, z8.d                      
    WORD $0x858e4049 // ldr z9, [x2, #112, MUL VL]                  
    WORD $0x858e444a // ldr z10, [x2, #113, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93000 // eor z0.d, z0.d, z9.d                        
    WORD $0x04aa3000 // eor z0.d, z0.d, z10.d                       
    WORD $0x858e4849 // ldr z9, [x2, #114, MUL VL]                  
    WORD $0x858e4c4a // ldr z10, [x2, #115, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x858e5049 // ldr z9, [x2, #116, MUL VL]                  
    WORD $0x858e544a // ldr z10, [x2, #117, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93042 // eor z2.d, z2.d, z9.d                        
    WORD $0x04aa3042 // eor z2.d, z2.d, z10.d                       
    WORD $0x858e5849 // ldr z9, [x2, #118, MUL VL]                  
    WORD $0x858e5c4a // ldr z10, [x2, #119, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x858f4049 // ldr z9, [x2, #120, MUL VL]                  
    WORD $0x858f444a // ldr z10, [x2, #121, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93084 // eor z4.d, z4.d, z9.d                        
    WORD $0x04aa3084 // eor z4.d, z4.d, z10.d                       
    WORD $0x858f4849 // ldr z9, [x2, #122, MUL VL]                  
    WORD $0x858f4c4a // ldr z10, [x2, #123, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    WORD $0x858f5049 // ldr z9, [x2, #124, MUL VL]                  
    WORD $0x858f544a // ldr z10, [x2, #125, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930c6 // eor z6.d, z6.d, z9.d                        
    WORD $0x04aa30c6 // eor z6.d, z6.d, z10.d                       
    WORD $0x858f5849 // ldr z9, [x2, #126, MUL VL]                  
    WORD $0x858f5c4a // ldr z10, [x2, #127, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930e7 // eor z7.d, z7.d, z9.d                        
    WORD $0x04aa30e7 // eor z7.d, z7.d, z10.d                       
    // Check for early termination
    CMP    $8, R16
    BEQ    mulSve_10x8Xor_store

    // Load and process 32 bytes from input 8 to 8 outputs
    WORD $0x858041ab // ldr z11, [x13]                              
    WORD $0x042d502d // addvl x13, x13, #1
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x0428316b // and z11.d, z11.d, z8.d                      
    WORD $0x0428318c // and z12.d, z12.d, z8.d                      
    WORD $0x85904049 // ldr z9, [x2, #128, MUL VL]                  
    WORD $0x8590444a // ldr z10, [x2, #129, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93000 // eor z0.d, z0.d, z9.d                        
    WORD $0x04aa3000 // eor z0.d, z0.d, z10.d                       
    WORD $0x85904849 // ldr z9, [x2, #130, MUL VL]                  
    WORD $0x85904c4a // ldr z10, [x2, #131, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x85905049 // ldr z9, [x2, #132, MUL VL]                  
    WORD $0x8590544a // ldr z10, [x2, #133, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93042 // eor z2.d, z2.d, z9.d                        
    WORD $0x04aa3042 // eor z2.d, z2.d, z10.d                       
    WORD $0x85905849 // ldr z9, [x2, #134, MUL VL]                  
    WORD $0x85905c4a // ldr z10, [x2, #135, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x85914049 // ldr z9, [x2, #136, MUL VL]                  
    WORD $0x8591444a // ldr z10, [x2, #137, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93084 // eor z4.d, z4.d, z9.d                        
    WORD $0x04aa3084 // eor z4.d, z4.d, z10.d                       
    WORD $0x85914849 // ldr z9, [x2, #138, MUL VL]                  
    WORD $0x85914c4a // ldr z10, [x2, #139, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    WORD $0x85915049 // ldr z9, [x2, #140, MUL VL]                  
    WORD $0x8591544a // ldr z10, [x2, #141, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930c6 // eor z6.d, z6.d, z9.d                        
    WORD $0x04aa30c6 // eor z6.d, z6.d, z10.d                       
    WORD $0x85915849 // ldr z9, [x2, #142, MUL VL]                  
    WORD $0x85915c4a // ldr z10, [x2, #143, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930e7 // eor z7.d, z7.d, z9.d                        
    WORD $0x04aa30e7 // eor z7.d, z7.d, z10.d                       
    // Check for early termination
    CMP    $9, R16
    BEQ    mulSve_10x8Xor_store

    // Load and process 32 bytes from input 9 to 8 outputs
    WORD $0x8580406b // ldr z11, [x3]                               
    WORD $0x04235023 // addvl x3, x3, #1
    WORD $0x04fc956c // lsr z12.d, z11.d, #4                        
    WORD $0x0428316b // and z11.d, z11.d, z8.d                      
    WORD $0x0428318c // and z12.d, z12.d, z8.d                      
    WORD $0x85924049 // ldr z9, [x2, #144, MUL VL]                  
    WORD $0x8592444a // ldr z10, [x2, #145, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93000 // eor z0.d, z0.d, z9.d                        
    WORD $0x04aa3000 // eor z0.d, z0.d, z10.d                       
    WORD $0x85924849 // ldr z9, [x2, #146, MUL VL]                  
    WORD $0x85924c4a // ldr z10, [x2, #147, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93021 // eor z1.d, z1.d, z9.d                        
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x85925049 // ldr z9, [x2, #148, MUL VL]                  
    WORD $0x8592544a // ldr z10, [x2, #149, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93042 // eor z2.d, z2.d, z9.d                        
    WORD $0x04aa3042 // eor z2.d, z2.d, z10.d                       
    WORD $0x85925849 // ldr z9, [x2, #150, MUL VL]                  
    WORD $0x85925c4a // ldr z10, [x2, #151, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93063 // eor z3.d, z3.d, z9.d                        
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x85934049 // ldr z9, [x2, #152, MUL VL]                  
    WORD $0x8593444a // ldr z10, [x2, #153, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a93084 // eor z4.d, z4.d, z9.d                        
    WORD $0x04aa3084 // eor z4.d, z4.d, z10.d                       
    WORD $0x85934849 // ldr z9, [x2, #154, MUL VL]                  
    WORD $0x85934c4a // ldr z10, [x2, #155, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930a5 // eor z5.d, z5.d, z9.d                        
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    WORD $0x85935049 // ldr z9, [x2, #156, MUL VL]                  
    WORD $0x8593544a // ldr z10, [x2, #157, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930c6 // eor z6.d, z6.d, z9.d                        
    WORD $0x04aa30c6 // eor z6.d, z6.d, z10.d                       
    WORD $0x85935849 // ldr z9, [x2, #158, MUL VL]                  
    WORD $0x85935c4a // ldr z10, [x2, #159, MUL VL]                 
    WORD $0x052b3129 // tbl z9.b, z9.b, z11.b                       
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x04a930e7 // eor z7.d, z7.d, z9.d                        
    WORD $0x04aa30e7 // eor z7.d, z7.d, z10.d                       

mulSve_10x8Xor_store:
    // Store 8 outputs
    MOVD (R14), R6
    WORD $0xe5ef40c0 // st1d { z0.d }, p0, [x6, x15, lsl #3]        
    MOVD 24(R14), R6
    WORD $0xe5ef40c1 // st1d { z1.d }, p0, [x6, x15, lsl #3]        
    MOVD 48(R14), R6
    WORD $0xe5ef40c2 // st1d { z2.d }, p0, [x6, x15, lsl #3]        
    MOVD 72(R14), R6
    WORD $0xe5ef40c3 // st1d { z3.d }, p0, [x6, x15, lsl #3]        
    MOVD 96(R14), R6
    WORD $0xe5ef40c4 // st1d { z4.d }, p0, [x6, x15, lsl #3]        
    MOVD 120(R14), R6
    WORD $0xe5ef40c5 // st1d { z5.d }, p0, [x6, x15, lsl #3]        
    MOVD 144(R14), R6
    WORD $0xe5ef40c6 // st1d { z6.d }, p0, [x6, x15, lsl #3]        
    MOVD 168(R14), R6
    WORD $0xe5ef40c7 // st1d { z7.d }, p0, [x6, x15, lsl #3]        

    // Prepare for next loop
    WORD $0x8b1101ef // add x15, x15, x17
    WORD $0xf1000400 // subs x0, x0, #1                             
    BNE  mulSve_10x8Xor_loop

mulSve_10x8Xor_end:
    RET

// func mulSve_10x9(matrix []byte, in [][]byte, out [][]byte, start int, n int)
// Requires: SVE
TEXT Â·mulSve_10x9(SB), NOSPLIT, $8-88
    WORD $0x25d8e3e0 // ptrue p0.d
    // Loading no tables to registers
    // Destination kept on stack
    // Full registers estimated 194 YMM used
    MOVD n+80(FP), R0
    MOVD matrix_base+0(FP), R2
    WORD $0xd345fc00 // lsr x0, x0, #5                              
    WORD $0xd37be800 // lsl x0, x0, #5
    WORD $0x04bf5030 // rdvl x16, #1
    WORD $0x9ad00800 // udiv x0, x0, x16
    WORD $0xea00001f // tst x0, x0                                  
    BEQ    mulSve_10x9_end
    MOVD in_base+24(FP), R3
    MOVD (R3), R1
    MOVD 24(R3), R4
    MOVD 48(R3), R5
    MOVD 72(R3), R8
    MOVD 96(R3), R9
    MOVD 120(R3), R10
    MOVD 144(R3), R11
    MOVD 168(R3), R12
    MOVD 192(R3), R13
    MOVD 216(R3), R3
    MOVD out_base+48(FP), R14
    MOVD start+72(FP), R15

    // Add start offset to input
    WORD $0x8b0f0021 // add x1, x1, x15                             
    WORD $0x8b0f0084 // add x4, x4, x15                             
    WORD $0x8b0f00a5 // add x5, x5, x15                             
    WORD $0x8b0f0108 // add x8, x8, x15                             
    WORD $0x8b0f0129 // add x9, x9, x15                             
    WORD $0x8b0f014a // add x10, x10, x15                           
    WORD $0x8b0f016b // add x11, x11, x15                           
    WORD $0x8b0f018c // add x12, x12, x15                           
    WORD $0x8b0f01ad // add x13, x13, x15                           
    WORD $0x8b0f0063 // add x3, x3, x15                             
    WORD $0xd343fdef // lsr x15, x15, #3                            
    WORD $0xd28001e6 // mov x6, #15                                 
    WORD $0x05e038c9 // mov z9.d, x6                                
    WORD $0x05212129 // dup z9.b, z9.b[0]                           

    // Load number of input shards
    MOVD   in_len+32(FP), R16
    WORD $0x04bf5031 // rdvl x17, #1
    WORD $0xd343fe31 // lsr  x17, x17, #3

mulSve_10x9_loop:
    // Load and process 32 bytes from input 0 to 9 outputs
    WORD $0x8580402c // ldr z12, [x1]                               
    WORD $0x04215021 // addvl x1, x1, #1
    WORD $0x04fc958d // lsr z13.d, z12.d, #4                        
    WORD $0x0429318c // and z12.d, z12.d, z9.d                      
    WORD $0x042931ad // and z13.d, z13.d, z9.d                      
    WORD $0x8580404a // ldr z10, [x2]                               
    WORD $0x8580444b // ldr z11, [x2, #1, MUL VL]                   
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3160 // eor z0.d, z11.d, z10.d                      
    WORD $0x8580484a // ldr z10, [x2, #2, MUL VL]                   
    WORD $0x85804c4b // ldr z11, [x2, #3, MUL VL]                   
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3161 // eor z1.d, z11.d, z10.d                      
    WORD $0x8580504a // ldr z10, [x2, #4, MUL VL]                   
    WORD $0x8580544b // ldr z11, [x2, #5, MUL VL]                   
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3162 // eor z2.d, z11.d, z10.d                      
    WORD $0x8580584a // ldr z10, [x2, #6, MUL VL]                   
    WORD $0x85805c4b // ldr z11, [x2, #7, MUL VL]                   
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3163 // eor z3.d, z11.d, z10.d                      
    WORD $0x8581404a // ldr z10, [x2, #8, MUL VL]                   
    WORD $0x8581444b // ldr z11, [x2, #9, MUL VL]                   
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3164 // eor z4.d, z11.d, z10.d                      
    WORD $0x8581484a // ldr z10, [x2, #10, MUL VL]                  
    WORD $0x85814c4b // ldr z11, [x2, #11, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3165 // eor z5.d, z11.d, z10.d                      
    WORD $0x8581504a // ldr z10, [x2, #12, MUL VL]                  
    WORD $0x8581544b // ldr z11, [x2, #13, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3166 // eor z6.d, z11.d, z10.d                      
    WORD $0x8581584a // ldr z10, [x2, #14, MUL VL]                  
    WORD $0x85815c4b // ldr z11, [x2, #15, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3167 // eor z7.d, z11.d, z10.d                      
    WORD $0x8582404a // ldr z10, [x2, #16, MUL VL]                  
    WORD $0x8582444b // ldr z11, [x2, #17, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3168 // eor z8.d, z11.d, z10.d                      
    // Check for early termination
    CMP    $1, R16
    BEQ    mulSve_10x9_store

    // Load and process 32 bytes from input 1 to 9 outputs
    WORD $0x8580408c // ldr z12, [x4]                               
    WORD $0x04245024 // addvl x4, x4, #1
    WORD $0x04fc958d // lsr z13.d, z12.d, #4                        
    WORD $0x0429318c // and z12.d, z12.d, z9.d                      
    WORD $0x042931ad // and z13.d, z13.d, z9.d                      
    WORD $0x8582484a // ldr z10, [x2, #18, MUL VL]                  
    WORD $0x85824c4b // ldr z11, [x2, #19, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3000 // eor z0.d, z0.d, z10.d                       
    WORD $0x04ab3000 // eor z0.d, z0.d, z11.d                       
    WORD $0x8582504a // ldr z10, [x2, #20, MUL VL]                  
    WORD $0x8582544b // ldr z11, [x2, #21, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x04ab3021 // eor z1.d, z1.d, z11.d                       
    WORD $0x8582584a // ldr z10, [x2, #22, MUL VL]                  
    WORD $0x85825c4b // ldr z11, [x2, #23, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3042 // eor z2.d, z2.d, z10.d                       
    WORD $0x04ab3042 // eor z2.d, z2.d, z11.d                       
    WORD $0x8583404a // ldr z10, [x2, #24, MUL VL]                  
    WORD $0x8583444b // ldr z11, [x2, #25, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x04ab3063 // eor z3.d, z3.d, z11.d                       
    WORD $0x8583484a // ldr z10, [x2, #26, MUL VL]                  
    WORD $0x85834c4b // ldr z11, [x2, #27, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3084 // eor z4.d, z4.d, z10.d                       
    WORD $0x04ab3084 // eor z4.d, z4.d, z11.d                       
    WORD $0x8583504a // ldr z10, [x2, #28, MUL VL]                  
    WORD $0x8583544b // ldr z11, [x2, #29, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    WORD $0x04ab30a5 // eor z5.d, z5.d, z11.d                       
    WORD $0x8583584a // ldr z10, [x2, #30, MUL VL]                  
    WORD $0x85835c4b // ldr z11, [x2, #31, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30c6 // eor z6.d, z6.d, z10.d                       
    WORD $0x04ab30c6 // eor z6.d, z6.d, z11.d                       
    WORD $0x8584404a // ldr z10, [x2, #32, MUL VL]                  
    WORD $0x8584444b // ldr z11, [x2, #33, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30e7 // eor z7.d, z7.d, z10.d                       
    WORD $0x04ab30e7 // eor z7.d, z7.d, z11.d                       
    WORD $0x8584484a // ldr z10, [x2, #34, MUL VL]                  
    WORD $0x85844c4b // ldr z11, [x2, #35, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3108 // eor z8.d, z8.d, z10.d                       
    WORD $0x04ab3108 // eor z8.d, z8.d, z11.d                       
    // Check for early termination
    CMP    $2, R16
    BEQ    mulSve_10x9_store

    // Load and process 32 bytes from input 2 to 9 outputs
    WORD $0x858040ac // ldr z12, [x5]                               
    WORD $0x04255025 // addvl x5, x5, #1
    WORD $0x04fc958d // lsr z13.d, z12.d, #4                        
    WORD $0x0429318c // and z12.d, z12.d, z9.d                      
    WORD $0x042931ad // and z13.d, z13.d, z9.d                      
    WORD $0x8584504a // ldr z10, [x2, #36, MUL VL]                  
    WORD $0x8584544b // ldr z11, [x2, #37, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3000 // eor z0.d, z0.d, z10.d                       
    WORD $0x04ab3000 // eor z0.d, z0.d, z11.d                       
    WORD $0x8584584a // ldr z10, [x2, #38, MUL VL]                  
    WORD $0x85845c4b // ldr z11, [x2, #39, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x04ab3021 // eor z1.d, z1.d, z11.d                       
    WORD $0x8585404a // ldr z10, [x2, #40, MUL VL]                  
    WORD $0x8585444b // ldr z11, [x2, #41, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3042 // eor z2.d, z2.d, z10.d                       
    WORD $0x04ab3042 // eor z2.d, z2.d, z11.d                       
    WORD $0x8585484a // ldr z10, [x2, #42, MUL VL]                  
    WORD $0x85854c4b // ldr z11, [x2, #43, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x04ab3063 // eor z3.d, z3.d, z11.d                       
    WORD $0x8585504a // ldr z10, [x2, #44, MUL VL]                  
    WORD $0x8585544b // ldr z11, [x2, #45, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3084 // eor z4.d, z4.d, z10.d                       
    WORD $0x04ab3084 // eor z4.d, z4.d, z11.d                       
    WORD $0x8585584a // ldr z10, [x2, #46, MUL VL]                  
    WORD $0x85855c4b // ldr z11, [x2, #47, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    WORD $0x04ab30a5 // eor z5.d, z5.d, z11.d                       
    WORD $0x8586404a // ldr z10, [x2, #48, MUL VL]                  
    WORD $0x8586444b // ldr z11, [x2, #49, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30c6 // eor z6.d, z6.d, z10.d                       
    WORD $0x04ab30c6 // eor z6.d, z6.d, z11.d                       
    WORD $0x8586484a // ldr z10, [x2, #50, MUL VL]                  
    WORD $0x85864c4b // ldr z11, [x2, #51, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30e7 // eor z7.d, z7.d, z10.d                       
    WORD $0x04ab30e7 // eor z7.d, z7.d, z11.d                       
    WORD $0x8586504a // ldr z10, [x2, #52, MUL VL]                  
    WORD $0x8586544b // ldr z11, [x2, #53, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3108 // eor z8.d, z8.d, z10.d                       
    WORD $0x04ab3108 // eor z8.d, z8.d, z11.d                       
    // Check for early termination
    CMP    $3, R16
    BEQ    mulSve_10x9_store

    // Load and process 32 bytes from input 3 to 9 outputs
    WORD $0x8580410c // ldr z12, [x8]                               
    WORD $0x04285028 // addvl x8, x8, #1
    WORD $0x04fc958d // lsr z13.d, z12.d, #4                        
    WORD $0x0429318c // and z12.d, z12.d, z9.d                      
    WORD $0x042931ad // and z13.d, z13.d, z9.d                      
    WORD $0x8586584a // ldr z10, [x2, #54, MUL VL]                  
    WORD $0x85865c4b // ldr z11, [x2, #55, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3000 // eor z0.d, z0.d, z10.d                       
    WORD $0x04ab3000 // eor z0.d, z0.d, z11.d                       
    WORD $0x8587404a // ldr z10, [x2, #56, MUL VL]                  
    WORD $0x8587444b // ldr z11, [x2, #57, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x04ab3021 // eor z1.d, z1.d, z11.d                       
    WORD $0x8587484a // ldr z10, [x2, #58, MUL VL]                  
    WORD $0x85874c4b // ldr z11, [x2, #59, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3042 // eor z2.d, z2.d, z10.d                       
    WORD $0x04ab3042 // eor z2.d, z2.d, z11.d                       
    WORD $0x8587504a // ldr z10, [x2, #60, MUL VL]                  
    WORD $0x8587544b // ldr z11, [x2, #61, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x04ab3063 // eor z3.d, z3.d, z11.d                       
    WORD $0x8587584a // ldr z10, [x2, #62, MUL VL]                  
    WORD $0x85875c4b // ldr z11, [x2, #63, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3084 // eor z4.d, z4.d, z10.d                       
    WORD $0x04ab3084 // eor z4.d, z4.d, z11.d                       
    WORD $0x8588404a // ldr z10, [x2, #64, MUL VL]                  
    WORD $0x8588444b // ldr z11, [x2, #65, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    WORD $0x04ab30a5 // eor z5.d, z5.d, z11.d                       
    WORD $0x8588484a // ldr z10, [x2, #66, MUL VL]                  
    WORD $0x85884c4b // ldr z11, [x2, #67, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30c6 // eor z6.d, z6.d, z10.d                       
    WORD $0x04ab30c6 // eor z6.d, z6.d, z11.d                       
    WORD $0x8588504a // ldr z10, [x2, #68, MUL VL]                  
    WORD $0x8588544b // ldr z11, [x2, #69, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30e7 // eor z7.d, z7.d, z10.d                       
    WORD $0x04ab30e7 // eor z7.d, z7.d, z11.d                       
    WORD $0x8588584a // ldr z10, [x2, #70, MUL VL]                  
    WORD $0x85885c4b // ldr z11, [x2, #71, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3108 // eor z8.d, z8.d, z10.d                       
    WORD $0x04ab3108 // eor z8.d, z8.d, z11.d                       
    // Check for early termination
    CMP    $4, R16
    BEQ    mulSve_10x9_store

    // Load and process 32 bytes from input 4 to 9 outputs
    WORD $0x8580412c // ldr z12, [x9]                               
    WORD $0x04295029 // addvl x9, x9, #1
    WORD $0x04fc958d // lsr z13.d, z12.d, #4                        
    WORD $0x0429318c // and z12.d, z12.d, z9.d                      
    WORD $0x042931ad // and z13.d, z13.d, z9.d                      
    WORD $0x8589404a // ldr z10, [x2, #72, MUL VL]                  
    WORD $0x8589444b // ldr z11, [x2, #73, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3000 // eor z0.d, z0.d, z10.d                       
    WORD $0x04ab3000 // eor z0.d, z0.d, z11.d                       
    WORD $0x8589484a // ldr z10, [x2, #74, MUL VL]                  
    WORD $0x85894c4b // ldr z11, [x2, #75, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x04ab3021 // eor z1.d, z1.d, z11.d                       
    WORD $0x8589504a // ldr z10, [x2, #76, MUL VL]                  
    WORD $0x8589544b // ldr z11, [x2, #77, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3042 // eor z2.d, z2.d, z10.d                       
    WORD $0x04ab3042 // eor z2.d, z2.d, z11.d                       
    WORD $0x8589584a // ldr z10, [x2, #78, MUL VL]                  
    WORD $0x85895c4b // ldr z11, [x2, #79, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x04ab3063 // eor z3.d, z3.d, z11.d                       
    WORD $0x858a404a // ldr z10, [x2, #80, MUL VL]                  
    WORD $0x858a444b // ldr z11, [x2, #81, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3084 // eor z4.d, z4.d, z10.d                       
    WORD $0x04ab3084 // eor z4.d, z4.d, z11.d                       
    WORD $0x858a484a // ldr z10, [x2, #82, MUL VL]                  
    WORD $0x858a4c4b // ldr z11, [x2, #83, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    WORD $0x04ab30a5 // eor z5.d, z5.d, z11.d                       
    WORD $0x858a504a // ldr z10, [x2, #84, MUL VL]                  
    WORD $0x858a544b // ldr z11, [x2, #85, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30c6 // eor z6.d, z6.d, z10.d                       
    WORD $0x04ab30c6 // eor z6.d, z6.d, z11.d                       
    WORD $0x858a584a // ldr z10, [x2, #86, MUL VL]                  
    WORD $0x858a5c4b // ldr z11, [x2, #87, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30e7 // eor z7.d, z7.d, z10.d                       
    WORD $0x04ab30e7 // eor z7.d, z7.d, z11.d                       
    WORD $0x858b404a // ldr z10, [x2, #88, MUL VL]                  
    WORD $0x858b444b // ldr z11, [x2, #89, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3108 // eor z8.d, z8.d, z10.d                       
    WORD $0x04ab3108 // eor z8.d, z8.d, z11.d                       
    // Check for early termination
    CMP    $5, R16
    BEQ    mulSve_10x9_store

    // Load and process 32 bytes from input 5 to 9 outputs
    WORD $0x8580414c // ldr z12, [x10]                              
    WORD $0x042a502a // addvl x10, x10, #1
    WORD $0x04fc958d // lsr z13.d, z12.d, #4                        
    WORD $0x0429318c // and z12.d, z12.d, z9.d                      
    WORD $0x042931ad // and z13.d, z13.d, z9.d                      
    WORD $0x858b484a // ldr z10, [x2, #90, MUL VL]                  
    WORD $0x858b4c4b // ldr z11, [x2, #91, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3000 // eor z0.d, z0.d, z10.d                       
    WORD $0x04ab3000 // eor z0.d, z0.d, z11.d                       
    WORD $0x858b504a // ldr z10, [x2, #92, MUL VL]                  
    WORD $0x858b544b // ldr z11, [x2, #93, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x04ab3021 // eor z1.d, z1.d, z11.d                       
    WORD $0x858b584a // ldr z10, [x2, #94, MUL VL]                  
    WORD $0x858b5c4b // ldr z11, [x2, #95, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3042 // eor z2.d, z2.d, z10.d                       
    WORD $0x04ab3042 // eor z2.d, z2.d, z11.d                       
    WORD $0x858c404a // ldr z10, [x2, #96, MUL VL]                  
    WORD $0x858c444b // ldr z11, [x2, #97, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x04ab3063 // eor z3.d, z3.d, z11.d                       
    WORD $0x858c484a // ldr z10, [x2, #98, MUL VL]                  
    WORD $0x858c4c4b // ldr z11, [x2, #99, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3084 // eor z4.d, z4.d, z10.d                       
    WORD $0x04ab3084 // eor z4.d, z4.d, z11.d                       
    WORD $0x858c504a // ldr z10, [x2, #100, MUL VL]                 
    WORD $0x858c544b // ldr z11, [x2, #101, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    WORD $0x04ab30a5 // eor z5.d, z5.d, z11.d                       
    WORD $0x858c584a // ldr z10, [x2, #102, MUL VL]                 
    WORD $0x858c5c4b // ldr z11, [x2, #103, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30c6 // eor z6.d, z6.d, z10.d                       
    WORD $0x04ab30c6 // eor z6.d, z6.d, z11.d                       
    WORD $0x858d404a // ldr z10, [x2, #104, MUL VL]                 
    WORD $0x858d444b // ldr z11, [x2, #105, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30e7 // eor z7.d, z7.d, z10.d                       
    WORD $0x04ab30e7 // eor z7.d, z7.d, z11.d                       
    WORD $0x858d484a // ldr z10, [x2, #106, MUL VL]                 
    WORD $0x858d4c4b // ldr z11, [x2, #107, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3108 // eor z8.d, z8.d, z10.d                       
    WORD $0x04ab3108 // eor z8.d, z8.d, z11.d                       
    // Check for early termination
    CMP    $6, R16
    BEQ    mulSve_10x9_store

    // Load and process 32 bytes from input 6 to 9 outputs
    WORD $0x8580416c // ldr z12, [x11]                              
    WORD $0x042b502b // addvl x11, x11, #1
    WORD $0x04fc958d // lsr z13.d, z12.d, #4                        
    WORD $0x0429318c // and z12.d, z12.d, z9.d                      
    WORD $0x042931ad // and z13.d, z13.d, z9.d                      
    WORD $0x858d504a // ldr z10, [x2, #108, MUL VL]                 
    WORD $0x858d544b // ldr z11, [x2, #109, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3000 // eor z0.d, z0.d, z10.d                       
    WORD $0x04ab3000 // eor z0.d, z0.d, z11.d                       
    WORD $0x858d584a // ldr z10, [x2, #110, MUL VL]                 
    WORD $0x858d5c4b // ldr z11, [x2, #111, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x04ab3021 // eor z1.d, z1.d, z11.d                       
    WORD $0x858e404a // ldr z10, [x2, #112, MUL VL]                 
    WORD $0x858e444b // ldr z11, [x2, #113, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3042 // eor z2.d, z2.d, z10.d                       
    WORD $0x04ab3042 // eor z2.d, z2.d, z11.d                       
    WORD $0x858e484a // ldr z10, [x2, #114, MUL VL]                 
    WORD $0x858e4c4b // ldr z11, [x2, #115, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x04ab3063 // eor z3.d, z3.d, z11.d                       
    WORD $0x858e504a // ldr z10, [x2, #116, MUL VL]                 
    WORD $0x858e544b // ldr z11, [x2, #117, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3084 // eor z4.d, z4.d, z10.d                       
    WORD $0x04ab3084 // eor z4.d, z4.d, z11.d                       
    WORD $0x858e584a // ldr z10, [x2, #118, MUL VL]                 
    WORD $0x858e5c4b // ldr z11, [x2, #119, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    WORD $0x04ab30a5 // eor z5.d, z5.d, z11.d                       
    WORD $0x858f404a // ldr z10, [x2, #120, MUL VL]                 
    WORD $0x858f444b // ldr z11, [x2, #121, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30c6 // eor z6.d, z6.d, z10.d                       
    WORD $0x04ab30c6 // eor z6.d, z6.d, z11.d                       
    WORD $0x858f484a // ldr z10, [x2, #122, MUL VL]                 
    WORD $0x858f4c4b // ldr z11, [x2, #123, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30e7 // eor z7.d, z7.d, z10.d                       
    WORD $0x04ab30e7 // eor z7.d, z7.d, z11.d                       
    WORD $0x858f504a // ldr z10, [x2, #124, MUL VL]                 
    WORD $0x858f544b // ldr z11, [x2, #125, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3108 // eor z8.d, z8.d, z10.d                       
    WORD $0x04ab3108 // eor z8.d, z8.d, z11.d                       
    // Check for early termination
    CMP    $7, R16
    BEQ    mulSve_10x9_store

    // Load and process 32 bytes from input 7 to 9 outputs
    WORD $0x8580418c // ldr z12, [x12]                              
    WORD $0x042c502c // addvl x12, x12, #1
    WORD $0x04fc958d // lsr z13.d, z12.d, #4                        
    WORD $0x0429318c // and z12.d, z12.d, z9.d                      
    WORD $0x042931ad // and z13.d, z13.d, z9.d                      
    WORD $0x858f584a // ldr z10, [x2, #126, MUL VL]                 
    WORD $0x858f5c4b // ldr z11, [x2, #127, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3000 // eor z0.d, z0.d, z10.d                       
    WORD $0x04ab3000 // eor z0.d, z0.d, z11.d                       
    WORD $0x8590404a // ldr z10, [x2, #128, MUL VL]                 
    WORD $0x8590444b // ldr z11, [x2, #129, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x04ab3021 // eor z1.d, z1.d, z11.d                       
    WORD $0x8590484a // ldr z10, [x2, #130, MUL VL]                 
    WORD $0x85904c4b // ldr z11, [x2, #131, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3042 // eor z2.d, z2.d, z10.d                       
    WORD $0x04ab3042 // eor z2.d, z2.d, z11.d                       
    WORD $0x8590504a // ldr z10, [x2, #132, MUL VL]                 
    WORD $0x8590544b // ldr z11, [x2, #133, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x04ab3063 // eor z3.d, z3.d, z11.d                       
    WORD $0x8590584a // ldr z10, [x2, #134, MUL VL]                 
    WORD $0x85905c4b // ldr z11, [x2, #135, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3084 // eor z4.d, z4.d, z10.d                       
    WORD $0x04ab3084 // eor z4.d, z4.d, z11.d                       
    WORD $0x8591404a // ldr z10, [x2, #136, MUL VL]                 
    WORD $0x8591444b // ldr z11, [x2, #137, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    WORD $0x04ab30a5 // eor z5.d, z5.d, z11.d                       
    WORD $0x8591484a // ldr z10, [x2, #138, MUL VL]                 
    WORD $0x85914c4b // ldr z11, [x2, #139, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30c6 // eor z6.d, z6.d, z10.d                       
    WORD $0x04ab30c6 // eor z6.d, z6.d, z11.d                       
    WORD $0x8591504a // ldr z10, [x2, #140, MUL VL]                 
    WORD $0x8591544b // ldr z11, [x2, #141, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30e7 // eor z7.d, z7.d, z10.d                       
    WORD $0x04ab30e7 // eor z7.d, z7.d, z11.d                       
    WORD $0x8591584a // ldr z10, [x2, #142, MUL VL]                 
    WORD $0x85915c4b // ldr z11, [x2, #143, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3108 // eor z8.d, z8.d, z10.d                       
    WORD $0x04ab3108 // eor z8.d, z8.d, z11.d                       
    // Check for early termination
    CMP    $8, R16
    BEQ    mulSve_10x9_store

    // Load and process 32 bytes from input 8 to 9 outputs
    WORD $0x858041ac // ldr z12, [x13]                              
    WORD $0x042d502d // addvl x13, x13, #1
    WORD $0x04fc958d // lsr z13.d, z12.d, #4                        
    WORD $0x0429318c // and z12.d, z12.d, z9.d                      
    WORD $0x042931ad // and z13.d, z13.d, z9.d                      
    WORD $0x8592404a // ldr z10, [x2, #144, MUL VL]                 
    WORD $0x8592444b // ldr z11, [x2, #145, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3000 // eor z0.d, z0.d, z10.d                       
    WORD $0x04ab3000 // eor z0.d, z0.d, z11.d                       
    WORD $0x8592484a // ldr z10, [x2, #146, MUL VL]                 
    WORD $0x85924c4b // ldr z11, [x2, #147, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x04ab3021 // eor z1.d, z1.d, z11.d                       
    WORD $0x8592504a // ldr z10, [x2, #148, MUL VL]                 
    WORD $0x8592544b // ldr z11, [x2, #149, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3042 // eor z2.d, z2.d, z10.d                       
    WORD $0x04ab3042 // eor z2.d, z2.d, z11.d                       
    WORD $0x8592584a // ldr z10, [x2, #150, MUL VL]                 
    WORD $0x85925c4b // ldr z11, [x2, #151, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x04ab3063 // eor z3.d, z3.d, z11.d                       
    WORD $0x8593404a // ldr z10, [x2, #152, MUL VL]                 
    WORD $0x8593444b // ldr z11, [x2, #153, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3084 // eor z4.d, z4.d, z10.d                       
    WORD $0x04ab3084 // eor z4.d, z4.d, z11.d                       
    WORD $0x8593484a // ldr z10, [x2, #154, MUL VL]                 
    WORD $0x85934c4b // ldr z11, [x2, #155, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    WORD $0x04ab30a5 // eor z5.d, z5.d, z11.d                       
    WORD $0x8593504a // ldr z10, [x2, #156, MUL VL]                 
    WORD $0x8593544b // ldr z11, [x2, #157, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30c6 // eor z6.d, z6.d, z10.d                       
    WORD $0x04ab30c6 // eor z6.d, z6.d, z11.d                       
    WORD $0x8593584a // ldr z10, [x2, #158, MUL VL]                 
    WORD $0x85935c4b // ldr z11, [x2, #159, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30e7 // eor z7.d, z7.d, z10.d                       
    WORD $0x04ab30e7 // eor z7.d, z7.d, z11.d                       
    WORD $0x8594404a // ldr z10, [x2, #160, MUL VL]                 
    WORD $0x8594444b // ldr z11, [x2, #161, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3108 // eor z8.d, z8.d, z10.d                       
    WORD $0x04ab3108 // eor z8.d, z8.d, z11.d                       
    // Check for early termination
    CMP    $9, R16
    BEQ    mulSve_10x9_store

    // Load and process 32 bytes from input 9 to 9 outputs
    WORD $0x8580406c // ldr z12, [x3]                               
    WORD $0x04235023 // addvl x3, x3, #1
    WORD $0x04fc958d // lsr z13.d, z12.d, #4                        
    WORD $0x0429318c // and z12.d, z12.d, z9.d                      
    WORD $0x042931ad // and z13.d, z13.d, z9.d                      
    WORD $0x8594484a // ldr z10, [x2, #162, MUL VL]                 
    WORD $0x85944c4b // ldr z11, [x2, #163, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3000 // eor z0.d, z0.d, z10.d                       
    WORD $0x04ab3000 // eor z0.d, z0.d, z11.d                       
    WORD $0x8594504a // ldr z10, [x2, #164, MUL VL]                 
    WORD $0x8594544b // ldr z11, [x2, #165, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x04ab3021 // eor z1.d, z1.d, z11.d                       
    WORD $0x8594584a // ldr z10, [x2, #166, MUL VL]                 
    WORD $0x85945c4b // ldr z11, [x2, #167, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3042 // eor z2.d, z2.d, z10.d                       
    WORD $0x04ab3042 // eor z2.d, z2.d, z11.d                       
    WORD $0x8595404a // ldr z10, [x2, #168, MUL VL]                 
    WORD $0x8595444b // ldr z11, [x2, #169, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x04ab3063 // eor z3.d, z3.d, z11.d                       
    WORD $0x8595484a // ldr z10, [x2, #170, MUL VL]                 
    WORD $0x85954c4b // ldr z11, [x2, #171, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3084 // eor z4.d, z4.d, z10.d                       
    WORD $0x04ab3084 // eor z4.d, z4.d, z11.d                       
    WORD $0x8595504a // ldr z10, [x2, #172, MUL VL]                 
    WORD $0x8595544b // ldr z11, [x2, #173, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    WORD $0x04ab30a5 // eor z5.d, z5.d, z11.d                       
    WORD $0x8595584a // ldr z10, [x2, #174, MUL VL]                 
    WORD $0x85955c4b // ldr z11, [x2, #175, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30c6 // eor z6.d, z6.d, z10.d                       
    WORD $0x04ab30c6 // eor z6.d, z6.d, z11.d                       
    WORD $0x8596404a // ldr z10, [x2, #176, MUL VL]                 
    WORD $0x8596444b // ldr z11, [x2, #177, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30e7 // eor z7.d, z7.d, z10.d                       
    WORD $0x04ab30e7 // eor z7.d, z7.d, z11.d                       
    WORD $0x8596484a // ldr z10, [x2, #178, MUL VL]                 
    WORD $0x85964c4b // ldr z11, [x2, #179, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3108 // eor z8.d, z8.d, z10.d                       
    WORD $0x04ab3108 // eor z8.d, z8.d, z11.d                       

mulSve_10x9_store:
    // Store 9 outputs
    MOVD (R14), R6
    WORD $0xe5ef40c0 // st1d { z0.d }, p0, [x6, x15, lsl #3]        
    MOVD 24(R14), R6
    WORD $0xe5ef40c1 // st1d { z1.d }, p0, [x6, x15, lsl #3]        
    MOVD 48(R14), R6
    WORD $0xe5ef40c2 // st1d { z2.d }, p0, [x6, x15, lsl #3]        
    MOVD 72(R14), R6
    WORD $0xe5ef40c3 // st1d { z3.d }, p0, [x6, x15, lsl #3]        
    MOVD 96(R14), R6
    WORD $0xe5ef40c4 // st1d { z4.d }, p0, [x6, x15, lsl #3]        
    MOVD 120(R14), R6
    WORD $0xe5ef40c5 // st1d { z5.d }, p0, [x6, x15, lsl #3]        
    MOVD 144(R14), R6
    WORD $0xe5ef40c6 // st1d { z6.d }, p0, [x6, x15, lsl #3]        
    MOVD 168(R14), R6
    WORD $0xe5ef40c7 // st1d { z7.d }, p0, [x6, x15, lsl #3]        
    MOVD 192(R14), R6
    WORD $0xe5ef40c8 // st1d { z8.d }, p0, [x6, x15, lsl #3]        

    // Prepare for next loop
    WORD $0x8b1101ef // add x15, x15, x17
    WORD $0xf1000400 // subs x0, x0, #1                             
    BNE  mulSve_10x9_loop

mulSve_10x9_end:
    RET

// func mulSve_10x9Xor(matrix []byte, in [][]byte, out [][]byte, start int, n int)
// Requires: SVE
TEXT Â·mulSve_10x9Xor(SB), NOSPLIT, $8-88
    WORD $0x25d8e3e0 // ptrue p0.d
    // Loading no tables to registers
    // Destination kept on stack
    // Full registers estimated 194 YMM used
    MOVD n+80(FP), R0
    MOVD matrix_base+0(FP), R2
    WORD $0xd345fc00 // lsr x0, x0, #5                              
    WORD $0xd37be800 // lsl x0, x0, #5
    WORD $0x04bf5030 // rdvl x16, #1
    WORD $0x9ad00800 // udiv x0, x0, x16
    WORD $0xea00001f // tst x0, x0                                  
    BEQ    mulSve_10x9Xor_end
    MOVD in_base+24(FP), R3
    MOVD (R3), R1
    MOVD 24(R3), R4
    MOVD 48(R3), R5
    MOVD 72(R3), R8
    MOVD 96(R3), R9
    MOVD 120(R3), R10
    MOVD 144(R3), R11
    MOVD 168(R3), R12
    MOVD 192(R3), R13
    MOVD 216(R3), R3
    MOVD out_base+48(FP), R14
    MOVD start+72(FP), R15

    // Add start offset to input
    WORD $0x8b0f0021 // add x1, x1, x15                             
    WORD $0x8b0f0084 // add x4, x4, x15                             
    WORD $0x8b0f00a5 // add x5, x5, x15                             
    WORD $0x8b0f0108 // add x8, x8, x15                             
    WORD $0x8b0f0129 // add x9, x9, x15                             
    WORD $0x8b0f014a // add x10, x10, x15                           
    WORD $0x8b0f016b // add x11, x11, x15                           
    WORD $0x8b0f018c // add x12, x12, x15                           
    WORD $0x8b0f01ad // add x13, x13, x15                           
    WORD $0x8b0f0063 // add x3, x3, x15                             
    WORD $0xd343fdef // lsr x15, x15, #3                            
    WORD $0xd28001e6 // mov x6, #15                                 
    WORD $0x05e038c9 // mov z9.d, x6                                
    WORD $0x05212129 // dup z9.b, z9.b[0]                           

    // Load number of input shards
    MOVD   in_len+32(FP), R16
    WORD $0x04bf5031 // rdvl x17, #1
    WORD $0xd343fe31 // lsr  x17, x17, #3

mulSve_10x9Xor_loop:
    // Load and process 32 bytes from input 0 to 9 outputs
    WORD $0x8580402c // ldr z12, [x1]                               
    WORD $0x04215021 // addvl x1, x1, #1
    WORD $0x04fc958d // lsr z13.d, z12.d, #4                        
    WORD $0x0429318c // and z12.d, z12.d, z9.d                      
    WORD $0x042931ad // and z13.d, z13.d, z9.d                      
    MOVD (R14), R6
    WORD $0xa5ef40c0 // ld1d { z0.d }, p0/z, [x6, x15, lsl #3]      
    WORD $0x8580404a // ldr z10, [x2]                               
    WORD $0x8580444b // ldr z11, [x2, #1, MUL VL]                   
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3000 // eor z0.d, z0.d, z10.d                       
    WORD $0x04ab3000 // eor z0.d, z0.d, z11.d                       
    MOVD 24(R14), R6
    WORD $0xa5ef40c1 // ld1d { z1.d }, p0/z, [x6, x15, lsl #3]      
    WORD $0x8580484a // ldr z10, [x2, #2, MUL VL]                   
    WORD $0x85804c4b // ldr z11, [x2, #3, MUL VL]                   
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x04ab3021 // eor z1.d, z1.d, z11.d                       
    MOVD 48(R14), R6
    WORD $0xa5ef40c2 // ld1d { z2.d }, p0/z, [x6, x15, lsl #3]      
    WORD $0x8580504a // ldr z10, [x2, #4, MUL VL]                   
    WORD $0x8580544b // ldr z11, [x2, #5, MUL VL]                   
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3042 // eor z2.d, z2.d, z10.d                       
    WORD $0x04ab3042 // eor z2.d, z2.d, z11.d                       
    MOVD 72(R14), R6
    WORD $0xa5ef40c3 // ld1d { z3.d }, p0/z, [x6, x15, lsl #3]      
    WORD $0x8580584a // ldr z10, [x2, #6, MUL VL]                   
    WORD $0x85805c4b // ldr z11, [x2, #7, MUL VL]                   
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x04ab3063 // eor z3.d, z3.d, z11.d                       
    MOVD 96(R14), R6
    WORD $0xa5ef40c4 // ld1d { z4.d }, p0/z, [x6, x15, lsl #3]      
    WORD $0x8581404a // ldr z10, [x2, #8, MUL VL]                   
    WORD $0x8581444b // ldr z11, [x2, #9, MUL VL]                   
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3084 // eor z4.d, z4.d, z10.d                       
    WORD $0x04ab3084 // eor z4.d, z4.d, z11.d                       
    MOVD 120(R14), R6
    WORD $0xa5ef40c5 // ld1d { z5.d }, p0/z, [x6, x15, lsl #3]      
    WORD $0x8581484a // ldr z10, [x2, #10, MUL VL]                  
    WORD $0x85814c4b // ldr z11, [x2, #11, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    WORD $0x04ab30a5 // eor z5.d, z5.d, z11.d                       
    MOVD 144(R14), R6
    WORD $0xa5ef40c6 // ld1d { z6.d }, p0/z, [x6, x15, lsl #3]      
    WORD $0x8581504a // ldr z10, [x2, #12, MUL VL]                  
    WORD $0x8581544b // ldr z11, [x2, #13, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30c6 // eor z6.d, z6.d, z10.d                       
    WORD $0x04ab30c6 // eor z6.d, z6.d, z11.d                       
    MOVD 168(R14), R6
    WORD $0xa5ef40c7 // ld1d { z7.d }, p0/z, [x6, x15, lsl #3]      
    WORD $0x8581584a // ldr z10, [x2, #14, MUL VL]                  
    WORD $0x85815c4b // ldr z11, [x2, #15, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30e7 // eor z7.d, z7.d, z10.d                       
    WORD $0x04ab30e7 // eor z7.d, z7.d, z11.d                       
    MOVD 192(R14), R6
    WORD $0xa5ef40c8 // ld1d { z8.d }, p0/z, [x6, x15, lsl #3]      
    WORD $0x8582404a // ldr z10, [x2, #16, MUL VL]                  
    WORD $0x8582444b // ldr z11, [x2, #17, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3108 // eor z8.d, z8.d, z10.d                       
    WORD $0x04ab3108 // eor z8.d, z8.d, z11.d                       
    // Check for early termination
    CMP    $1, R16
    BEQ    mulSve_10x9Xor_store

    // Load and process 32 bytes from input 1 to 9 outputs
    WORD $0x8580408c // ldr z12, [x4]                               
    WORD $0x04245024 // addvl x4, x4, #1
    WORD $0x04fc958d // lsr z13.d, z12.d, #4                        
    WORD $0x0429318c // and z12.d, z12.d, z9.d                      
    WORD $0x042931ad // and z13.d, z13.d, z9.d                      
    WORD $0x8582484a // ldr z10, [x2, #18, MUL VL]                  
    WORD $0x85824c4b // ldr z11, [x2, #19, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3000 // eor z0.d, z0.d, z10.d                       
    WORD $0x04ab3000 // eor z0.d, z0.d, z11.d                       
    WORD $0x8582504a // ldr z10, [x2, #20, MUL VL]                  
    WORD $0x8582544b // ldr z11, [x2, #21, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x04ab3021 // eor z1.d, z1.d, z11.d                       
    WORD $0x8582584a // ldr z10, [x2, #22, MUL VL]                  
    WORD $0x85825c4b // ldr z11, [x2, #23, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3042 // eor z2.d, z2.d, z10.d                       
    WORD $0x04ab3042 // eor z2.d, z2.d, z11.d                       
    WORD $0x8583404a // ldr z10, [x2, #24, MUL VL]                  
    WORD $0x8583444b // ldr z11, [x2, #25, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x04ab3063 // eor z3.d, z3.d, z11.d                       
    WORD $0x8583484a // ldr z10, [x2, #26, MUL VL]                  
    WORD $0x85834c4b // ldr z11, [x2, #27, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3084 // eor z4.d, z4.d, z10.d                       
    WORD $0x04ab3084 // eor z4.d, z4.d, z11.d                       
    WORD $0x8583504a // ldr z10, [x2, #28, MUL VL]                  
    WORD $0x8583544b // ldr z11, [x2, #29, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    WORD $0x04ab30a5 // eor z5.d, z5.d, z11.d                       
    WORD $0x8583584a // ldr z10, [x2, #30, MUL VL]                  
    WORD $0x85835c4b // ldr z11, [x2, #31, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30c6 // eor z6.d, z6.d, z10.d                       
    WORD $0x04ab30c6 // eor z6.d, z6.d, z11.d                       
    WORD $0x8584404a // ldr z10, [x2, #32, MUL VL]                  
    WORD $0x8584444b // ldr z11, [x2, #33, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30e7 // eor z7.d, z7.d, z10.d                       
    WORD $0x04ab30e7 // eor z7.d, z7.d, z11.d                       
    WORD $0x8584484a // ldr z10, [x2, #34, MUL VL]                  
    WORD $0x85844c4b // ldr z11, [x2, #35, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3108 // eor z8.d, z8.d, z10.d                       
    WORD $0x04ab3108 // eor z8.d, z8.d, z11.d                       
    // Check for early termination
    CMP    $2, R16
    BEQ    mulSve_10x9Xor_store

    // Load and process 32 bytes from input 2 to 9 outputs
    WORD $0x858040ac // ldr z12, [x5]                               
    WORD $0x04255025 // addvl x5, x5, #1
    WORD $0x04fc958d // lsr z13.d, z12.d, #4                        
    WORD $0x0429318c // and z12.d, z12.d, z9.d                      
    WORD $0x042931ad // and z13.d, z13.d, z9.d                      
    WORD $0x8584504a // ldr z10, [x2, #36, MUL VL]                  
    WORD $0x8584544b // ldr z11, [x2, #37, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3000 // eor z0.d, z0.d, z10.d                       
    WORD $0x04ab3000 // eor z0.d, z0.d, z11.d                       
    WORD $0x8584584a // ldr z10, [x2, #38, MUL VL]                  
    WORD $0x85845c4b // ldr z11, [x2, #39, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x04ab3021 // eor z1.d, z1.d, z11.d                       
    WORD $0x8585404a // ldr z10, [x2, #40, MUL VL]                  
    WORD $0x8585444b // ldr z11, [x2, #41, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3042 // eor z2.d, z2.d, z10.d                       
    WORD $0x04ab3042 // eor z2.d, z2.d, z11.d                       
    WORD $0x8585484a // ldr z10, [x2, #42, MUL VL]                  
    WORD $0x85854c4b // ldr z11, [x2, #43, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x04ab3063 // eor z3.d, z3.d, z11.d                       
    WORD $0x8585504a // ldr z10, [x2, #44, MUL VL]                  
    WORD $0x8585544b // ldr z11, [x2, #45, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3084 // eor z4.d, z4.d, z10.d                       
    WORD $0x04ab3084 // eor z4.d, z4.d, z11.d                       
    WORD $0x8585584a // ldr z10, [x2, #46, MUL VL]                  
    WORD $0x85855c4b // ldr z11, [x2, #47, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    WORD $0x04ab30a5 // eor z5.d, z5.d, z11.d                       
    WORD $0x8586404a // ldr z10, [x2, #48, MUL VL]                  
    WORD $0x8586444b // ldr z11, [x2, #49, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30c6 // eor z6.d, z6.d, z10.d                       
    WORD $0x04ab30c6 // eor z6.d, z6.d, z11.d                       
    WORD $0x8586484a // ldr z10, [x2, #50, MUL VL]                  
    WORD $0x85864c4b // ldr z11, [x2, #51, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30e7 // eor z7.d, z7.d, z10.d                       
    WORD $0x04ab30e7 // eor z7.d, z7.d, z11.d                       
    WORD $0x8586504a // ldr z10, [x2, #52, MUL VL]                  
    WORD $0x8586544b // ldr z11, [x2, #53, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3108 // eor z8.d, z8.d, z10.d                       
    WORD $0x04ab3108 // eor z8.d, z8.d, z11.d                       
    // Check for early termination
    CMP    $3, R16
    BEQ    mulSve_10x9Xor_store

    // Load and process 32 bytes from input 3 to 9 outputs
    WORD $0x8580410c // ldr z12, [x8]                               
    WORD $0x04285028 // addvl x8, x8, #1
    WORD $0x04fc958d // lsr z13.d, z12.d, #4                        
    WORD $0x0429318c // and z12.d, z12.d, z9.d                      
    WORD $0x042931ad // and z13.d, z13.d, z9.d                      
    WORD $0x8586584a // ldr z10, [x2, #54, MUL VL]                  
    WORD $0x85865c4b // ldr z11, [x2, #55, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3000 // eor z0.d, z0.d, z10.d                       
    WORD $0x04ab3000 // eor z0.d, z0.d, z11.d                       
    WORD $0x8587404a // ldr z10, [x2, #56, MUL VL]                  
    WORD $0x8587444b // ldr z11, [x2, #57, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x04ab3021 // eor z1.d, z1.d, z11.d                       
    WORD $0x8587484a // ldr z10, [x2, #58, MUL VL]                  
    WORD $0x85874c4b // ldr z11, [x2, #59, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3042 // eor z2.d, z2.d, z10.d                       
    WORD $0x04ab3042 // eor z2.d, z2.d, z11.d                       
    WORD $0x8587504a // ldr z10, [x2, #60, MUL VL]                  
    WORD $0x8587544b // ldr z11, [x2, #61, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x04ab3063 // eor z3.d, z3.d, z11.d                       
    WORD $0x8587584a // ldr z10, [x2, #62, MUL VL]                  
    WORD $0x85875c4b // ldr z11, [x2, #63, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3084 // eor z4.d, z4.d, z10.d                       
    WORD $0x04ab3084 // eor z4.d, z4.d, z11.d                       
    WORD $0x8588404a // ldr z10, [x2, #64, MUL VL]                  
    WORD $0x8588444b // ldr z11, [x2, #65, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    WORD $0x04ab30a5 // eor z5.d, z5.d, z11.d                       
    WORD $0x8588484a // ldr z10, [x2, #66, MUL VL]                  
    WORD $0x85884c4b // ldr z11, [x2, #67, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30c6 // eor z6.d, z6.d, z10.d                       
    WORD $0x04ab30c6 // eor z6.d, z6.d, z11.d                       
    WORD $0x8588504a // ldr z10, [x2, #68, MUL VL]                  
    WORD $0x8588544b // ldr z11, [x2, #69, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30e7 // eor z7.d, z7.d, z10.d                       
    WORD $0x04ab30e7 // eor z7.d, z7.d, z11.d                       
    WORD $0x8588584a // ldr z10, [x2, #70, MUL VL]                  
    WORD $0x85885c4b // ldr z11, [x2, #71, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3108 // eor z8.d, z8.d, z10.d                       
    WORD $0x04ab3108 // eor z8.d, z8.d, z11.d                       
    // Check for early termination
    CMP    $4, R16
    BEQ    mulSve_10x9Xor_store

    // Load and process 32 bytes from input 4 to 9 outputs
    WORD $0x8580412c // ldr z12, [x9]                               
    WORD $0x04295029 // addvl x9, x9, #1
    WORD $0x04fc958d // lsr z13.d, z12.d, #4                        
    WORD $0x0429318c // and z12.d, z12.d, z9.d                      
    WORD $0x042931ad // and z13.d, z13.d, z9.d                      
    WORD $0x8589404a // ldr z10, [x2, #72, MUL VL]                  
    WORD $0x8589444b // ldr z11, [x2, #73, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3000 // eor z0.d, z0.d, z10.d                       
    WORD $0x04ab3000 // eor z0.d, z0.d, z11.d                       
    WORD $0x8589484a // ldr z10, [x2, #74, MUL VL]                  
    WORD $0x85894c4b // ldr z11, [x2, #75, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x04ab3021 // eor z1.d, z1.d, z11.d                       
    WORD $0x8589504a // ldr z10, [x2, #76, MUL VL]                  
    WORD $0x8589544b // ldr z11, [x2, #77, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3042 // eor z2.d, z2.d, z10.d                       
    WORD $0x04ab3042 // eor z2.d, z2.d, z11.d                       
    WORD $0x8589584a // ldr z10, [x2, #78, MUL VL]                  
    WORD $0x85895c4b // ldr z11, [x2, #79, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x04ab3063 // eor z3.d, z3.d, z11.d                       
    WORD $0x858a404a // ldr z10, [x2, #80, MUL VL]                  
    WORD $0x858a444b // ldr z11, [x2, #81, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3084 // eor z4.d, z4.d, z10.d                       
    WORD $0x04ab3084 // eor z4.d, z4.d, z11.d                       
    WORD $0x858a484a // ldr z10, [x2, #82, MUL VL]                  
    WORD $0x858a4c4b // ldr z11, [x2, #83, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    WORD $0x04ab30a5 // eor z5.d, z5.d, z11.d                       
    WORD $0x858a504a // ldr z10, [x2, #84, MUL VL]                  
    WORD $0x858a544b // ldr z11, [x2, #85, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30c6 // eor z6.d, z6.d, z10.d                       
    WORD $0x04ab30c6 // eor z6.d, z6.d, z11.d                       
    WORD $0x858a584a // ldr z10, [x2, #86, MUL VL]                  
    WORD $0x858a5c4b // ldr z11, [x2, #87, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30e7 // eor z7.d, z7.d, z10.d                       
    WORD $0x04ab30e7 // eor z7.d, z7.d, z11.d                       
    WORD $0x858b404a // ldr z10, [x2, #88, MUL VL]                  
    WORD $0x858b444b // ldr z11, [x2, #89, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3108 // eor z8.d, z8.d, z10.d                       
    WORD $0x04ab3108 // eor z8.d, z8.d, z11.d                       
    // Check for early termination
    CMP    $5, R16
    BEQ    mulSve_10x9Xor_store

    // Load and process 32 bytes from input 5 to 9 outputs
    WORD $0x8580414c // ldr z12, [x10]                              
    WORD $0x042a502a // addvl x10, x10, #1
    WORD $0x04fc958d // lsr z13.d, z12.d, #4                        
    WORD $0x0429318c // and z12.d, z12.d, z9.d                      
    WORD $0x042931ad // and z13.d, z13.d, z9.d                      
    WORD $0x858b484a // ldr z10, [x2, #90, MUL VL]                  
    WORD $0x858b4c4b // ldr z11, [x2, #91, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3000 // eor z0.d, z0.d, z10.d                       
    WORD $0x04ab3000 // eor z0.d, z0.d, z11.d                       
    WORD $0x858b504a // ldr z10, [x2, #92, MUL VL]                  
    WORD $0x858b544b // ldr z11, [x2, #93, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x04ab3021 // eor z1.d, z1.d, z11.d                       
    WORD $0x858b584a // ldr z10, [x2, #94, MUL VL]                  
    WORD $0x858b5c4b // ldr z11, [x2, #95, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3042 // eor z2.d, z2.d, z10.d                       
    WORD $0x04ab3042 // eor z2.d, z2.d, z11.d                       
    WORD $0x858c404a // ldr z10, [x2, #96, MUL VL]                  
    WORD $0x858c444b // ldr z11, [x2, #97, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x04ab3063 // eor z3.d, z3.d, z11.d                       
    WORD $0x858c484a // ldr z10, [x2, #98, MUL VL]                  
    WORD $0x858c4c4b // ldr z11, [x2, #99, MUL VL]                  
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3084 // eor z4.d, z4.d, z10.d                       
    WORD $0x04ab3084 // eor z4.d, z4.d, z11.d                       
    WORD $0x858c504a // ldr z10, [x2, #100, MUL VL]                 
    WORD $0x858c544b // ldr z11, [x2, #101, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    WORD $0x04ab30a5 // eor z5.d, z5.d, z11.d                       
    WORD $0x858c584a // ldr z10, [x2, #102, MUL VL]                 
    WORD $0x858c5c4b // ldr z11, [x2, #103, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30c6 // eor z6.d, z6.d, z10.d                       
    WORD $0x04ab30c6 // eor z6.d, z6.d, z11.d                       
    WORD $0x858d404a // ldr z10, [x2, #104, MUL VL]                 
    WORD $0x858d444b // ldr z11, [x2, #105, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30e7 // eor z7.d, z7.d, z10.d                       
    WORD $0x04ab30e7 // eor z7.d, z7.d, z11.d                       
    WORD $0x858d484a // ldr z10, [x2, #106, MUL VL]                 
    WORD $0x858d4c4b // ldr z11, [x2, #107, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3108 // eor z8.d, z8.d, z10.d                       
    WORD $0x04ab3108 // eor z8.d, z8.d, z11.d                       
    // Check for early termination
    CMP    $6, R16
    BEQ    mulSve_10x9Xor_store

    // Load and process 32 bytes from input 6 to 9 outputs
    WORD $0x8580416c // ldr z12, [x11]                              
    WORD $0x042b502b // addvl x11, x11, #1
    WORD $0x04fc958d // lsr z13.d, z12.d, #4                        
    WORD $0x0429318c // and z12.d, z12.d, z9.d                      
    WORD $0x042931ad // and z13.d, z13.d, z9.d                      
    WORD $0x858d504a // ldr z10, [x2, #108, MUL VL]                 
    WORD $0x858d544b // ldr z11, [x2, #109, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3000 // eor z0.d, z0.d, z10.d                       
    WORD $0x04ab3000 // eor z0.d, z0.d, z11.d                       
    WORD $0x858d584a // ldr z10, [x2, #110, MUL VL]                 
    WORD $0x858d5c4b // ldr z11, [x2, #111, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x04ab3021 // eor z1.d, z1.d, z11.d                       
    WORD $0x858e404a // ldr z10, [x2, #112, MUL VL]                 
    WORD $0x858e444b // ldr z11, [x2, #113, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3042 // eor z2.d, z2.d, z10.d                       
    WORD $0x04ab3042 // eor z2.d, z2.d, z11.d                       
    WORD $0x858e484a // ldr z10, [x2, #114, MUL VL]                 
    WORD $0x858e4c4b // ldr z11, [x2, #115, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x04ab3063 // eor z3.d, z3.d, z11.d                       
    WORD $0x858e504a // ldr z10, [x2, #116, MUL VL]                 
    WORD $0x858e544b // ldr z11, [x2, #117, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3084 // eor z4.d, z4.d, z10.d                       
    WORD $0x04ab3084 // eor z4.d, z4.d, z11.d                       
    WORD $0x858e584a // ldr z10, [x2, #118, MUL VL]                 
    WORD $0x858e5c4b // ldr z11, [x2, #119, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    WORD $0x04ab30a5 // eor z5.d, z5.d, z11.d                       
    WORD $0x858f404a // ldr z10, [x2, #120, MUL VL]                 
    WORD $0x858f444b // ldr z11, [x2, #121, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30c6 // eor z6.d, z6.d, z10.d                       
    WORD $0x04ab30c6 // eor z6.d, z6.d, z11.d                       
    WORD $0x858f484a // ldr z10, [x2, #122, MUL VL]                 
    WORD $0x858f4c4b // ldr z11, [x2, #123, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30e7 // eor z7.d, z7.d, z10.d                       
    WORD $0x04ab30e7 // eor z7.d, z7.d, z11.d                       
    WORD $0x858f504a // ldr z10, [x2, #124, MUL VL]                 
    WORD $0x858f544b // ldr z11, [x2, #125, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3108 // eor z8.d, z8.d, z10.d                       
    WORD $0x04ab3108 // eor z8.d, z8.d, z11.d                       
    // Check for early termination
    CMP    $7, R16
    BEQ    mulSve_10x9Xor_store

    // Load and process 32 bytes from input 7 to 9 outputs
    WORD $0x8580418c // ldr z12, [x12]                              
    WORD $0x042c502c // addvl x12, x12, #1
    WORD $0x04fc958d // lsr z13.d, z12.d, #4                        
    WORD $0x0429318c // and z12.d, z12.d, z9.d                      
    WORD $0x042931ad // and z13.d, z13.d, z9.d                      
    WORD $0x858f584a // ldr z10, [x2, #126, MUL VL]                 
    WORD $0x858f5c4b // ldr z11, [x2, #127, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3000 // eor z0.d, z0.d, z10.d                       
    WORD $0x04ab3000 // eor z0.d, z0.d, z11.d                       
    WORD $0x8590404a // ldr z10, [x2, #128, MUL VL]                 
    WORD $0x8590444b // ldr z11, [x2, #129, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x04ab3021 // eor z1.d, z1.d, z11.d                       
    WORD $0x8590484a // ldr z10, [x2, #130, MUL VL]                 
    WORD $0x85904c4b // ldr z11, [x2, #131, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3042 // eor z2.d, z2.d, z10.d                       
    WORD $0x04ab3042 // eor z2.d, z2.d, z11.d                       
    WORD $0x8590504a // ldr z10, [x2, #132, MUL VL]                 
    WORD $0x8590544b // ldr z11, [x2, #133, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x04ab3063 // eor z3.d, z3.d, z11.d                       
    WORD $0x8590584a // ldr z10, [x2, #134, MUL VL]                 
    WORD $0x85905c4b // ldr z11, [x2, #135, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3084 // eor z4.d, z4.d, z10.d                       
    WORD $0x04ab3084 // eor z4.d, z4.d, z11.d                       
    WORD $0x8591404a // ldr z10, [x2, #136, MUL VL]                 
    WORD $0x8591444b // ldr z11, [x2, #137, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    WORD $0x04ab30a5 // eor z5.d, z5.d, z11.d                       
    WORD $0x8591484a // ldr z10, [x2, #138, MUL VL]                 
    WORD $0x85914c4b // ldr z11, [x2, #139, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30c6 // eor z6.d, z6.d, z10.d                       
    WORD $0x04ab30c6 // eor z6.d, z6.d, z11.d                       
    WORD $0x8591504a // ldr z10, [x2, #140, MUL VL]                 
    WORD $0x8591544b // ldr z11, [x2, #141, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30e7 // eor z7.d, z7.d, z10.d                       
    WORD $0x04ab30e7 // eor z7.d, z7.d, z11.d                       
    WORD $0x8591584a // ldr z10, [x2, #142, MUL VL]                 
    WORD $0x85915c4b // ldr z11, [x2, #143, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3108 // eor z8.d, z8.d, z10.d                       
    WORD $0x04ab3108 // eor z8.d, z8.d, z11.d                       
    // Check for early termination
    CMP    $8, R16
    BEQ    mulSve_10x9Xor_store

    // Load and process 32 bytes from input 8 to 9 outputs
    WORD $0x858041ac // ldr z12, [x13]                              
    WORD $0x042d502d // addvl x13, x13, #1
    WORD $0x04fc958d // lsr z13.d, z12.d, #4                        
    WORD $0x0429318c // and z12.d, z12.d, z9.d                      
    WORD $0x042931ad // and z13.d, z13.d, z9.d                      
    WORD $0x8592404a // ldr z10, [x2, #144, MUL VL]                 
    WORD $0x8592444b // ldr z11, [x2, #145, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3000 // eor z0.d, z0.d, z10.d                       
    WORD $0x04ab3000 // eor z0.d, z0.d, z11.d                       
    WORD $0x8592484a // ldr z10, [x2, #146, MUL VL]                 
    WORD $0x85924c4b // ldr z11, [x2, #147, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x04ab3021 // eor z1.d, z1.d, z11.d                       
    WORD $0x8592504a // ldr z10, [x2, #148, MUL VL]                 
    WORD $0x8592544b // ldr z11, [x2, #149, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3042 // eor z2.d, z2.d, z10.d                       
    WORD $0x04ab3042 // eor z2.d, z2.d, z11.d                       
    WORD $0x8592584a // ldr z10, [x2, #150, MUL VL]                 
    WORD $0x85925c4b // ldr z11, [x2, #151, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x04ab3063 // eor z3.d, z3.d, z11.d                       
    WORD $0x8593404a // ldr z10, [x2, #152, MUL VL]                 
    WORD $0x8593444b // ldr z11, [x2, #153, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3084 // eor z4.d, z4.d, z10.d                       
    WORD $0x04ab3084 // eor z4.d, z4.d, z11.d                       
    WORD $0x8593484a // ldr z10, [x2, #154, MUL VL]                 
    WORD $0x85934c4b // ldr z11, [x2, #155, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    WORD $0x04ab30a5 // eor z5.d, z5.d, z11.d                       
    WORD $0x8593504a // ldr z10, [x2, #156, MUL VL]                 
    WORD $0x8593544b // ldr z11, [x2, #157, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30c6 // eor z6.d, z6.d, z10.d                       
    WORD $0x04ab30c6 // eor z6.d, z6.d, z11.d                       
    WORD $0x8593584a // ldr z10, [x2, #158, MUL VL]                 
    WORD $0x85935c4b // ldr z11, [x2, #159, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30e7 // eor z7.d, z7.d, z10.d                       
    WORD $0x04ab30e7 // eor z7.d, z7.d, z11.d                       
    WORD $0x8594404a // ldr z10, [x2, #160, MUL VL]                 
    WORD $0x8594444b // ldr z11, [x2, #161, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3108 // eor z8.d, z8.d, z10.d                       
    WORD $0x04ab3108 // eor z8.d, z8.d, z11.d                       
    // Check for early termination
    CMP    $9, R16
    BEQ    mulSve_10x9Xor_store

    // Load and process 32 bytes from input 9 to 9 outputs
    WORD $0x8580406c // ldr z12, [x3]                               
    WORD $0x04235023 // addvl x3, x3, #1
    WORD $0x04fc958d // lsr z13.d, z12.d, #4                        
    WORD $0x0429318c // and z12.d, z12.d, z9.d                      
    WORD $0x042931ad // and z13.d, z13.d, z9.d                      
    WORD $0x8594484a // ldr z10, [x2, #162, MUL VL]                 
    WORD $0x85944c4b // ldr z11, [x2, #163, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3000 // eor z0.d, z0.d, z10.d                       
    WORD $0x04ab3000 // eor z0.d, z0.d, z11.d                       
    WORD $0x8594504a // ldr z10, [x2, #164, MUL VL]                 
    WORD $0x8594544b // ldr z11, [x2, #165, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3021 // eor z1.d, z1.d, z10.d                       
    WORD $0x04ab3021 // eor z1.d, z1.d, z11.d                       
    WORD $0x8594584a // ldr z10, [x2, #166, MUL VL]                 
    WORD $0x85945c4b // ldr z11, [x2, #167, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3042 // eor z2.d, z2.d, z10.d                       
    WORD $0x04ab3042 // eor z2.d, z2.d, z11.d                       
    WORD $0x8595404a // ldr z10, [x2, #168, MUL VL]                 
    WORD $0x8595444b // ldr z11, [x2, #169, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3063 // eor z3.d, z3.d, z10.d                       
    WORD $0x04ab3063 // eor z3.d, z3.d, z11.d                       
    WORD $0x8595484a // ldr z10, [x2, #170, MUL VL]                 
    WORD $0x85954c4b // ldr z11, [x2, #171, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3084 // eor z4.d, z4.d, z10.d                       
    WORD $0x04ab3084 // eor z4.d, z4.d, z11.d                       
    WORD $0x8595504a // ldr z10, [x2, #172, MUL VL]                 
    WORD $0x8595544b // ldr z11, [x2, #173, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30a5 // eor z5.d, z5.d, z10.d                       
    WORD $0x04ab30a5 // eor z5.d, z5.d, z11.d                       
    WORD $0x8595584a // ldr z10, [x2, #174, MUL VL]                 
    WORD $0x85955c4b // ldr z11, [x2, #175, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30c6 // eor z6.d, z6.d, z10.d                       
    WORD $0x04ab30c6 // eor z6.d, z6.d, z11.d                       
    WORD $0x8596404a // ldr z10, [x2, #176, MUL VL]                 
    WORD $0x8596444b // ldr z11, [x2, #177, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa30e7 // eor z7.d, z7.d, z10.d                       
    WORD $0x04ab30e7 // eor z7.d, z7.d, z11.d                       
    WORD $0x8596484a // ldr z10, [x2, #178, MUL VL]                 
    WORD $0x85964c4b // ldr z11, [x2, #179, MUL VL]                 
    WORD $0x052c314a // tbl z10.b, z10.b, z12.b                     
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x04aa3108 // eor z8.d, z8.d, z10.d                       
    WORD $0x04ab3108 // eor z8.d, z8.d, z11.d                       

mulSve_10x9Xor_store:
    // Store 9 outputs
    MOVD (R14), R6
    WORD $0xe5ef40c0 // st1d { z0.d }, p0, [x6, x15, lsl #3]        
    MOVD 24(R14), R6
    WORD $0xe5ef40c1 // st1d { z1.d }, p0, [x6, x15, lsl #3]        
    MOVD 48(R14), R6
    WORD $0xe5ef40c2 // st1d { z2.d }, p0, [x6, x15, lsl #3]        
    MOVD 72(R14), R6
    WORD $0xe5ef40c3 // st1d { z3.d }, p0, [x6, x15, lsl #3]        
    MOVD 96(R14), R6
    WORD $0xe5ef40c4 // st1d { z4.d }, p0, [x6, x15, lsl #3]        
    MOVD 120(R14), R6
    WORD $0xe5ef40c5 // st1d { z5.d }, p0, [x6, x15, lsl #3]        
    MOVD 144(R14), R6
    WORD $0xe5ef40c6 // st1d { z6.d }, p0, [x6, x15, lsl #3]        
    MOVD 168(R14), R6
    WORD $0xe5ef40c7 // st1d { z7.d }, p0, [x6, x15, lsl #3]        
    MOVD 192(R14), R6
    WORD $0xe5ef40c8 // st1d { z8.d }, p0, [x6, x15, lsl #3]        

    // Prepare for next loop
    WORD $0x8b1101ef // add x15, x15, x17
    WORD $0xf1000400 // subs x0, x0, #1                             
    BNE  mulSve_10x9Xor_loop

mulSve_10x9Xor_end:
    RET

// func mulSve_10x10(matrix []byte, in [][]byte, out [][]byte, start int, n int)
// Requires: SVE
TEXT Â·mulSve_10x10(SB), NOSPLIT, $8-88
    WORD $0x25d8e3e0 // ptrue p0.d
    // Loading no tables to registers
    // Destination kept on stack
    // Full registers estimated 215 YMM used
    MOVD n+80(FP), R0
    MOVD matrix_base+0(FP), R2
    WORD $0xd345fc00 // lsr x0, x0, #5                              
    WORD $0xd37be800 // lsl x0, x0, #5
    WORD $0x04bf5030 // rdvl x16, #1
    WORD $0x9ad00800 // udiv x0, x0, x16
    WORD $0xea00001f // tst x0, x0                                  
    BEQ    mulSve_10x10_end
    MOVD in_base+24(FP), R3
    MOVD (R3), R1
    MOVD 24(R3), R4
    MOVD 48(R3), R5
    MOVD 72(R3), R8
    MOVD 96(R3), R9
    MOVD 120(R3), R10
    MOVD 144(R3), R11
    MOVD 168(R3), R12
    MOVD 192(R3), R13
    MOVD 216(R3), R3
    MOVD out_base+48(FP), R14
    MOVD start+72(FP), R15

    // Add start offset to input
    WORD $0x8b0f0021 // add x1, x1, x15                             
    WORD $0x8b0f0084 // add x4, x4, x15                             
    WORD $0x8b0f00a5 // add x5, x5, x15                             
    WORD $0x8b0f0108 // add x8, x8, x15                             
    WORD $0x8b0f0129 // add x9, x9, x15                             
    WORD $0x8b0f014a // add x10, x10, x15                           
    WORD $0x8b0f016b // add x11, x11, x15                           
    WORD $0x8b0f018c // add x12, x12, x15                           
    WORD $0x8b0f01ad // add x13, x13, x15                           
    WORD $0x8b0f0063 // add x3, x3, x15                             
    WORD $0xd343fdef // lsr x15, x15, #3                            
    WORD $0xd28001e6 // mov x6, #15                                 
    WORD $0x05e038ca // mov z10.d, x6                               
    WORD $0x0521214a // dup z10.b, z10.b[0]                         

    // Load number of input shards
    MOVD   in_len+32(FP), R16
    WORD $0x04bf5031 // rdvl x17, #1
    WORD $0xd343fe31 // lsr  x17, x17, #3

mulSve_10x10_loop:
    // Load and process 32 bytes from input 0 to 10 outputs
    WORD $0x8580402d // ldr z13, [x1]                               
    WORD $0x04215021 // addvl x1, x1, #1
    WORD $0x04fc95ae // lsr z14.d, z13.d, #4                        
    WORD $0x042a31ad // and z13.d, z13.d, z10.d                     
    WORD $0x042a31ce // and z14.d, z14.d, z10.d                     
    WORD $0x8580404b // ldr z11, [x2]                               
    WORD $0x8580444c // ldr z12, [x2, #1, MUL VL]                   
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3180 // eor z0.d, z12.d, z11.d                      
    WORD $0x8580484b // ldr z11, [x2, #2, MUL VL]                   
    WORD $0x85804c4c // ldr z12, [x2, #3, MUL VL]                   
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3181 // eor z1.d, z12.d, z11.d                      
    WORD $0x8580504b // ldr z11, [x2, #4, MUL VL]                   
    WORD $0x8580544c // ldr z12, [x2, #5, MUL VL]                   
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3182 // eor z2.d, z12.d, z11.d                      
    WORD $0x8580584b // ldr z11, [x2, #6, MUL VL]                   
    WORD $0x85805c4c // ldr z12, [x2, #7, MUL VL]                   
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3183 // eor z3.d, z12.d, z11.d                      
    WORD $0x8581404b // ldr z11, [x2, #8, MUL VL]                   
    WORD $0x8581444c // ldr z12, [x2, #9, MUL VL]                   
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3184 // eor z4.d, z12.d, z11.d                      
    WORD $0x8581484b // ldr z11, [x2, #10, MUL VL]                  
    WORD $0x85814c4c // ldr z12, [x2, #11, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3185 // eor z5.d, z12.d, z11.d                      
    WORD $0x8581504b // ldr z11, [x2, #12, MUL VL]                  
    WORD $0x8581544c // ldr z12, [x2, #13, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3186 // eor z6.d, z12.d, z11.d                      
    WORD $0x8581584b // ldr z11, [x2, #14, MUL VL]                  
    WORD $0x85815c4c // ldr z12, [x2, #15, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3187 // eor z7.d, z12.d, z11.d                      
    WORD $0x8582404b // ldr z11, [x2, #16, MUL VL]                  
    WORD $0x8582444c // ldr z12, [x2, #17, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3188 // eor z8.d, z12.d, z11.d                      
    WORD $0x8582484b // ldr z11, [x2, #18, MUL VL]                  
    WORD $0x85824c4c // ldr z12, [x2, #19, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3189 // eor z9.d, z12.d, z11.d                      
    // Check for early termination
    CMP    $1, R16
    BEQ    mulSve_10x10_store

    // Load and process 32 bytes from input 1 to 10 outputs
    WORD $0x8580408d // ldr z13, [x4]                               
    WORD $0x04245024 // addvl x4, x4, #1
    WORD $0x04fc95ae // lsr z14.d, z13.d, #4                        
    WORD $0x042a31ad // and z13.d, z13.d, z10.d                     
    WORD $0x042a31ce // and z14.d, z14.d, z10.d                     
    WORD $0x8582504b // ldr z11, [x2, #20, MUL VL]                  
    WORD $0x8582544c // ldr z12, [x2, #21, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3000 // eor z0.d, z0.d, z11.d                       
    WORD $0x04ac3000 // eor z0.d, z0.d, z12.d                       
    WORD $0x8582584b // ldr z11, [x2, #22, MUL VL]                  
    WORD $0x85825c4c // ldr z12, [x2, #23, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3021 // eor z1.d, z1.d, z11.d                       
    WORD $0x04ac3021 // eor z1.d, z1.d, z12.d                       
    WORD $0x8583404b // ldr z11, [x2, #24, MUL VL]                  
    WORD $0x8583444c // ldr z12, [x2, #25, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3042 // eor z2.d, z2.d, z11.d                       
    WORD $0x04ac3042 // eor z2.d, z2.d, z12.d                       
    WORD $0x8583484b // ldr z11, [x2, #26, MUL VL]                  
    WORD $0x85834c4c // ldr z12, [x2, #27, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3063 // eor z3.d, z3.d, z11.d                       
    WORD $0x04ac3063 // eor z3.d, z3.d, z12.d                       
    WORD $0x8583504b // ldr z11, [x2, #28, MUL VL]                  
    WORD $0x8583544c // ldr z12, [x2, #29, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3084 // eor z4.d, z4.d, z11.d                       
    WORD $0x04ac3084 // eor z4.d, z4.d, z12.d                       
    WORD $0x8583584b // ldr z11, [x2, #30, MUL VL]                  
    WORD $0x85835c4c // ldr z12, [x2, #31, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30a5 // eor z5.d, z5.d, z11.d                       
    WORD $0x04ac30a5 // eor z5.d, z5.d, z12.d                       
    WORD $0x8584404b // ldr z11, [x2, #32, MUL VL]                  
    WORD $0x8584444c // ldr z12, [x2, #33, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30c6 // eor z6.d, z6.d, z11.d                       
    WORD $0x04ac30c6 // eor z6.d, z6.d, z12.d                       
    WORD $0x8584484b // ldr z11, [x2, #34, MUL VL]                  
    WORD $0x85844c4c // ldr z12, [x2, #35, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30e7 // eor z7.d, z7.d, z11.d                       
    WORD $0x04ac30e7 // eor z7.d, z7.d, z12.d                       
    WORD $0x8584504b // ldr z11, [x2, #36, MUL VL]                  
    WORD $0x8584544c // ldr z12, [x2, #37, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3108 // eor z8.d, z8.d, z11.d                       
    WORD $0x04ac3108 // eor z8.d, z8.d, z12.d                       
    WORD $0x8584584b // ldr z11, [x2, #38, MUL VL]                  
    WORD $0x85845c4c // ldr z12, [x2, #39, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3129 // eor z9.d, z9.d, z11.d                       
    WORD $0x04ac3129 // eor z9.d, z9.d, z12.d                       
    // Check for early termination
    CMP    $2, R16
    BEQ    mulSve_10x10_store

    // Load and process 32 bytes from input 2 to 10 outputs
    WORD $0x858040ad // ldr z13, [x5]                               
    WORD $0x04255025 // addvl x5, x5, #1
    WORD $0x04fc95ae // lsr z14.d, z13.d, #4                        
    WORD $0x042a31ad // and z13.d, z13.d, z10.d                     
    WORD $0x042a31ce // and z14.d, z14.d, z10.d                     
    WORD $0x8585404b // ldr z11, [x2, #40, MUL VL]                  
    WORD $0x8585444c // ldr z12, [x2, #41, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3000 // eor z0.d, z0.d, z11.d                       
    WORD $0x04ac3000 // eor z0.d, z0.d, z12.d                       
    WORD $0x8585484b // ldr z11, [x2, #42, MUL VL]                  
    WORD $0x85854c4c // ldr z12, [x2, #43, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3021 // eor z1.d, z1.d, z11.d                       
    WORD $0x04ac3021 // eor z1.d, z1.d, z12.d                       
    WORD $0x8585504b // ldr z11, [x2, #44, MUL VL]                  
    WORD $0x8585544c // ldr z12, [x2, #45, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3042 // eor z2.d, z2.d, z11.d                       
    WORD $0x04ac3042 // eor z2.d, z2.d, z12.d                       
    WORD $0x8585584b // ldr z11, [x2, #46, MUL VL]                  
    WORD $0x85855c4c // ldr z12, [x2, #47, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3063 // eor z3.d, z3.d, z11.d                       
    WORD $0x04ac3063 // eor z3.d, z3.d, z12.d                       
    WORD $0x8586404b // ldr z11, [x2, #48, MUL VL]                  
    WORD $0x8586444c // ldr z12, [x2, #49, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3084 // eor z4.d, z4.d, z11.d                       
    WORD $0x04ac3084 // eor z4.d, z4.d, z12.d                       
    WORD $0x8586484b // ldr z11, [x2, #50, MUL VL]                  
    WORD $0x85864c4c // ldr z12, [x2, #51, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30a5 // eor z5.d, z5.d, z11.d                       
    WORD $0x04ac30a5 // eor z5.d, z5.d, z12.d                       
    WORD $0x8586504b // ldr z11, [x2, #52, MUL VL]                  
    WORD $0x8586544c // ldr z12, [x2, #53, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30c6 // eor z6.d, z6.d, z11.d                       
    WORD $0x04ac30c6 // eor z6.d, z6.d, z12.d                       
    WORD $0x8586584b // ldr z11, [x2, #54, MUL VL]                  
    WORD $0x85865c4c // ldr z12, [x2, #55, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30e7 // eor z7.d, z7.d, z11.d                       
    WORD $0x04ac30e7 // eor z7.d, z7.d, z12.d                       
    WORD $0x8587404b // ldr z11, [x2, #56, MUL VL]                  
    WORD $0x8587444c // ldr z12, [x2, #57, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3108 // eor z8.d, z8.d, z11.d                       
    WORD $0x04ac3108 // eor z8.d, z8.d, z12.d                       
    WORD $0x8587484b // ldr z11, [x2, #58, MUL VL]                  
    WORD $0x85874c4c // ldr z12, [x2, #59, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3129 // eor z9.d, z9.d, z11.d                       
    WORD $0x04ac3129 // eor z9.d, z9.d, z12.d                       
    // Check for early termination
    CMP    $3, R16
    BEQ    mulSve_10x10_store

    // Load and process 32 bytes from input 3 to 10 outputs
    WORD $0x8580410d // ldr z13, [x8]                               
    WORD $0x04285028 // addvl x8, x8, #1
    WORD $0x04fc95ae // lsr z14.d, z13.d, #4                        
    WORD $0x042a31ad // and z13.d, z13.d, z10.d                     
    WORD $0x042a31ce // and z14.d, z14.d, z10.d                     
    WORD $0x8587504b // ldr z11, [x2, #60, MUL VL]                  
    WORD $0x8587544c // ldr z12, [x2, #61, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3000 // eor z0.d, z0.d, z11.d                       
    WORD $0x04ac3000 // eor z0.d, z0.d, z12.d                       
    WORD $0x8587584b // ldr z11, [x2, #62, MUL VL]                  
    WORD $0x85875c4c // ldr z12, [x2, #63, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3021 // eor z1.d, z1.d, z11.d                       
    WORD $0x04ac3021 // eor z1.d, z1.d, z12.d                       
    WORD $0x8588404b // ldr z11, [x2, #64, MUL VL]                  
    WORD $0x8588444c // ldr z12, [x2, #65, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3042 // eor z2.d, z2.d, z11.d                       
    WORD $0x04ac3042 // eor z2.d, z2.d, z12.d                       
    WORD $0x8588484b // ldr z11, [x2, #66, MUL VL]                  
    WORD $0x85884c4c // ldr z12, [x2, #67, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3063 // eor z3.d, z3.d, z11.d                       
    WORD $0x04ac3063 // eor z3.d, z3.d, z12.d                       
    WORD $0x8588504b // ldr z11, [x2, #68, MUL VL]                  
    WORD $0x8588544c // ldr z12, [x2, #69, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3084 // eor z4.d, z4.d, z11.d                       
    WORD $0x04ac3084 // eor z4.d, z4.d, z12.d                       
    WORD $0x8588584b // ldr z11, [x2, #70, MUL VL]                  
    WORD $0x85885c4c // ldr z12, [x2, #71, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30a5 // eor z5.d, z5.d, z11.d                       
    WORD $0x04ac30a5 // eor z5.d, z5.d, z12.d                       
    WORD $0x8589404b // ldr z11, [x2, #72, MUL VL]                  
    WORD $0x8589444c // ldr z12, [x2, #73, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30c6 // eor z6.d, z6.d, z11.d                       
    WORD $0x04ac30c6 // eor z6.d, z6.d, z12.d                       
    WORD $0x8589484b // ldr z11, [x2, #74, MUL VL]                  
    WORD $0x85894c4c // ldr z12, [x2, #75, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30e7 // eor z7.d, z7.d, z11.d                       
    WORD $0x04ac30e7 // eor z7.d, z7.d, z12.d                       
    WORD $0x8589504b // ldr z11, [x2, #76, MUL VL]                  
    WORD $0x8589544c // ldr z12, [x2, #77, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3108 // eor z8.d, z8.d, z11.d                       
    WORD $0x04ac3108 // eor z8.d, z8.d, z12.d                       
    WORD $0x8589584b // ldr z11, [x2, #78, MUL VL]                  
    WORD $0x85895c4c // ldr z12, [x2, #79, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3129 // eor z9.d, z9.d, z11.d                       
    WORD $0x04ac3129 // eor z9.d, z9.d, z12.d                       
    // Check for early termination
    CMP    $4, R16
    BEQ    mulSve_10x10_store

    // Load and process 32 bytes from input 4 to 10 outputs
    WORD $0x8580412d // ldr z13, [x9]                               
    WORD $0x04295029 // addvl x9, x9, #1
    WORD $0x04fc95ae // lsr z14.d, z13.d, #4                        
    WORD $0x042a31ad // and z13.d, z13.d, z10.d                     
    WORD $0x042a31ce // and z14.d, z14.d, z10.d                     
    WORD $0x858a404b // ldr z11, [x2, #80, MUL VL]                  
    WORD $0x858a444c // ldr z12, [x2, #81, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3000 // eor z0.d, z0.d, z11.d                       
    WORD $0x04ac3000 // eor z0.d, z0.d, z12.d                       
    WORD $0x858a484b // ldr z11, [x2, #82, MUL VL]                  
    WORD $0x858a4c4c // ldr z12, [x2, #83, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3021 // eor z1.d, z1.d, z11.d                       
    WORD $0x04ac3021 // eor z1.d, z1.d, z12.d                       
    WORD $0x858a504b // ldr z11, [x2, #84, MUL VL]                  
    WORD $0x858a544c // ldr z12, [x2, #85, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3042 // eor z2.d, z2.d, z11.d                       
    WORD $0x04ac3042 // eor z2.d, z2.d, z12.d                       
    WORD $0x858a584b // ldr z11, [x2, #86, MUL VL]                  
    WORD $0x858a5c4c // ldr z12, [x2, #87, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3063 // eor z3.d, z3.d, z11.d                       
    WORD $0x04ac3063 // eor z3.d, z3.d, z12.d                       
    WORD $0x858b404b // ldr z11, [x2, #88, MUL VL]                  
    WORD $0x858b444c // ldr z12, [x2, #89, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3084 // eor z4.d, z4.d, z11.d                       
    WORD $0x04ac3084 // eor z4.d, z4.d, z12.d                       
    WORD $0x858b484b // ldr z11, [x2, #90, MUL VL]                  
    WORD $0x858b4c4c // ldr z12, [x2, #91, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30a5 // eor z5.d, z5.d, z11.d                       
    WORD $0x04ac30a5 // eor z5.d, z5.d, z12.d                       
    WORD $0x858b504b // ldr z11, [x2, #92, MUL VL]                  
    WORD $0x858b544c // ldr z12, [x2, #93, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30c6 // eor z6.d, z6.d, z11.d                       
    WORD $0x04ac30c6 // eor z6.d, z6.d, z12.d                       
    WORD $0x858b584b // ldr z11, [x2, #94, MUL VL]                  
    WORD $0x858b5c4c // ldr z12, [x2, #95, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30e7 // eor z7.d, z7.d, z11.d                       
    WORD $0x04ac30e7 // eor z7.d, z7.d, z12.d                       
    WORD $0x858c404b // ldr z11, [x2, #96, MUL VL]                  
    WORD $0x858c444c // ldr z12, [x2, #97, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3108 // eor z8.d, z8.d, z11.d                       
    WORD $0x04ac3108 // eor z8.d, z8.d, z12.d                       
    WORD $0x858c484b // ldr z11, [x2, #98, MUL VL]                  
    WORD $0x858c4c4c // ldr z12, [x2, #99, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3129 // eor z9.d, z9.d, z11.d                       
    WORD $0x04ac3129 // eor z9.d, z9.d, z12.d                       
    // Check for early termination
    CMP    $5, R16
    BEQ    mulSve_10x10_store

    // Load and process 32 bytes from input 5 to 10 outputs
    WORD $0x8580414d // ldr z13, [x10]                              
    WORD $0x042a502a // addvl x10, x10, #1
    WORD $0x04fc95ae // lsr z14.d, z13.d, #4                        
    WORD $0x042a31ad // and z13.d, z13.d, z10.d                     
    WORD $0x042a31ce // and z14.d, z14.d, z10.d                     
    WORD $0x858c504b // ldr z11, [x2, #100, MUL VL]                 
    WORD $0x858c544c // ldr z12, [x2, #101, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3000 // eor z0.d, z0.d, z11.d                       
    WORD $0x04ac3000 // eor z0.d, z0.d, z12.d                       
    WORD $0x858c584b // ldr z11, [x2, #102, MUL VL]                 
    WORD $0x858c5c4c // ldr z12, [x2, #103, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3021 // eor z1.d, z1.d, z11.d                       
    WORD $0x04ac3021 // eor z1.d, z1.d, z12.d                       
    WORD $0x858d404b // ldr z11, [x2, #104, MUL VL]                 
    WORD $0x858d444c // ldr z12, [x2, #105, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3042 // eor z2.d, z2.d, z11.d                       
    WORD $0x04ac3042 // eor z2.d, z2.d, z12.d                       
    WORD $0x858d484b // ldr z11, [x2, #106, MUL VL]                 
    WORD $0x858d4c4c // ldr z12, [x2, #107, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3063 // eor z3.d, z3.d, z11.d                       
    WORD $0x04ac3063 // eor z3.d, z3.d, z12.d                       
    WORD $0x858d504b // ldr z11, [x2, #108, MUL VL]                 
    WORD $0x858d544c // ldr z12, [x2, #109, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3084 // eor z4.d, z4.d, z11.d                       
    WORD $0x04ac3084 // eor z4.d, z4.d, z12.d                       
    WORD $0x858d584b // ldr z11, [x2, #110, MUL VL]                 
    WORD $0x858d5c4c // ldr z12, [x2, #111, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30a5 // eor z5.d, z5.d, z11.d                       
    WORD $0x04ac30a5 // eor z5.d, z5.d, z12.d                       
    WORD $0x858e404b // ldr z11, [x2, #112, MUL VL]                 
    WORD $0x858e444c // ldr z12, [x2, #113, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30c6 // eor z6.d, z6.d, z11.d                       
    WORD $0x04ac30c6 // eor z6.d, z6.d, z12.d                       
    WORD $0x858e484b // ldr z11, [x2, #114, MUL VL]                 
    WORD $0x858e4c4c // ldr z12, [x2, #115, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30e7 // eor z7.d, z7.d, z11.d                       
    WORD $0x04ac30e7 // eor z7.d, z7.d, z12.d                       
    WORD $0x858e504b // ldr z11, [x2, #116, MUL VL]                 
    WORD $0x858e544c // ldr z12, [x2, #117, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3108 // eor z8.d, z8.d, z11.d                       
    WORD $0x04ac3108 // eor z8.d, z8.d, z12.d                       
    WORD $0x858e584b // ldr z11, [x2, #118, MUL VL]                 
    WORD $0x858e5c4c // ldr z12, [x2, #119, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3129 // eor z9.d, z9.d, z11.d                       
    WORD $0x04ac3129 // eor z9.d, z9.d, z12.d                       
    // Check for early termination
    CMP    $6, R16
    BEQ    mulSve_10x10_store

    // Load and process 32 bytes from input 6 to 10 outputs
    WORD $0x8580416d // ldr z13, [x11]                              
    WORD $0x042b502b // addvl x11, x11, #1
    WORD $0x04fc95ae // lsr z14.d, z13.d, #4                        
    WORD $0x042a31ad // and z13.d, z13.d, z10.d                     
    WORD $0x042a31ce // and z14.d, z14.d, z10.d                     
    WORD $0x858f404b // ldr z11, [x2, #120, MUL VL]                 
    WORD $0x858f444c // ldr z12, [x2, #121, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3000 // eor z0.d, z0.d, z11.d                       
    WORD $0x04ac3000 // eor z0.d, z0.d, z12.d                       
    WORD $0x858f484b // ldr z11, [x2, #122, MUL VL]                 
    WORD $0x858f4c4c // ldr z12, [x2, #123, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3021 // eor z1.d, z1.d, z11.d                       
    WORD $0x04ac3021 // eor z1.d, z1.d, z12.d                       
    WORD $0x858f504b // ldr z11, [x2, #124, MUL VL]                 
    WORD $0x858f544c // ldr z12, [x2, #125, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3042 // eor z2.d, z2.d, z11.d                       
    WORD $0x04ac3042 // eor z2.d, z2.d, z12.d                       
    WORD $0x858f584b // ldr z11, [x2, #126, MUL VL]                 
    WORD $0x858f5c4c // ldr z12, [x2, #127, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3063 // eor z3.d, z3.d, z11.d                       
    WORD $0x04ac3063 // eor z3.d, z3.d, z12.d                       
    WORD $0x8590404b // ldr z11, [x2, #128, MUL VL]                 
    WORD $0x8590444c // ldr z12, [x2, #129, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3084 // eor z4.d, z4.d, z11.d                       
    WORD $0x04ac3084 // eor z4.d, z4.d, z12.d                       
    WORD $0x8590484b // ldr z11, [x2, #130, MUL VL]                 
    WORD $0x85904c4c // ldr z12, [x2, #131, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30a5 // eor z5.d, z5.d, z11.d                       
    WORD $0x04ac30a5 // eor z5.d, z5.d, z12.d                       
    WORD $0x8590504b // ldr z11, [x2, #132, MUL VL]                 
    WORD $0x8590544c // ldr z12, [x2, #133, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30c6 // eor z6.d, z6.d, z11.d                       
    WORD $0x04ac30c6 // eor z6.d, z6.d, z12.d                       
    WORD $0x8590584b // ldr z11, [x2, #134, MUL VL]                 
    WORD $0x85905c4c // ldr z12, [x2, #135, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30e7 // eor z7.d, z7.d, z11.d                       
    WORD $0x04ac30e7 // eor z7.d, z7.d, z12.d                       
    WORD $0x8591404b // ldr z11, [x2, #136, MUL VL]                 
    WORD $0x8591444c // ldr z12, [x2, #137, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3108 // eor z8.d, z8.d, z11.d                       
    WORD $0x04ac3108 // eor z8.d, z8.d, z12.d                       
    WORD $0x8591484b // ldr z11, [x2, #138, MUL VL]                 
    WORD $0x85914c4c // ldr z12, [x2, #139, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3129 // eor z9.d, z9.d, z11.d                       
    WORD $0x04ac3129 // eor z9.d, z9.d, z12.d                       
    // Check for early termination
    CMP    $7, R16
    BEQ    mulSve_10x10_store

    // Load and process 32 bytes from input 7 to 10 outputs
    WORD $0x8580418d // ldr z13, [x12]                              
    WORD $0x042c502c // addvl x12, x12, #1
    WORD $0x04fc95ae // lsr z14.d, z13.d, #4                        
    WORD $0x042a31ad // and z13.d, z13.d, z10.d                     
    WORD $0x042a31ce // and z14.d, z14.d, z10.d                     
    WORD $0x8591504b // ldr z11, [x2, #140, MUL VL]                 
    WORD $0x8591544c // ldr z12, [x2, #141, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3000 // eor z0.d, z0.d, z11.d                       
    WORD $0x04ac3000 // eor z0.d, z0.d, z12.d                       
    WORD $0x8591584b // ldr z11, [x2, #142, MUL VL]                 
    WORD $0x85915c4c // ldr z12, [x2, #143, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3021 // eor z1.d, z1.d, z11.d                       
    WORD $0x04ac3021 // eor z1.d, z1.d, z12.d                       
    WORD $0x8592404b // ldr z11, [x2, #144, MUL VL]                 
    WORD $0x8592444c // ldr z12, [x2, #145, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3042 // eor z2.d, z2.d, z11.d                       
    WORD $0x04ac3042 // eor z2.d, z2.d, z12.d                       
    WORD $0x8592484b // ldr z11, [x2, #146, MUL VL]                 
    WORD $0x85924c4c // ldr z12, [x2, #147, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3063 // eor z3.d, z3.d, z11.d                       
    WORD $0x04ac3063 // eor z3.d, z3.d, z12.d                       
    WORD $0x8592504b // ldr z11, [x2, #148, MUL VL]                 
    WORD $0x8592544c // ldr z12, [x2, #149, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3084 // eor z4.d, z4.d, z11.d                       
    WORD $0x04ac3084 // eor z4.d, z4.d, z12.d                       
    WORD $0x8592584b // ldr z11, [x2, #150, MUL VL]                 
    WORD $0x85925c4c // ldr z12, [x2, #151, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30a5 // eor z5.d, z5.d, z11.d                       
    WORD $0x04ac30a5 // eor z5.d, z5.d, z12.d                       
    WORD $0x8593404b // ldr z11, [x2, #152, MUL VL]                 
    WORD $0x8593444c // ldr z12, [x2, #153, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30c6 // eor z6.d, z6.d, z11.d                       
    WORD $0x04ac30c6 // eor z6.d, z6.d, z12.d                       
    WORD $0x8593484b // ldr z11, [x2, #154, MUL VL]                 
    WORD $0x85934c4c // ldr z12, [x2, #155, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30e7 // eor z7.d, z7.d, z11.d                       
    WORD $0x04ac30e7 // eor z7.d, z7.d, z12.d                       
    WORD $0x8593504b // ldr z11, [x2, #156, MUL VL]                 
    WORD $0x8593544c // ldr z12, [x2, #157, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3108 // eor z8.d, z8.d, z11.d                       
    WORD $0x04ac3108 // eor z8.d, z8.d, z12.d                       
    WORD $0x8593584b // ldr z11, [x2, #158, MUL VL]                 
    WORD $0x85935c4c // ldr z12, [x2, #159, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3129 // eor z9.d, z9.d, z11.d                       
    WORD $0x04ac3129 // eor z9.d, z9.d, z12.d                       
    // Check for early termination
    CMP    $8, R16
    BEQ    mulSve_10x10_store

    // Load and process 32 bytes from input 8 to 10 outputs
    WORD $0x858041ad // ldr z13, [x13]                              
    WORD $0x042d502d // addvl x13, x13, #1
    WORD $0x04fc95ae // lsr z14.d, z13.d, #4                        
    WORD $0x042a31ad // and z13.d, z13.d, z10.d                     
    WORD $0x042a31ce // and z14.d, z14.d, z10.d                     
    WORD $0x8594404b // ldr z11, [x2, #160, MUL VL]                 
    WORD $0x8594444c // ldr z12, [x2, #161, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3000 // eor z0.d, z0.d, z11.d                       
    WORD $0x04ac3000 // eor z0.d, z0.d, z12.d                       
    WORD $0x8594484b // ldr z11, [x2, #162, MUL VL]                 
    WORD $0x85944c4c // ldr z12, [x2, #163, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3021 // eor z1.d, z1.d, z11.d                       
    WORD $0x04ac3021 // eor z1.d, z1.d, z12.d                       
    WORD $0x8594504b // ldr z11, [x2, #164, MUL VL]                 
    WORD $0x8594544c // ldr z12, [x2, #165, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3042 // eor z2.d, z2.d, z11.d                       
    WORD $0x04ac3042 // eor z2.d, z2.d, z12.d                       
    WORD $0x8594584b // ldr z11, [x2, #166, MUL VL]                 
    WORD $0x85945c4c // ldr z12, [x2, #167, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3063 // eor z3.d, z3.d, z11.d                       
    WORD $0x04ac3063 // eor z3.d, z3.d, z12.d                       
    WORD $0x8595404b // ldr z11, [x2, #168, MUL VL]                 
    WORD $0x8595444c // ldr z12, [x2, #169, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3084 // eor z4.d, z4.d, z11.d                       
    WORD $0x04ac3084 // eor z4.d, z4.d, z12.d                       
    WORD $0x8595484b // ldr z11, [x2, #170, MUL VL]                 
    WORD $0x85954c4c // ldr z12, [x2, #171, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30a5 // eor z5.d, z5.d, z11.d                       
    WORD $0x04ac30a5 // eor z5.d, z5.d, z12.d                       
    WORD $0x8595504b // ldr z11, [x2, #172, MUL VL]                 
    WORD $0x8595544c // ldr z12, [x2, #173, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30c6 // eor z6.d, z6.d, z11.d                       
    WORD $0x04ac30c6 // eor z6.d, z6.d, z12.d                       
    WORD $0x8595584b // ldr z11, [x2, #174, MUL VL]                 
    WORD $0x85955c4c // ldr z12, [x2, #175, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30e7 // eor z7.d, z7.d, z11.d                       
    WORD $0x04ac30e7 // eor z7.d, z7.d, z12.d                       
    WORD $0x8596404b // ldr z11, [x2, #176, MUL VL]                 
    WORD $0x8596444c // ldr z12, [x2, #177, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3108 // eor z8.d, z8.d, z11.d                       
    WORD $0x04ac3108 // eor z8.d, z8.d, z12.d                       
    WORD $0x8596484b // ldr z11, [x2, #178, MUL VL]                 
    WORD $0x85964c4c // ldr z12, [x2, #179, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3129 // eor z9.d, z9.d, z11.d                       
    WORD $0x04ac3129 // eor z9.d, z9.d, z12.d                       
    // Check for early termination
    CMP    $9, R16
    BEQ    mulSve_10x10_store

    // Load and process 32 bytes from input 9 to 10 outputs
    WORD $0x8580406d // ldr z13, [x3]                               
    WORD $0x04235023 // addvl x3, x3, #1
    WORD $0x04fc95ae // lsr z14.d, z13.d, #4                        
    WORD $0x042a31ad // and z13.d, z13.d, z10.d                     
    WORD $0x042a31ce // and z14.d, z14.d, z10.d                     
    WORD $0x8596504b // ldr z11, [x2, #180, MUL VL]                 
    WORD $0x8596544c // ldr z12, [x2, #181, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3000 // eor z0.d, z0.d, z11.d                       
    WORD $0x04ac3000 // eor z0.d, z0.d, z12.d                       
    WORD $0x8596584b // ldr z11, [x2, #182, MUL VL]                 
    WORD $0x85965c4c // ldr z12, [x2, #183, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3021 // eor z1.d, z1.d, z11.d                       
    WORD $0x04ac3021 // eor z1.d, z1.d, z12.d                       
    WORD $0x8597404b // ldr z11, [x2, #184, MUL VL]                 
    WORD $0x8597444c // ldr z12, [x2, #185, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3042 // eor z2.d, z2.d, z11.d                       
    WORD $0x04ac3042 // eor z2.d, z2.d, z12.d                       
    WORD $0x8597484b // ldr z11, [x2, #186, MUL VL]                 
    WORD $0x85974c4c // ldr z12, [x2, #187, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3063 // eor z3.d, z3.d, z11.d                       
    WORD $0x04ac3063 // eor z3.d, z3.d, z12.d                       
    WORD $0x8597504b // ldr z11, [x2, #188, MUL VL]                 
    WORD $0x8597544c // ldr z12, [x2, #189, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3084 // eor z4.d, z4.d, z11.d                       
    WORD $0x04ac3084 // eor z4.d, z4.d, z12.d                       
    WORD $0x8597584b // ldr z11, [x2, #190, MUL VL]                 
    WORD $0x85975c4c // ldr z12, [x2, #191, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30a5 // eor z5.d, z5.d, z11.d                       
    WORD $0x04ac30a5 // eor z5.d, z5.d, z12.d                       
    WORD $0x8598404b // ldr z11, [x2, #192, MUL VL]                 
    WORD $0x8598444c // ldr z12, [x2, #193, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30c6 // eor z6.d, z6.d, z11.d                       
    WORD $0x04ac30c6 // eor z6.d, z6.d, z12.d                       
    WORD $0x8598484b // ldr z11, [x2, #194, MUL VL]                 
    WORD $0x85984c4c // ldr z12, [x2, #195, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30e7 // eor z7.d, z7.d, z11.d                       
    WORD $0x04ac30e7 // eor z7.d, z7.d, z12.d                       
    WORD $0x8598504b // ldr z11, [x2, #196, MUL VL]                 
    WORD $0x8598544c // ldr z12, [x2, #197, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3108 // eor z8.d, z8.d, z11.d                       
    WORD $0x04ac3108 // eor z8.d, z8.d, z12.d                       
    WORD $0x8598584b // ldr z11, [x2, #198, MUL VL]                 
    WORD $0x85985c4c // ldr z12, [x2, #199, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3129 // eor z9.d, z9.d, z11.d                       
    WORD $0x04ac3129 // eor z9.d, z9.d, z12.d                       

mulSve_10x10_store:
    // Store 10 outputs
    MOVD (R14), R6
    WORD $0xe5ef40c0 // st1d { z0.d }, p0, [x6, x15, lsl #3]        
    MOVD 24(R14), R6
    WORD $0xe5ef40c1 // st1d { z1.d }, p0, [x6, x15, lsl #3]        
    MOVD 48(R14), R6
    WORD $0xe5ef40c2 // st1d { z2.d }, p0, [x6, x15, lsl #3]        
    MOVD 72(R14), R6
    WORD $0xe5ef40c3 // st1d { z3.d }, p0, [x6, x15, lsl #3]        
    MOVD 96(R14), R6
    WORD $0xe5ef40c4 // st1d { z4.d }, p0, [x6, x15, lsl #3]        
    MOVD 120(R14), R6
    WORD $0xe5ef40c5 // st1d { z5.d }, p0, [x6, x15, lsl #3]        
    MOVD 144(R14), R6
    WORD $0xe5ef40c6 // st1d { z6.d }, p0, [x6, x15, lsl #3]        
    MOVD 168(R14), R6
    WORD $0xe5ef40c7 // st1d { z7.d }, p0, [x6, x15, lsl #3]        
    MOVD 192(R14), R6
    WORD $0xe5ef40c8 // st1d { z8.d }, p0, [x6, x15, lsl #3]        
    MOVD 216(R14), R6
    WORD $0xe5ef40c9 // st1d { z9.d }, p0, [x6, x15, lsl #3]        

    // Prepare for next loop
    WORD $0x8b1101ef // add x15, x15, x17
    WORD $0xf1000400 // subs x0, x0, #1                             
    BNE  mulSve_10x10_loop

mulSve_10x10_end:
    RET

// func mulSve_10x10Xor(matrix []byte, in [][]byte, out [][]byte, start int, n int)
// Requires: SVE
TEXT Â·mulSve_10x10Xor(SB), NOSPLIT, $8-88
    WORD $0x25d8e3e0 // ptrue p0.d
    // Loading no tables to registers
    // Destination kept on stack
    // Full registers estimated 215 YMM used
    MOVD n+80(FP), R0
    MOVD matrix_base+0(FP), R2
    WORD $0xd345fc00 // lsr x0, x0, #5                              
    WORD $0xd37be800 // lsl x0, x0, #5
    WORD $0x04bf5030 // rdvl x16, #1
    WORD $0x9ad00800 // udiv x0, x0, x16
    WORD $0xea00001f // tst x0, x0                                  
    BEQ    mulSve_10x10Xor_end
    MOVD in_base+24(FP), R3
    MOVD (R3), R1
    MOVD 24(R3), R4
    MOVD 48(R3), R5
    MOVD 72(R3), R8
    MOVD 96(R3), R9
    MOVD 120(R3), R10
    MOVD 144(R3), R11
    MOVD 168(R3), R12
    MOVD 192(R3), R13
    MOVD 216(R3), R3
    MOVD out_base+48(FP), R14
    MOVD start+72(FP), R15

    // Add start offset to input
    WORD $0x8b0f0021 // add x1, x1, x15                             
    WORD $0x8b0f0084 // add x4, x4, x15                             
    WORD $0x8b0f00a5 // add x5, x5, x15                             
    WORD $0x8b0f0108 // add x8, x8, x15                             
    WORD $0x8b0f0129 // add x9, x9, x15                             
    WORD $0x8b0f014a // add x10, x10, x15                           
    WORD $0x8b0f016b // add x11, x11, x15                           
    WORD $0x8b0f018c // add x12, x12, x15                           
    WORD $0x8b0f01ad // add x13, x13, x15                           
    WORD $0x8b0f0063 // add x3, x3, x15                             
    WORD $0xd343fdef // lsr x15, x15, #3                            
    WORD $0xd28001e6 // mov x6, #15                                 
    WORD $0x05e038ca // mov z10.d, x6                               
    WORD $0x0521214a // dup z10.b, z10.b[0]                         

    // Load number of input shards
    MOVD   in_len+32(FP), R16
    WORD $0x04bf5031 // rdvl x17, #1
    WORD $0xd343fe31 // lsr  x17, x17, #3

mulSve_10x10Xor_loop:
    // Load and process 32 bytes from input 0 to 10 outputs
    WORD $0x8580402d // ldr z13, [x1]                               
    WORD $0x04215021 // addvl x1, x1, #1
    WORD $0x04fc95ae // lsr z14.d, z13.d, #4                        
    WORD $0x042a31ad // and z13.d, z13.d, z10.d                     
    WORD $0x042a31ce // and z14.d, z14.d, z10.d                     
    MOVD (R14), R6
    WORD $0xa5ef40c0 // ld1d { z0.d }, p0/z, [x6, x15, lsl #3]      
    WORD $0x8580404b // ldr z11, [x2]                               
    WORD $0x8580444c // ldr z12, [x2, #1, MUL VL]                   
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3000 // eor z0.d, z0.d, z11.d                       
    WORD $0x04ac3000 // eor z0.d, z0.d, z12.d                       
    MOVD 24(R14), R6
    WORD $0xa5ef40c1 // ld1d { z1.d }, p0/z, [x6, x15, lsl #3]      
    WORD $0x8580484b // ldr z11, [x2, #2, MUL VL]                   
    WORD $0x85804c4c // ldr z12, [x2, #3, MUL VL]                   
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3021 // eor z1.d, z1.d, z11.d                       
    WORD $0x04ac3021 // eor z1.d, z1.d, z12.d                       
    MOVD 48(R14), R6
    WORD $0xa5ef40c2 // ld1d { z2.d }, p0/z, [x6, x15, lsl #3]      
    WORD $0x8580504b // ldr z11, [x2, #4, MUL VL]                   
    WORD $0x8580544c // ldr z12, [x2, #5, MUL VL]                   
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3042 // eor z2.d, z2.d, z11.d                       
    WORD $0x04ac3042 // eor z2.d, z2.d, z12.d                       
    MOVD 72(R14), R6
    WORD $0xa5ef40c3 // ld1d { z3.d }, p0/z, [x6, x15, lsl #3]      
    WORD $0x8580584b // ldr z11, [x2, #6, MUL VL]                   
    WORD $0x85805c4c // ldr z12, [x2, #7, MUL VL]                   
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3063 // eor z3.d, z3.d, z11.d                       
    WORD $0x04ac3063 // eor z3.d, z3.d, z12.d                       
    MOVD 96(R14), R6
    WORD $0xa5ef40c4 // ld1d { z4.d }, p0/z, [x6, x15, lsl #3]      
    WORD $0x8581404b // ldr z11, [x2, #8, MUL VL]                   
    WORD $0x8581444c // ldr z12, [x2, #9, MUL VL]                   
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3084 // eor z4.d, z4.d, z11.d                       
    WORD $0x04ac3084 // eor z4.d, z4.d, z12.d                       
    MOVD 120(R14), R6
    WORD $0xa5ef40c5 // ld1d { z5.d }, p0/z, [x6, x15, lsl #3]      
    WORD $0x8581484b // ldr z11, [x2, #10, MUL VL]                  
    WORD $0x85814c4c // ldr z12, [x2, #11, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30a5 // eor z5.d, z5.d, z11.d                       
    WORD $0x04ac30a5 // eor z5.d, z5.d, z12.d                       
    MOVD 144(R14), R6
    WORD $0xa5ef40c6 // ld1d { z6.d }, p0/z, [x6, x15, lsl #3]      
    WORD $0x8581504b // ldr z11, [x2, #12, MUL VL]                  
    WORD $0x8581544c // ldr z12, [x2, #13, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30c6 // eor z6.d, z6.d, z11.d                       
    WORD $0x04ac30c6 // eor z6.d, z6.d, z12.d                       
    MOVD 168(R14), R6
    WORD $0xa5ef40c7 // ld1d { z7.d }, p0/z, [x6, x15, lsl #3]      
    WORD $0x8581584b // ldr z11, [x2, #14, MUL VL]                  
    WORD $0x85815c4c // ldr z12, [x2, #15, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30e7 // eor z7.d, z7.d, z11.d                       
    WORD $0x04ac30e7 // eor z7.d, z7.d, z12.d                       
    MOVD 192(R14), R6
    WORD $0xa5ef40c8 // ld1d { z8.d }, p0/z, [x6, x15, lsl #3]      
    WORD $0x8582404b // ldr z11, [x2, #16, MUL VL]                  
    WORD $0x8582444c // ldr z12, [x2, #17, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3108 // eor z8.d, z8.d, z11.d                       
    WORD $0x04ac3108 // eor z8.d, z8.d, z12.d                       
    MOVD 216(R14), R6
    WORD $0xa5ef40c9 // ld1d { z9.d }, p0/z, [x6, x15, lsl #3]      
    WORD $0x8582484b // ldr z11, [x2, #18, MUL VL]                  
    WORD $0x85824c4c // ldr z12, [x2, #19, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3129 // eor z9.d, z9.d, z11.d                       
    WORD $0x04ac3129 // eor z9.d, z9.d, z12.d                       
    // Check for early termination
    CMP    $1, R16
    BEQ    mulSve_10x10Xor_store

    // Load and process 32 bytes from input 1 to 10 outputs
    WORD $0x8580408d // ldr z13, [x4]                               
    WORD $0x04245024 // addvl x4, x4, #1
    WORD $0x04fc95ae // lsr z14.d, z13.d, #4                        
    WORD $0x042a31ad // and z13.d, z13.d, z10.d                     
    WORD $0x042a31ce // and z14.d, z14.d, z10.d                     
    WORD $0x8582504b // ldr z11, [x2, #20, MUL VL]                  
    WORD $0x8582544c // ldr z12, [x2, #21, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3000 // eor z0.d, z0.d, z11.d                       
    WORD $0x04ac3000 // eor z0.d, z0.d, z12.d                       
    WORD $0x8582584b // ldr z11, [x2, #22, MUL VL]                  
    WORD $0x85825c4c // ldr z12, [x2, #23, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3021 // eor z1.d, z1.d, z11.d                       
    WORD $0x04ac3021 // eor z1.d, z1.d, z12.d                       
    WORD $0x8583404b // ldr z11, [x2, #24, MUL VL]                  
    WORD $0x8583444c // ldr z12, [x2, #25, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3042 // eor z2.d, z2.d, z11.d                       
    WORD $0x04ac3042 // eor z2.d, z2.d, z12.d                       
    WORD $0x8583484b // ldr z11, [x2, #26, MUL VL]                  
    WORD $0x85834c4c // ldr z12, [x2, #27, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3063 // eor z3.d, z3.d, z11.d                       
    WORD $0x04ac3063 // eor z3.d, z3.d, z12.d                       
    WORD $0x8583504b // ldr z11, [x2, #28, MUL VL]                  
    WORD $0x8583544c // ldr z12, [x2, #29, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3084 // eor z4.d, z4.d, z11.d                       
    WORD $0x04ac3084 // eor z4.d, z4.d, z12.d                       
    WORD $0x8583584b // ldr z11, [x2, #30, MUL VL]                  
    WORD $0x85835c4c // ldr z12, [x2, #31, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30a5 // eor z5.d, z5.d, z11.d                       
    WORD $0x04ac30a5 // eor z5.d, z5.d, z12.d                       
    WORD $0x8584404b // ldr z11, [x2, #32, MUL VL]                  
    WORD $0x8584444c // ldr z12, [x2, #33, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30c6 // eor z6.d, z6.d, z11.d                       
    WORD $0x04ac30c6 // eor z6.d, z6.d, z12.d                       
    WORD $0x8584484b // ldr z11, [x2, #34, MUL VL]                  
    WORD $0x85844c4c // ldr z12, [x2, #35, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30e7 // eor z7.d, z7.d, z11.d                       
    WORD $0x04ac30e7 // eor z7.d, z7.d, z12.d                       
    WORD $0x8584504b // ldr z11, [x2, #36, MUL VL]                  
    WORD $0x8584544c // ldr z12, [x2, #37, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3108 // eor z8.d, z8.d, z11.d                       
    WORD $0x04ac3108 // eor z8.d, z8.d, z12.d                       
    WORD $0x8584584b // ldr z11, [x2, #38, MUL VL]                  
    WORD $0x85845c4c // ldr z12, [x2, #39, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3129 // eor z9.d, z9.d, z11.d                       
    WORD $0x04ac3129 // eor z9.d, z9.d, z12.d                       
    // Check for early termination
    CMP    $2, R16
    BEQ    mulSve_10x10Xor_store

    // Load and process 32 bytes from input 2 to 10 outputs
    WORD $0x858040ad // ldr z13, [x5]                               
    WORD $0x04255025 // addvl x5, x5, #1
    WORD $0x04fc95ae // lsr z14.d, z13.d, #4                        
    WORD $0x042a31ad // and z13.d, z13.d, z10.d                     
    WORD $0x042a31ce // and z14.d, z14.d, z10.d                     
    WORD $0x8585404b // ldr z11, [x2, #40, MUL VL]                  
    WORD $0x8585444c // ldr z12, [x2, #41, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3000 // eor z0.d, z0.d, z11.d                       
    WORD $0x04ac3000 // eor z0.d, z0.d, z12.d                       
    WORD $0x8585484b // ldr z11, [x2, #42, MUL VL]                  
    WORD $0x85854c4c // ldr z12, [x2, #43, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3021 // eor z1.d, z1.d, z11.d                       
    WORD $0x04ac3021 // eor z1.d, z1.d, z12.d                       
    WORD $0x8585504b // ldr z11, [x2, #44, MUL VL]                  
    WORD $0x8585544c // ldr z12, [x2, #45, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3042 // eor z2.d, z2.d, z11.d                       
    WORD $0x04ac3042 // eor z2.d, z2.d, z12.d                       
    WORD $0x8585584b // ldr z11, [x2, #46, MUL VL]                  
    WORD $0x85855c4c // ldr z12, [x2, #47, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3063 // eor z3.d, z3.d, z11.d                       
    WORD $0x04ac3063 // eor z3.d, z3.d, z12.d                       
    WORD $0x8586404b // ldr z11, [x2, #48, MUL VL]                  
    WORD $0x8586444c // ldr z12, [x2, #49, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3084 // eor z4.d, z4.d, z11.d                       
    WORD $0x04ac3084 // eor z4.d, z4.d, z12.d                       
    WORD $0x8586484b // ldr z11, [x2, #50, MUL VL]                  
    WORD $0x85864c4c // ldr z12, [x2, #51, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30a5 // eor z5.d, z5.d, z11.d                       
    WORD $0x04ac30a5 // eor z5.d, z5.d, z12.d                       
    WORD $0x8586504b // ldr z11, [x2, #52, MUL VL]                  
    WORD $0x8586544c // ldr z12, [x2, #53, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30c6 // eor z6.d, z6.d, z11.d                       
    WORD $0x04ac30c6 // eor z6.d, z6.d, z12.d                       
    WORD $0x8586584b // ldr z11, [x2, #54, MUL VL]                  
    WORD $0x85865c4c // ldr z12, [x2, #55, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30e7 // eor z7.d, z7.d, z11.d                       
    WORD $0x04ac30e7 // eor z7.d, z7.d, z12.d                       
    WORD $0x8587404b // ldr z11, [x2, #56, MUL VL]                  
    WORD $0x8587444c // ldr z12, [x2, #57, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3108 // eor z8.d, z8.d, z11.d                       
    WORD $0x04ac3108 // eor z8.d, z8.d, z12.d                       
    WORD $0x8587484b // ldr z11, [x2, #58, MUL VL]                  
    WORD $0x85874c4c // ldr z12, [x2, #59, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3129 // eor z9.d, z9.d, z11.d                       
    WORD $0x04ac3129 // eor z9.d, z9.d, z12.d                       
    // Check for early termination
    CMP    $3, R16
    BEQ    mulSve_10x10Xor_store

    // Load and process 32 bytes from input 3 to 10 outputs
    WORD $0x8580410d // ldr z13, [x8]                               
    WORD $0x04285028 // addvl x8, x8, #1
    WORD $0x04fc95ae // lsr z14.d, z13.d, #4                        
    WORD $0x042a31ad // and z13.d, z13.d, z10.d                     
    WORD $0x042a31ce // and z14.d, z14.d, z10.d                     
    WORD $0x8587504b // ldr z11, [x2, #60, MUL VL]                  
    WORD $0x8587544c // ldr z12, [x2, #61, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3000 // eor z0.d, z0.d, z11.d                       
    WORD $0x04ac3000 // eor z0.d, z0.d, z12.d                       
    WORD $0x8587584b // ldr z11, [x2, #62, MUL VL]                  
    WORD $0x85875c4c // ldr z12, [x2, #63, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3021 // eor z1.d, z1.d, z11.d                       
    WORD $0x04ac3021 // eor z1.d, z1.d, z12.d                       
    WORD $0x8588404b // ldr z11, [x2, #64, MUL VL]                  
    WORD $0x8588444c // ldr z12, [x2, #65, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3042 // eor z2.d, z2.d, z11.d                       
    WORD $0x04ac3042 // eor z2.d, z2.d, z12.d                       
    WORD $0x8588484b // ldr z11, [x2, #66, MUL VL]                  
    WORD $0x85884c4c // ldr z12, [x2, #67, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3063 // eor z3.d, z3.d, z11.d                       
    WORD $0x04ac3063 // eor z3.d, z3.d, z12.d                       
    WORD $0x8588504b // ldr z11, [x2, #68, MUL VL]                  
    WORD $0x8588544c // ldr z12, [x2, #69, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3084 // eor z4.d, z4.d, z11.d                       
    WORD $0x04ac3084 // eor z4.d, z4.d, z12.d                       
    WORD $0x8588584b // ldr z11, [x2, #70, MUL VL]                  
    WORD $0x85885c4c // ldr z12, [x2, #71, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30a5 // eor z5.d, z5.d, z11.d                       
    WORD $0x04ac30a5 // eor z5.d, z5.d, z12.d                       
    WORD $0x8589404b // ldr z11, [x2, #72, MUL VL]                  
    WORD $0x8589444c // ldr z12, [x2, #73, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30c6 // eor z6.d, z6.d, z11.d                       
    WORD $0x04ac30c6 // eor z6.d, z6.d, z12.d                       
    WORD $0x8589484b // ldr z11, [x2, #74, MUL VL]                  
    WORD $0x85894c4c // ldr z12, [x2, #75, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30e7 // eor z7.d, z7.d, z11.d                       
    WORD $0x04ac30e7 // eor z7.d, z7.d, z12.d                       
    WORD $0x8589504b // ldr z11, [x2, #76, MUL VL]                  
    WORD $0x8589544c // ldr z12, [x2, #77, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3108 // eor z8.d, z8.d, z11.d                       
    WORD $0x04ac3108 // eor z8.d, z8.d, z12.d                       
    WORD $0x8589584b // ldr z11, [x2, #78, MUL VL]                  
    WORD $0x85895c4c // ldr z12, [x2, #79, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3129 // eor z9.d, z9.d, z11.d                       
    WORD $0x04ac3129 // eor z9.d, z9.d, z12.d                       
    // Check for early termination
    CMP    $4, R16
    BEQ    mulSve_10x10Xor_store

    // Load and process 32 bytes from input 4 to 10 outputs
    WORD $0x8580412d // ldr z13, [x9]                               
    WORD $0x04295029 // addvl x9, x9, #1
    WORD $0x04fc95ae // lsr z14.d, z13.d, #4                        
    WORD $0x042a31ad // and z13.d, z13.d, z10.d                     
    WORD $0x042a31ce // and z14.d, z14.d, z10.d                     
    WORD $0x858a404b // ldr z11, [x2, #80, MUL VL]                  
    WORD $0x858a444c // ldr z12, [x2, #81, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3000 // eor z0.d, z0.d, z11.d                       
    WORD $0x04ac3000 // eor z0.d, z0.d, z12.d                       
    WORD $0x858a484b // ldr z11, [x2, #82, MUL VL]                  
    WORD $0x858a4c4c // ldr z12, [x2, #83, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3021 // eor z1.d, z1.d, z11.d                       
    WORD $0x04ac3021 // eor z1.d, z1.d, z12.d                       
    WORD $0x858a504b // ldr z11, [x2, #84, MUL VL]                  
    WORD $0x858a544c // ldr z12, [x2, #85, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3042 // eor z2.d, z2.d, z11.d                       
    WORD $0x04ac3042 // eor z2.d, z2.d, z12.d                       
    WORD $0x858a584b // ldr z11, [x2, #86, MUL VL]                  
    WORD $0x858a5c4c // ldr z12, [x2, #87, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3063 // eor z3.d, z3.d, z11.d                       
    WORD $0x04ac3063 // eor z3.d, z3.d, z12.d                       
    WORD $0x858b404b // ldr z11, [x2, #88, MUL VL]                  
    WORD $0x858b444c // ldr z12, [x2, #89, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3084 // eor z4.d, z4.d, z11.d                       
    WORD $0x04ac3084 // eor z4.d, z4.d, z12.d                       
    WORD $0x858b484b // ldr z11, [x2, #90, MUL VL]                  
    WORD $0x858b4c4c // ldr z12, [x2, #91, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30a5 // eor z5.d, z5.d, z11.d                       
    WORD $0x04ac30a5 // eor z5.d, z5.d, z12.d                       
    WORD $0x858b504b // ldr z11, [x2, #92, MUL VL]                  
    WORD $0x858b544c // ldr z12, [x2, #93, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30c6 // eor z6.d, z6.d, z11.d                       
    WORD $0x04ac30c6 // eor z6.d, z6.d, z12.d                       
    WORD $0x858b584b // ldr z11, [x2, #94, MUL VL]                  
    WORD $0x858b5c4c // ldr z12, [x2, #95, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30e7 // eor z7.d, z7.d, z11.d                       
    WORD $0x04ac30e7 // eor z7.d, z7.d, z12.d                       
    WORD $0x858c404b // ldr z11, [x2, #96, MUL VL]                  
    WORD $0x858c444c // ldr z12, [x2, #97, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3108 // eor z8.d, z8.d, z11.d                       
    WORD $0x04ac3108 // eor z8.d, z8.d, z12.d                       
    WORD $0x858c484b // ldr z11, [x2, #98, MUL VL]                  
    WORD $0x858c4c4c // ldr z12, [x2, #99, MUL VL]                  
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3129 // eor z9.d, z9.d, z11.d                       
    WORD $0x04ac3129 // eor z9.d, z9.d, z12.d                       
    // Check for early termination
    CMP    $5, R16
    BEQ    mulSve_10x10Xor_store

    // Load and process 32 bytes from input 5 to 10 outputs
    WORD $0x8580414d // ldr z13, [x10]                              
    WORD $0x042a502a // addvl x10, x10, #1
    WORD $0x04fc95ae // lsr z14.d, z13.d, #4                        
    WORD $0x042a31ad // and z13.d, z13.d, z10.d                     
    WORD $0x042a31ce // and z14.d, z14.d, z10.d                     
    WORD $0x858c504b // ldr z11, [x2, #100, MUL VL]                 
    WORD $0x858c544c // ldr z12, [x2, #101, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3000 // eor z0.d, z0.d, z11.d                       
    WORD $0x04ac3000 // eor z0.d, z0.d, z12.d                       
    WORD $0x858c584b // ldr z11, [x2, #102, MUL VL]                 
    WORD $0x858c5c4c // ldr z12, [x2, #103, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3021 // eor z1.d, z1.d, z11.d                       
    WORD $0x04ac3021 // eor z1.d, z1.d, z12.d                       
    WORD $0x858d404b // ldr z11, [x2, #104, MUL VL]                 
    WORD $0x858d444c // ldr z12, [x2, #105, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3042 // eor z2.d, z2.d, z11.d                       
    WORD $0x04ac3042 // eor z2.d, z2.d, z12.d                       
    WORD $0x858d484b // ldr z11, [x2, #106, MUL VL]                 
    WORD $0x858d4c4c // ldr z12, [x2, #107, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3063 // eor z3.d, z3.d, z11.d                       
    WORD $0x04ac3063 // eor z3.d, z3.d, z12.d                       
    WORD $0x858d504b // ldr z11, [x2, #108, MUL VL]                 
    WORD $0x858d544c // ldr z12, [x2, #109, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3084 // eor z4.d, z4.d, z11.d                       
    WORD $0x04ac3084 // eor z4.d, z4.d, z12.d                       
    WORD $0x858d584b // ldr z11, [x2, #110, MUL VL]                 
    WORD $0x858d5c4c // ldr z12, [x2, #111, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30a5 // eor z5.d, z5.d, z11.d                       
    WORD $0x04ac30a5 // eor z5.d, z5.d, z12.d                       
    WORD $0x858e404b // ldr z11, [x2, #112, MUL VL]                 
    WORD $0x858e444c // ldr z12, [x2, #113, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30c6 // eor z6.d, z6.d, z11.d                       
    WORD $0x04ac30c6 // eor z6.d, z6.d, z12.d                       
    WORD $0x858e484b // ldr z11, [x2, #114, MUL VL]                 
    WORD $0x858e4c4c // ldr z12, [x2, #115, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30e7 // eor z7.d, z7.d, z11.d                       
    WORD $0x04ac30e7 // eor z7.d, z7.d, z12.d                       
    WORD $0x858e504b // ldr z11, [x2, #116, MUL VL]                 
    WORD $0x858e544c // ldr z12, [x2, #117, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3108 // eor z8.d, z8.d, z11.d                       
    WORD $0x04ac3108 // eor z8.d, z8.d, z12.d                       
    WORD $0x858e584b // ldr z11, [x2, #118, MUL VL]                 
    WORD $0x858e5c4c // ldr z12, [x2, #119, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3129 // eor z9.d, z9.d, z11.d                       
    WORD $0x04ac3129 // eor z9.d, z9.d, z12.d                       
    // Check for early termination
    CMP    $6, R16
    BEQ    mulSve_10x10Xor_store

    // Load and process 32 bytes from input 6 to 10 outputs
    WORD $0x8580416d // ldr z13, [x11]                              
    WORD $0x042b502b // addvl x11, x11, #1
    WORD $0x04fc95ae // lsr z14.d, z13.d, #4                        
    WORD $0x042a31ad // and z13.d, z13.d, z10.d                     
    WORD $0x042a31ce // and z14.d, z14.d, z10.d                     
    WORD $0x858f404b // ldr z11, [x2, #120, MUL VL]                 
    WORD $0x858f444c // ldr z12, [x2, #121, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3000 // eor z0.d, z0.d, z11.d                       
    WORD $0x04ac3000 // eor z0.d, z0.d, z12.d                       
    WORD $0x858f484b // ldr z11, [x2, #122, MUL VL]                 
    WORD $0x858f4c4c // ldr z12, [x2, #123, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3021 // eor z1.d, z1.d, z11.d                       
    WORD $0x04ac3021 // eor z1.d, z1.d, z12.d                       
    WORD $0x858f504b // ldr z11, [x2, #124, MUL VL]                 
    WORD $0x858f544c // ldr z12, [x2, #125, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3042 // eor z2.d, z2.d, z11.d                       
    WORD $0x04ac3042 // eor z2.d, z2.d, z12.d                       
    WORD $0x858f584b // ldr z11, [x2, #126, MUL VL]                 
    WORD $0x858f5c4c // ldr z12, [x2, #127, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3063 // eor z3.d, z3.d, z11.d                       
    WORD $0x04ac3063 // eor z3.d, z3.d, z12.d                       
    WORD $0x8590404b // ldr z11, [x2, #128, MUL VL]                 
    WORD $0x8590444c // ldr z12, [x2, #129, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3084 // eor z4.d, z4.d, z11.d                       
    WORD $0x04ac3084 // eor z4.d, z4.d, z12.d                       
    WORD $0x8590484b // ldr z11, [x2, #130, MUL VL]                 
    WORD $0x85904c4c // ldr z12, [x2, #131, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30a5 // eor z5.d, z5.d, z11.d                       
    WORD $0x04ac30a5 // eor z5.d, z5.d, z12.d                       
    WORD $0x8590504b // ldr z11, [x2, #132, MUL VL]                 
    WORD $0x8590544c // ldr z12, [x2, #133, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30c6 // eor z6.d, z6.d, z11.d                       
    WORD $0x04ac30c6 // eor z6.d, z6.d, z12.d                       
    WORD $0x8590584b // ldr z11, [x2, #134, MUL VL]                 
    WORD $0x85905c4c // ldr z12, [x2, #135, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30e7 // eor z7.d, z7.d, z11.d                       
    WORD $0x04ac30e7 // eor z7.d, z7.d, z12.d                       
    WORD $0x8591404b // ldr z11, [x2, #136, MUL VL]                 
    WORD $0x8591444c // ldr z12, [x2, #137, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3108 // eor z8.d, z8.d, z11.d                       
    WORD $0x04ac3108 // eor z8.d, z8.d, z12.d                       
    WORD $0x8591484b // ldr z11, [x2, #138, MUL VL]                 
    WORD $0x85914c4c // ldr z12, [x2, #139, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3129 // eor z9.d, z9.d, z11.d                       
    WORD $0x04ac3129 // eor z9.d, z9.d, z12.d                       
    // Check for early termination
    CMP    $7, R16
    BEQ    mulSve_10x10Xor_store

    // Load and process 32 bytes from input 7 to 10 outputs
    WORD $0x8580418d // ldr z13, [x12]                              
    WORD $0x042c502c // addvl x12, x12, #1
    WORD $0x04fc95ae // lsr z14.d, z13.d, #4                        
    WORD $0x042a31ad // and z13.d, z13.d, z10.d                     
    WORD $0x042a31ce // and z14.d, z14.d, z10.d                     
    WORD $0x8591504b // ldr z11, [x2, #140, MUL VL]                 
    WORD $0x8591544c // ldr z12, [x2, #141, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3000 // eor z0.d, z0.d, z11.d                       
    WORD $0x04ac3000 // eor z0.d, z0.d, z12.d                       
    WORD $0x8591584b // ldr z11, [x2, #142, MUL VL]                 
    WORD $0x85915c4c // ldr z12, [x2, #143, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3021 // eor z1.d, z1.d, z11.d                       
    WORD $0x04ac3021 // eor z1.d, z1.d, z12.d                       
    WORD $0x8592404b // ldr z11, [x2, #144, MUL VL]                 
    WORD $0x8592444c // ldr z12, [x2, #145, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3042 // eor z2.d, z2.d, z11.d                       
    WORD $0x04ac3042 // eor z2.d, z2.d, z12.d                       
    WORD $0x8592484b // ldr z11, [x2, #146, MUL VL]                 
    WORD $0x85924c4c // ldr z12, [x2, #147, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3063 // eor z3.d, z3.d, z11.d                       
    WORD $0x04ac3063 // eor z3.d, z3.d, z12.d                       
    WORD $0x8592504b // ldr z11, [x2, #148, MUL VL]                 
    WORD $0x8592544c // ldr z12, [x2, #149, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3084 // eor z4.d, z4.d, z11.d                       
    WORD $0x04ac3084 // eor z4.d, z4.d, z12.d                       
    WORD $0x8592584b // ldr z11, [x2, #150, MUL VL]                 
    WORD $0x85925c4c // ldr z12, [x2, #151, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30a5 // eor z5.d, z5.d, z11.d                       
    WORD $0x04ac30a5 // eor z5.d, z5.d, z12.d                       
    WORD $0x8593404b // ldr z11, [x2, #152, MUL VL]                 
    WORD $0x8593444c // ldr z12, [x2, #153, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30c6 // eor z6.d, z6.d, z11.d                       
    WORD $0x04ac30c6 // eor z6.d, z6.d, z12.d                       
    WORD $0x8593484b // ldr z11, [x2, #154, MUL VL]                 
    WORD $0x85934c4c // ldr z12, [x2, #155, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30e7 // eor z7.d, z7.d, z11.d                       
    WORD $0x04ac30e7 // eor z7.d, z7.d, z12.d                       
    WORD $0x8593504b // ldr z11, [x2, #156, MUL VL]                 
    WORD $0x8593544c // ldr z12, [x2, #157, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3108 // eor z8.d, z8.d, z11.d                       
    WORD $0x04ac3108 // eor z8.d, z8.d, z12.d                       
    WORD $0x8593584b // ldr z11, [x2, #158, MUL VL]                 
    WORD $0x85935c4c // ldr z12, [x2, #159, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3129 // eor z9.d, z9.d, z11.d                       
    WORD $0x04ac3129 // eor z9.d, z9.d, z12.d                       
    // Check for early termination
    CMP    $8, R16
    BEQ    mulSve_10x10Xor_store

    // Load and process 32 bytes from input 8 to 10 outputs
    WORD $0x858041ad // ldr z13, [x13]                              
    WORD $0x042d502d // addvl x13, x13, #1
    WORD $0x04fc95ae // lsr z14.d, z13.d, #4                        
    WORD $0x042a31ad // and z13.d, z13.d, z10.d                     
    WORD $0x042a31ce // and z14.d, z14.d, z10.d                     
    WORD $0x8594404b // ldr z11, [x2, #160, MUL VL]                 
    WORD $0x8594444c // ldr z12, [x2, #161, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3000 // eor z0.d, z0.d, z11.d                       
    WORD $0x04ac3000 // eor z0.d, z0.d, z12.d                       
    WORD $0x8594484b // ldr z11, [x2, #162, MUL VL]                 
    WORD $0x85944c4c // ldr z12, [x2, #163, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3021 // eor z1.d, z1.d, z11.d                       
    WORD $0x04ac3021 // eor z1.d, z1.d, z12.d                       
    WORD $0x8594504b // ldr z11, [x2, #164, MUL VL]                 
    WORD $0x8594544c // ldr z12, [x2, #165, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3042 // eor z2.d, z2.d, z11.d                       
    WORD $0x04ac3042 // eor z2.d, z2.d, z12.d                       
    WORD $0x8594584b // ldr z11, [x2, #166, MUL VL]                 
    WORD $0x85945c4c // ldr z12, [x2, #167, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3063 // eor z3.d, z3.d, z11.d                       
    WORD $0x04ac3063 // eor z3.d, z3.d, z12.d                       
    WORD $0x8595404b // ldr z11, [x2, #168, MUL VL]                 
    WORD $0x8595444c // ldr z12, [x2, #169, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3084 // eor z4.d, z4.d, z11.d                       
    WORD $0x04ac3084 // eor z4.d, z4.d, z12.d                       
    WORD $0x8595484b // ldr z11, [x2, #170, MUL VL]                 
    WORD $0x85954c4c // ldr z12, [x2, #171, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30a5 // eor z5.d, z5.d, z11.d                       
    WORD $0x04ac30a5 // eor z5.d, z5.d, z12.d                       
    WORD $0x8595504b // ldr z11, [x2, #172, MUL VL]                 
    WORD $0x8595544c // ldr z12, [x2, #173, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30c6 // eor z6.d, z6.d, z11.d                       
    WORD $0x04ac30c6 // eor z6.d, z6.d, z12.d                       
    WORD $0x8595584b // ldr z11, [x2, #174, MUL VL]                 
    WORD $0x85955c4c // ldr z12, [x2, #175, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30e7 // eor z7.d, z7.d, z11.d                       
    WORD $0x04ac30e7 // eor z7.d, z7.d, z12.d                       
    WORD $0x8596404b // ldr z11, [x2, #176, MUL VL]                 
    WORD $0x8596444c // ldr z12, [x2, #177, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3108 // eor z8.d, z8.d, z11.d                       
    WORD $0x04ac3108 // eor z8.d, z8.d, z12.d                       
    WORD $0x8596484b // ldr z11, [x2, #178, MUL VL]                 
    WORD $0x85964c4c // ldr z12, [x2, #179, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3129 // eor z9.d, z9.d, z11.d                       
    WORD $0x04ac3129 // eor z9.d, z9.d, z12.d                       
    // Check for early termination
    CMP    $9, R16
    BEQ    mulSve_10x10Xor_store

    // Load and process 32 bytes from input 9 to 10 outputs
    WORD $0x8580406d // ldr z13, [x3]                               
    WORD $0x04235023 // addvl x3, x3, #1
    WORD $0x04fc95ae // lsr z14.d, z13.d, #4                        
    WORD $0x042a31ad // and z13.d, z13.d, z10.d                     
    WORD $0x042a31ce // and z14.d, z14.d, z10.d                     
    WORD $0x8596504b // ldr z11, [x2, #180, MUL VL]                 
    WORD $0x8596544c // ldr z12, [x2, #181, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3000 // eor z0.d, z0.d, z11.d                       
    WORD $0x04ac3000 // eor z0.d, z0.d, z12.d                       
    WORD $0x8596584b // ldr z11, [x2, #182, MUL VL]                 
    WORD $0x85965c4c // ldr z12, [x2, #183, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3021 // eor z1.d, z1.d, z11.d                       
    WORD $0x04ac3021 // eor z1.d, z1.d, z12.d                       
    WORD $0x8597404b // ldr z11, [x2, #184, MUL VL]                 
    WORD $0x8597444c // ldr z12, [x2, #185, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3042 // eor z2.d, z2.d, z11.d                       
    WORD $0x04ac3042 // eor z2.d, z2.d, z12.d                       
    WORD $0x8597484b // ldr z11, [x2, #186, MUL VL]                 
    WORD $0x85974c4c // ldr z12, [x2, #187, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3063 // eor z3.d, z3.d, z11.d                       
    WORD $0x04ac3063 // eor z3.d, z3.d, z12.d                       
    WORD $0x8597504b // ldr z11, [x2, #188, MUL VL]                 
    WORD $0x8597544c // ldr z12, [x2, #189, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3084 // eor z4.d, z4.d, z11.d                       
    WORD $0x04ac3084 // eor z4.d, z4.d, z12.d                       
    WORD $0x8597584b // ldr z11, [x2, #190, MUL VL]                 
    WORD $0x85975c4c // ldr z12, [x2, #191, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30a5 // eor z5.d, z5.d, z11.d                       
    WORD $0x04ac30a5 // eor z5.d, z5.d, z12.d                       
    WORD $0x8598404b // ldr z11, [x2, #192, MUL VL]                 
    WORD $0x8598444c // ldr z12, [x2, #193, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30c6 // eor z6.d, z6.d, z11.d                       
    WORD $0x04ac30c6 // eor z6.d, z6.d, z12.d                       
    WORD $0x8598484b // ldr z11, [x2, #194, MUL VL]                 
    WORD $0x85984c4c // ldr z12, [x2, #195, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab30e7 // eor z7.d, z7.d, z11.d                       
    WORD $0x04ac30e7 // eor z7.d, z7.d, z12.d                       
    WORD $0x8598504b // ldr z11, [x2, #196, MUL VL]                 
    WORD $0x8598544c // ldr z12, [x2, #197, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3108 // eor z8.d, z8.d, z11.d                       
    WORD $0x04ac3108 // eor z8.d, z8.d, z12.d                       
    WORD $0x8598584b // ldr z11, [x2, #198, MUL VL]                 
    WORD $0x85985c4c // ldr z12, [x2, #199, MUL VL]                 
    WORD $0x052d316b // tbl z11.b, z11.b, z13.b                     
    WORD $0x052e318c // tbl z12.b, z12.b, z14.b                     
    WORD $0x04ab3129 // eor z9.d, z9.d, z11.d                       
    WORD $0x04ac3129 // eor z9.d, z9.d, z12.d                       

mulSve_10x10Xor_store:
    // Store 10 outputs
    MOVD (R14), R6
    WORD $0xe5ef40c0 // st1d { z0.d }, p0, [x6, x15, lsl #3]        
    MOVD 24(R14), R6
    WORD $0xe5ef40c1 // st1d { z1.d }, p0, [x6, x15, lsl #3]        
    MOVD 48(R14), R6
    WORD $0xe5ef40c2 // st1d { z2.d }, p0, [x6, x15, lsl #3]        
    MOVD 72(R14), R6
    WORD $0xe5ef40c3 // st1d { z3.d }, p0, [x6, x15, lsl #3]        
    MOVD 96(R14), R6
    WORD $0xe5ef40c4 // st1d { z4.d }, p0, [x6, x15, lsl #3]        
    MOVD 120(R14), R6
    WORD $0xe5ef40c5 // st1d { z5.d }, p0, [x6, x15, lsl #3]        
    MOVD 144(R14), R6
    WORD $0xe5ef40c6 // st1d { z6.d }, p0, [x6, x15, lsl #3]        
    MOVD 168(R14), R6
    WORD $0xe5ef40c7 // st1d { z7.d }, p0, [x6, x15, lsl #3]        
    MOVD 192(R14), R6
    WORD $0xe5ef40c8 // st1d { z8.d }, p0, [x6, x15, lsl #3]        
    MOVD 216(R14), R6
    WORD $0xe5ef40c9 // st1d { z9.d }, p0, [x6, x15, lsl #3]        

    // Prepare for next loop
    WORD $0x8b1101ef // add x15, x15, x17
    WORD $0xf1000400 // subs x0, x0, #1                             
    BNE  mulSve_10x10Xor_loop

mulSve_10x10Xor_end:
    RET

// func mulNeon_10x1_64(matrix []byte, in [][]byte, out [][]byte, start int, n int)
// Requires: NEON
TEXT Â·mulNeon_10x1_64(SB), $0-88
    // Loading no tables to registers
    // Destination kept in GP registers
    // Full registers estimated 46 YMM used
    MOVD n+80(FP), R0
    LSR  $6, R0
    TST  R0, R0
    BEQ    mulNeon_10x1_64_end
    MOVD in_base+24(FP), R3
    MOVD (R3), R1
    MOVD 24(R3), R4
    MOVD 48(R3), R5
    MOVD 72(R3), R8
    MOVD 96(R3), R9
    MOVD 120(R3), R10
    MOVD 144(R3), R11
    MOVD 168(R3), R12
    MOVD 192(R3), R13
    MOVD 216(R3), R3
    MOVD out_base+48(FP), R14
    MOVD (R14), R14
    MOVD start+72(FP), R15

    // Add start offset to output
    ADD    R15, R14

    // Add start offset to input
    ADD    R15, R1
    ADD    R15, R4
    ADD    R15, R5
    ADD    R15, R8
    ADD    R15, R9
    ADD    R15, R10
    ADD    R15, R11
    ADD    R15, R12
    ADD    R15, R13
    ADD    R15, R3
    MOVD   $15, R15
    VMOV   R15, V4.B[0]
    VDUP   V4.B[0], V4.B16

    // Load number of input shards
    MOVD   in_len+32(FP), R16

mulNeon_10x1_64_loop:
    MOVD matrix_base+0(FP), R2
    // Load and process 64 bytes from input 0 to 1 outputs
    VLD1.P 32(R1), [V12.B16, V13.B16]
    VLD1.P 32(R1), [V10.B16, V11.B16]
    VUSHR  $4, V12.B16, V14.B16
    VUSHR  $4, V13.B16, V15.B16
    VUSHR  $4, V10.B16, V16.B16
    VUSHR  $4, V11.B16, V17.B16
    VAND   V4.B16, V12.B16, V12.B16
    VAND   V4.B16, V13.B16, V13.B16
    VAND   V4.B16, V10.B16, V10.B16
    VAND   V4.B16, V11.B16, V11.B16
    VAND   V4.B16, V14.B16, V14.B16
    VAND   V4.B16, V15.B16, V15.B16
    VAND   V4.B16, V16.B16, V16.B16
    VAND   V4.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V6.B16, V7.B16]
    VLD1.P 32(R2), [V8.B16, V9.B16]
    VTBL   V10.B16, [V6.B16], V10.B16
    VTBL   V11.B16, [V7.B16], V11.B16
    VTBL   V12.B16, [V6.B16], V6.B16
    VTBL   V13.B16, [V7.B16], V7.B16
    VTBL   V16.B16, [V8.B16], V12.B16
    VTBL   V17.B16, [V9.B16], V13.B16
    VTBL   V14.B16, [V8.B16], V8.B16
    VTBL   V15.B16, [V9.B16], V9.B16
    VEOR   V6.B16, V8.B16, V0.B16
    VEOR   V7.B16, V9.B16, V1.B16
    VEOR   V10.B16, V12.B16, V2.B16
    VEOR   V11.B16, V13.B16, V3.B16
    // Check for early termination
    CMP    $1, R16
    BEQ    mulNeon_10x1_64_store

    // Load and process 64 bytes from input 1 to 1 outputs
    VLD1.P 32(R4), [V12.B16, V13.B16]
    VLD1.P 32(R4), [V10.B16, V11.B16]
    VUSHR  $4, V12.B16, V14.B16
    VUSHR  $4, V13.B16, V15.B16
    VUSHR  $4, V10.B16, V16.B16
    VUSHR  $4, V11.B16, V17.B16
    VAND   V4.B16, V12.B16, V12.B16
    VAND   V4.B16, V13.B16, V13.B16
    VAND   V4.B16, V10.B16, V10.B16
    VAND   V4.B16, V11.B16, V11.B16
    VAND   V4.B16, V14.B16, V14.B16
    VAND   V4.B16, V15.B16, V15.B16
    VAND   V4.B16, V16.B16, V16.B16
    VAND   V4.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V6.B16, V7.B16]
    VLD1.P 32(R2), [V8.B16, V9.B16]
    VTBL   V10.B16, [V6.B16], V10.B16
    VTBL   V11.B16, [V7.B16], V11.B16
    VTBL   V12.B16, [V6.B16], V6.B16
    VTBL   V13.B16, [V7.B16], V7.B16
    VTBL   V16.B16, [V8.B16], V12.B16
    VTBL   V17.B16, [V9.B16], V13.B16
    VTBL   V14.B16, [V8.B16], V8.B16
    VTBL   V15.B16, [V9.B16], V9.B16
    VEOR   V6.B16, V0.B16, V0.B16
    VEOR   V7.B16, V1.B16, V1.B16
    VEOR   V8.B16, V0.B16, V0.B16
    VEOR   V9.B16, V1.B16, V1.B16
    VEOR   V10.B16, V2.B16, V2.B16
    VEOR   V11.B16, V3.B16, V3.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    // Check for early termination
    CMP    $2, R16
    BEQ    mulNeon_10x1_64_store

    // Load and process 64 bytes from input 2 to 1 outputs
    VLD1.P 32(R5), [V12.B16, V13.B16]
    VLD1.P 32(R5), [V10.B16, V11.B16]
    VUSHR  $4, V12.B16, V14.B16
    VUSHR  $4, V13.B16, V15.B16
    VUSHR  $4, V10.B16, V16.B16
    VUSHR  $4, V11.B16, V17.B16
    VAND   V4.B16, V12.B16, V12.B16
    VAND   V4.B16, V13.B16, V13.B16
    VAND   V4.B16, V10.B16, V10.B16
    VAND   V4.B16, V11.B16, V11.B16
    VAND   V4.B16, V14.B16, V14.B16
    VAND   V4.B16, V15.B16, V15.B16
    VAND   V4.B16, V16.B16, V16.B16
    VAND   V4.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V6.B16, V7.B16]
    VLD1.P 32(R2), [V8.B16, V9.B16]
    VTBL   V10.B16, [V6.B16], V10.B16
    VTBL   V11.B16, [V7.B16], V11.B16
    VTBL   V12.B16, [V6.B16], V6.B16
    VTBL   V13.B16, [V7.B16], V7.B16
    VTBL   V16.B16, [V8.B16], V12.B16
    VTBL   V17.B16, [V9.B16], V13.B16
    VTBL   V14.B16, [V8.B16], V8.B16
    VTBL   V15.B16, [V9.B16], V9.B16
    VEOR   V6.B16, V0.B16, V0.B16
    VEOR   V7.B16, V1.B16, V1.B16
    VEOR   V8.B16, V0.B16, V0.B16
    VEOR   V9.B16, V1.B16, V1.B16
    VEOR   V10.B16, V2.B16, V2.B16
    VEOR   V11.B16, V3.B16, V3.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    // Check for early termination
    CMP    $3, R16
    BEQ    mulNeon_10x1_64_store

    // Load and process 64 bytes from input 3 to 1 outputs
    VLD1.P 32(R8), [V12.B16, V13.B16]
    VLD1.P 32(R8), [V10.B16, V11.B16]
    VUSHR  $4, V12.B16, V14.B16
    VUSHR  $4, V13.B16, V15.B16
    VUSHR  $4, V10.B16, V16.B16
    VUSHR  $4, V11.B16, V17.B16
    VAND   V4.B16, V12.B16, V12.B16
    VAND   V4.B16, V13.B16, V13.B16
    VAND   V4.B16, V10.B16, V10.B16
    VAND   V4.B16, V11.B16, V11.B16
    VAND   V4.B16, V14.B16, V14.B16
    VAND   V4.B16, V15.B16, V15.B16
    VAND   V4.B16, V16.B16, V16.B16
    VAND   V4.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V6.B16, V7.B16]
    VLD1.P 32(R2), [V8.B16, V9.B16]
    VTBL   V10.B16, [V6.B16], V10.B16
    VTBL   V11.B16, [V7.B16], V11.B16
    VTBL   V12.B16, [V6.B16], V6.B16
    VTBL   V13.B16, [V7.B16], V7.B16
    VTBL   V16.B16, [V8.B16], V12.B16
    VTBL   V17.B16, [V9.B16], V13.B16
    VTBL   V14.B16, [V8.B16], V8.B16
    VTBL   V15.B16, [V9.B16], V9.B16
    VEOR   V6.B16, V0.B16, V0.B16
    VEOR   V7.B16, V1.B16, V1.B16
    VEOR   V8.B16, V0.B16, V0.B16
    VEOR   V9.B16, V1.B16, V1.B16
    VEOR   V10.B16, V2.B16, V2.B16
    VEOR   V11.B16, V3.B16, V3.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    // Check for early termination
    CMP    $4, R16
    BEQ    mulNeon_10x1_64_store

    // Load and process 64 bytes from input 4 to 1 outputs
    VLD1.P 32(R9), [V12.B16, V13.B16]
    VLD1.P 32(R9), [V10.B16, V11.B16]
    VUSHR  $4, V12.B16, V14.B16
    VUSHR  $4, V13.B16, V15.B16
    VUSHR  $4, V10.B16, V16.B16
    VUSHR  $4, V11.B16, V17.B16
    VAND   V4.B16, V12.B16, V12.B16
    VAND   V4.B16, V13.B16, V13.B16
    VAND   V4.B16, V10.B16, V10.B16
    VAND   V4.B16, V11.B16, V11.B16
    VAND   V4.B16, V14.B16, V14.B16
    VAND   V4.B16, V15.B16, V15.B16
    VAND   V4.B16, V16.B16, V16.B16
    VAND   V4.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V6.B16, V7.B16]
    VLD1.P 32(R2), [V8.B16, V9.B16]
    VTBL   V10.B16, [V6.B16], V10.B16
    VTBL   V11.B16, [V7.B16], V11.B16
    VTBL   V12.B16, [V6.B16], V6.B16
    VTBL   V13.B16, [V7.B16], V7.B16
    VTBL   V16.B16, [V8.B16], V12.B16
    VTBL   V17.B16, [V9.B16], V13.B16
    VTBL   V14.B16, [V8.B16], V8.B16
    VTBL   V15.B16, [V9.B16], V9.B16
    VEOR   V6.B16, V0.B16, V0.B16
    VEOR   V7.B16, V1.B16, V1.B16
    VEOR   V8.B16, V0.B16, V0.B16
    VEOR   V9.B16, V1.B16, V1.B16
    VEOR   V10.B16, V2.B16, V2.B16
    VEOR   V11.B16, V3.B16, V3.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    // Check for early termination
    CMP    $5, R16
    BEQ    mulNeon_10x1_64_store

    // Load and process 64 bytes from input 5 to 1 outputs
    VLD1.P 32(R10), [V12.B16, V13.B16]
    VLD1.P 32(R10), [V10.B16, V11.B16]
    VUSHR  $4, V12.B16, V14.B16
    VUSHR  $4, V13.B16, V15.B16
    VUSHR  $4, V10.B16, V16.B16
    VUSHR  $4, V11.B16, V17.B16
    VAND   V4.B16, V12.B16, V12.B16
    VAND   V4.B16, V13.B16, V13.B16
    VAND   V4.B16, V10.B16, V10.B16
    VAND   V4.B16, V11.B16, V11.B16
    VAND   V4.B16, V14.B16, V14.B16
    VAND   V4.B16, V15.B16, V15.B16
    VAND   V4.B16, V16.B16, V16.B16
    VAND   V4.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V6.B16, V7.B16]
    VLD1.P 32(R2), [V8.B16, V9.B16]
    VTBL   V10.B16, [V6.B16], V10.B16
    VTBL   V11.B16, [V7.B16], V11.B16
    VTBL   V12.B16, [V6.B16], V6.B16
    VTBL   V13.B16, [V7.B16], V7.B16
    VTBL   V16.B16, [V8.B16], V12.B16
    VTBL   V17.B16, [V9.B16], V13.B16
    VTBL   V14.B16, [V8.B16], V8.B16
    VTBL   V15.B16, [V9.B16], V9.B16
    VEOR   V6.B16, V0.B16, V0.B16
    VEOR   V7.B16, V1.B16, V1.B16
    VEOR   V8.B16, V0.B16, V0.B16
    VEOR   V9.B16, V1.B16, V1.B16
    VEOR   V10.B16, V2.B16, V2.B16
    VEOR   V11.B16, V3.B16, V3.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    // Check for early termination
    CMP    $6, R16
    BEQ    mulNeon_10x1_64_store

    // Load and process 64 bytes from input 6 to 1 outputs
    VLD1.P 32(R11), [V12.B16, V13.B16]
    VLD1.P 32(R11), [V10.B16, V11.B16]
    VUSHR  $4, V12.B16, V14.B16
    VUSHR  $4, V13.B16, V15.B16
    VUSHR  $4, V10.B16, V16.B16
    VUSHR  $4, V11.B16, V17.B16
    VAND   V4.B16, V12.B16, V12.B16
    VAND   V4.B16, V13.B16, V13.B16
    VAND   V4.B16, V10.B16, V10.B16
    VAND   V4.B16, V11.B16, V11.B16
    VAND   V4.B16, V14.B16, V14.B16
    VAND   V4.B16, V15.B16, V15.B16
    VAND   V4.B16, V16.B16, V16.B16
    VAND   V4.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V6.B16, V7.B16]
    VLD1.P 32(R2), [V8.B16, V9.B16]
    VTBL   V10.B16, [V6.B16], V10.B16
    VTBL   V11.B16, [V7.B16], V11.B16
    VTBL   V12.B16, [V6.B16], V6.B16
    VTBL   V13.B16, [V7.B16], V7.B16
    VTBL   V16.B16, [V8.B16], V12.B16
    VTBL   V17.B16, [V9.B16], V13.B16
    VTBL   V14.B16, [V8.B16], V8.B16
    VTBL   V15.B16, [V9.B16], V9.B16
    VEOR   V6.B16, V0.B16, V0.B16
    VEOR   V7.B16, V1.B16, V1.B16
    VEOR   V8.B16, V0.B16, V0.B16
    VEOR   V9.B16, V1.B16, V1.B16
    VEOR   V10.B16, V2.B16, V2.B16
    VEOR   V11.B16, V3.B16, V3.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    // Check for early termination
    CMP    $7, R16
    BEQ    mulNeon_10x1_64_store

    // Load and process 64 bytes from input 7 to 1 outputs
    VLD1.P 32(R12), [V12.B16, V13.B16]
    VLD1.P 32(R12), [V10.B16, V11.B16]
    VUSHR  $4, V12.B16, V14.B16
    VUSHR  $4, V13.B16, V15.B16
    VUSHR  $4, V10.B16, V16.B16
    VUSHR  $4, V11.B16, V17.B16
    VAND   V4.B16, V12.B16, V12.B16
    VAND   V4.B16, V13.B16, V13.B16
    VAND   V4.B16, V10.B16, V10.B16
    VAND   V4.B16, V11.B16, V11.B16
    VAND   V4.B16, V14.B16, V14.B16
    VAND   V4.B16, V15.B16, V15.B16
    VAND   V4.B16, V16.B16, V16.B16
    VAND   V4.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V6.B16, V7.B16]
    VLD1.P 32(R2), [V8.B16, V9.B16]
    VTBL   V10.B16, [V6.B16], V10.B16
    VTBL   V11.B16, [V7.B16], V11.B16
    VTBL   V12.B16, [V6.B16], V6.B16
    VTBL   V13.B16, [V7.B16], V7.B16
    VTBL   V16.B16, [V8.B16], V12.B16
    VTBL   V17.B16, [V9.B16], V13.B16
    VTBL   V14.B16, [V8.B16], V8.B16
    VTBL   V15.B16, [V9.B16], V9.B16
    VEOR   V6.B16, V0.B16, V0.B16
    VEOR   V7.B16, V1.B16, V1.B16
    VEOR   V8.B16, V0.B16, V0.B16
    VEOR   V9.B16, V1.B16, V1.B16
    VEOR   V10.B16, V2.B16, V2.B16
    VEOR   V11.B16, V3.B16, V3.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    // Check for early termination
    CMP    $8, R16
    BEQ    mulNeon_10x1_64_store

    // Load and process 64 bytes from input 8 to 1 outputs
    VLD1.P 32(R13), [V12.B16, V13.B16]
    VLD1.P 32(R13), [V10.B16, V11.B16]
    VUSHR  $4, V12.B16, V14.B16
    VUSHR  $4, V13.B16, V15.B16
    VUSHR  $4, V10.B16, V16.B16
    VUSHR  $4, V11.B16, V17.B16
    VAND   V4.B16, V12.B16, V12.B16
    VAND   V4.B16, V13.B16, V13.B16
    VAND   V4.B16, V10.B16, V10.B16
    VAND   V4.B16, V11.B16, V11.B16
    VAND   V4.B16, V14.B16, V14.B16
    VAND   V4.B16, V15.B16, V15.B16
    VAND   V4.B16, V16.B16, V16.B16
    VAND   V4.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V6.B16, V7.B16]
    VLD1.P 32(R2), [V8.B16, V9.B16]
    VTBL   V10.B16, [V6.B16], V10.B16
    VTBL   V11.B16, [V7.B16], V11.B16
    VTBL   V12.B16, [V6.B16], V6.B16
    VTBL   V13.B16, [V7.B16], V7.B16
    VTBL   V16.B16, [V8.B16], V12.B16
    VTBL   V17.B16, [V9.B16], V13.B16
    VTBL   V14.B16, [V8.B16], V8.B16
    VTBL   V15.B16, [V9.B16], V9.B16
    VEOR   V6.B16, V0.B16, V0.B16
    VEOR   V7.B16, V1.B16, V1.B16
    VEOR   V8.B16, V0.B16, V0.B16
    VEOR   V9.B16, V1.B16, V1.B16
    VEOR   V10.B16, V2.B16, V2.B16
    VEOR   V11.B16, V3.B16, V3.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    // Check for early termination
    CMP    $9, R16
    BEQ    mulNeon_10x1_64_store

    // Load and process 64 bytes from input 9 to 1 outputs
    VLD1.P 32(R3), [V12.B16, V13.B16]
    VLD1.P 32(R3), [V10.B16, V11.B16]
    VUSHR  $4, V12.B16, V14.B16
    VUSHR  $4, V13.B16, V15.B16
    VUSHR  $4, V10.B16, V16.B16
    VUSHR  $4, V11.B16, V17.B16
    VAND   V4.B16, V12.B16, V12.B16
    VAND   V4.B16, V13.B16, V13.B16
    VAND   V4.B16, V10.B16, V10.B16
    VAND   V4.B16, V11.B16, V11.B16
    VAND   V4.B16, V14.B16, V14.B16
    VAND   V4.B16, V15.B16, V15.B16
    VAND   V4.B16, V16.B16, V16.B16
    VAND   V4.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V6.B16, V7.B16]
    VLD1.P 32(R2), [V8.B16, V9.B16]
    VTBL   V10.B16, [V6.B16], V10.B16
    VTBL   V11.B16, [V7.B16], V11.B16
    VTBL   V12.B16, [V6.B16], V6.B16
    VTBL   V13.B16, [V7.B16], V7.B16
    VTBL   V16.B16, [V8.B16], V12.B16
    VTBL   V17.B16, [V9.B16], V13.B16
    VTBL   V14.B16, [V8.B16], V8.B16
    VTBL   V15.B16, [V9.B16], V9.B16
    VEOR   V6.B16, V0.B16, V0.B16
    VEOR   V7.B16, V1.B16, V1.B16
    VEOR   V8.B16, V0.B16, V0.B16
    VEOR   V9.B16, V1.B16, V1.B16
    VEOR   V10.B16, V2.B16, V2.B16
    VEOR   V11.B16, V3.B16, V3.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16

mulNeon_10x1_64_store:
    // Store 1 outputs
    VST1.P [V0.D2, V1.D2], 32(R14)
    VST1.P [V2.D2, V3.D2], 32(R14)

    // Prepare for next loop
    SUBS $1, R0
    BNE  mulNeon_10x1_64_loop

mulNeon_10x1_64_end:
    RET

// func mulNeon_10x1_64Xor(matrix []byte, in [][]byte, out [][]byte, start int, n int)
// Requires: NEON
TEXT Â·mulNeon_10x1_64Xor(SB), $0-88
    // Loading no tables to registers
    // Destination kept in GP registers
    // Full registers estimated 46 YMM used
    MOVD n+80(FP), R0
    LSR  $6, R0
    TST  R0, R0
    BEQ    mulNeon_10x1_64Xor_end
    MOVD in_base+24(FP), R3
    MOVD (R3), R1
    MOVD 24(R3), R4
    MOVD 48(R3), R5
    MOVD 72(R3), R8
    MOVD 96(R3), R9
    MOVD 120(R3), R10
    MOVD 144(R3), R11
    MOVD 168(R3), R12
    MOVD 192(R3), R13
    MOVD 216(R3), R3
    MOVD out_base+48(FP), R14
    MOVD (R14), R14
    MOVD start+72(FP), R15

    // Add start offset to output
    ADD    R15, R14

    // Add start offset to input
    ADD    R15, R1
    ADD    R15, R4
    ADD    R15, R5
    ADD    R15, R8
    ADD    R15, R9
    ADD    R15, R10
    ADD    R15, R11
    ADD    R15, R12
    ADD    R15, R13
    ADD    R15, R3
    MOVD   $15, R15
    VMOV   R15, V4.B[0]
    VDUP   V4.B[0], V4.B16

    // Load number of input shards
    MOVD   in_len+32(FP), R16

mulNeon_10x1_64Xor_loop:
    MOVD matrix_base+0(FP), R2
    // Load 1 outputs
    VLD1.P 32(R14), [V0.B16, V1.B16]
    VLD1.P 32(R14), [V2.B16, V3.B16]

    // Load and process 64 bytes from input 0 to 1 outputs
    VLD1.P 32(R1), [V12.B16, V13.B16]
    VLD1.P 32(R1), [V10.B16, V11.B16]
    VUSHR  $4, V12.B16, V14.B16
    VUSHR  $4, V13.B16, V15.B16
    VUSHR  $4, V10.B16, V16.B16
    VUSHR  $4, V11.B16, V17.B16
    VAND   V4.B16, V12.B16, V12.B16
    VAND   V4.B16, V13.B16, V13.B16
    VAND   V4.B16, V10.B16, V10.B16
    VAND   V4.B16, V11.B16, V11.B16
    VAND   V4.B16, V14.B16, V14.B16
    VAND   V4.B16, V15.B16, V15.B16
    VAND   V4.B16, V16.B16, V16.B16
    VAND   V4.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V6.B16, V7.B16]
    VLD1.P 32(R2), [V8.B16, V9.B16]
    VTBL   V10.B16, [V6.B16], V10.B16
    VTBL   V11.B16, [V7.B16], V11.B16
    VTBL   V12.B16, [V6.B16], V6.B16
    VTBL   V13.B16, [V7.B16], V7.B16
    VTBL   V16.B16, [V8.B16], V12.B16
    VTBL   V17.B16, [V9.B16], V13.B16
    VTBL   V14.B16, [V8.B16], V8.B16
    VTBL   V15.B16, [V9.B16], V9.B16
    VEOR   V6.B16, V0.B16, V0.B16
    VEOR   V7.B16, V1.B16, V1.B16
    VEOR   V8.B16, V0.B16, V0.B16
    VEOR   V9.B16, V1.B16, V1.B16
    VEOR   V10.B16, V2.B16, V2.B16
    VEOR   V11.B16, V3.B16, V3.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    // Check for early termination
    CMP    $1, R16
    BEQ    mulNeon_10x1_64Xor_store

    // Load and process 64 bytes from input 1 to 1 outputs
    VLD1.P 32(R4), [V12.B16, V13.B16]
    VLD1.P 32(R4), [V10.B16, V11.B16]
    VUSHR  $4, V12.B16, V14.B16
    VUSHR  $4, V13.B16, V15.B16
    VUSHR  $4, V10.B16, V16.B16
    VUSHR  $4, V11.B16, V17.B16
    VAND   V4.B16, V12.B16, V12.B16
    VAND   V4.B16, V13.B16, V13.B16
    VAND   V4.B16, V10.B16, V10.B16
    VAND   V4.B16, V11.B16, V11.B16
    VAND   V4.B16, V14.B16, V14.B16
    VAND   V4.B16, V15.B16, V15.B16
    VAND   V4.B16, V16.B16, V16.B16
    VAND   V4.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V6.B16, V7.B16]
    VLD1.P 32(R2), [V8.B16, V9.B16]
    VTBL   V10.B16, [V6.B16], V10.B16
    VTBL   V11.B16, [V7.B16], V11.B16
    VTBL   V12.B16, [V6.B16], V6.B16
    VTBL   V13.B16, [V7.B16], V7.B16
    VTBL   V16.B16, [V8.B16], V12.B16
    VTBL   V17.B16, [V9.B16], V13.B16
    VTBL   V14.B16, [V8.B16], V8.B16
    VTBL   V15.B16, [V9.B16], V9.B16
    VEOR   V6.B16, V0.B16, V0.B16
    VEOR   V7.B16, V1.B16, V1.B16
    VEOR   V8.B16, V0.B16, V0.B16
    VEOR   V9.B16, V1.B16, V1.B16
    VEOR   V10.B16, V2.B16, V2.B16
    VEOR   V11.B16, V3.B16, V3.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    // Check for early termination
    CMP    $2, R16
    BEQ    mulNeon_10x1_64Xor_store

    // Load and process 64 bytes from input 2 to 1 outputs
    VLD1.P 32(R5), [V12.B16, V13.B16]
    VLD1.P 32(R5), [V10.B16, V11.B16]
    VUSHR  $4, V12.B16, V14.B16
    VUSHR  $4, V13.B16, V15.B16
    VUSHR  $4, V10.B16, V16.B16
    VUSHR  $4, V11.B16, V17.B16
    VAND   V4.B16, V12.B16, V12.B16
    VAND   V4.B16, V13.B16, V13.B16
    VAND   V4.B16, V10.B16, V10.B16
    VAND   V4.B16, V11.B16, V11.B16
    VAND   V4.B16, V14.B16, V14.B16
    VAND   V4.B16, V15.B16, V15.B16
    VAND   V4.B16, V16.B16, V16.B16
    VAND   V4.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V6.B16, V7.B16]
    VLD1.P 32(R2), [V8.B16, V9.B16]
    VTBL   V10.B16, [V6.B16], V10.B16
    VTBL   V11.B16, [V7.B16], V11.B16
    VTBL   V12.B16, [V6.B16], V6.B16
    VTBL   V13.B16, [V7.B16], V7.B16
    VTBL   V16.B16, [V8.B16], V12.B16
    VTBL   V17.B16, [V9.B16], V13.B16
    VTBL   V14.B16, [V8.B16], V8.B16
    VTBL   V15.B16, [V9.B16], V9.B16
    VEOR   V6.B16, V0.B16, V0.B16
    VEOR   V7.B16, V1.B16, V1.B16
    VEOR   V8.B16, V0.B16, V0.B16
    VEOR   V9.B16, V1.B16, V1.B16
    VEOR   V10.B16, V2.B16, V2.B16
    VEOR   V11.B16, V3.B16, V3.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    // Check for early termination
    CMP    $3, R16
    BEQ    mulNeon_10x1_64Xor_store

    // Load and process 64 bytes from input 3 to 1 outputs
    VLD1.P 32(R8), [V12.B16, V13.B16]
    VLD1.P 32(R8), [V10.B16, V11.B16]
    VUSHR  $4, V12.B16, V14.B16
    VUSHR  $4, V13.B16, V15.B16
    VUSHR  $4, V10.B16, V16.B16
    VUSHR  $4, V11.B16, V17.B16
    VAND   V4.B16, V12.B16, V12.B16
    VAND   V4.B16, V13.B16, V13.B16
    VAND   V4.B16, V10.B16, V10.B16
    VAND   V4.B16, V11.B16, V11.B16
    VAND   V4.B16, V14.B16, V14.B16
    VAND   V4.B16, V15.B16, V15.B16
    VAND   V4.B16, V16.B16, V16.B16
    VAND   V4.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V6.B16, V7.B16]
    VLD1.P 32(R2), [V8.B16, V9.B16]
    VTBL   V10.B16, [V6.B16], V10.B16
    VTBL   V11.B16, [V7.B16], V11.B16
    VTBL   V12.B16, [V6.B16], V6.B16
    VTBL   V13.B16, [V7.B16], V7.B16
    VTBL   V16.B16, [V8.B16], V12.B16
    VTBL   V17.B16, [V9.B16], V13.B16
    VTBL   V14.B16, [V8.B16], V8.B16
    VTBL   V15.B16, [V9.B16], V9.B16
    VEOR   V6.B16, V0.B16, V0.B16
    VEOR   V7.B16, V1.B16, V1.B16
    VEOR   V8.B16, V0.B16, V0.B16
    VEOR   V9.B16, V1.B16, V1.B16
    VEOR   V10.B16, V2.B16, V2.B16
    VEOR   V11.B16, V3.B16, V3.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    // Check for early termination
    CMP    $4, R16
    BEQ    mulNeon_10x1_64Xor_store

    // Load and process 64 bytes from input 4 to 1 outputs
    VLD1.P 32(R9), [V12.B16, V13.B16]
    VLD1.P 32(R9), [V10.B16, V11.B16]
    VUSHR  $4, V12.B16, V14.B16
    VUSHR  $4, V13.B16, V15.B16
    VUSHR  $4, V10.B16, V16.B16
    VUSHR  $4, V11.B16, V17.B16
    VAND   V4.B16, V12.B16, V12.B16
    VAND   V4.B16, V13.B16, V13.B16
    VAND   V4.B16, V10.B16, V10.B16
    VAND   V4.B16, V11.B16, V11.B16
    VAND   V4.B16, V14.B16, V14.B16
    VAND   V4.B16, V15.B16, V15.B16
    VAND   V4.B16, V16.B16, V16.B16
    VAND   V4.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V6.B16, V7.B16]
    VLD1.P 32(R2), [V8.B16, V9.B16]
    VTBL   V10.B16, [V6.B16], V10.B16
    VTBL   V11.B16, [V7.B16], V11.B16
    VTBL   V12.B16, [V6.B16], V6.B16
    VTBL   V13.B16, [V7.B16], V7.B16
    VTBL   V16.B16, [V8.B16], V12.B16
    VTBL   V17.B16, [V9.B16], V13.B16
    VTBL   V14.B16, [V8.B16], V8.B16
    VTBL   V15.B16, [V9.B16], V9.B16
    VEOR   V6.B16, V0.B16, V0.B16
    VEOR   V7.B16, V1.B16, V1.B16
    VEOR   V8.B16, V0.B16, V0.B16
    VEOR   V9.B16, V1.B16, V1.B16
    VEOR   V10.B16, V2.B16, V2.B16
    VEOR   V11.B16, V3.B16, V3.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    // Check for early termination
    CMP    $5, R16
    BEQ    mulNeon_10x1_64Xor_store

    // Load and process 64 bytes from input 5 to 1 outputs
    VLD1.P 32(R10), [V12.B16, V13.B16]
    VLD1.P 32(R10), [V10.B16, V11.B16]
    VUSHR  $4, V12.B16, V14.B16
    VUSHR  $4, V13.B16, V15.B16
    VUSHR  $4, V10.B16, V16.B16
    VUSHR  $4, V11.B16, V17.B16
    VAND   V4.B16, V12.B16, V12.B16
    VAND   V4.B16, V13.B16, V13.B16
    VAND   V4.B16, V10.B16, V10.B16
    VAND   V4.B16, V11.B16, V11.B16
    VAND   V4.B16, V14.B16, V14.B16
    VAND   V4.B16, V15.B16, V15.B16
    VAND   V4.B16, V16.B16, V16.B16
    VAND   V4.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V6.B16, V7.B16]
    VLD1.P 32(R2), [V8.B16, V9.B16]
    VTBL   V10.B16, [V6.B16], V10.B16
    VTBL   V11.B16, [V7.B16], V11.B16
    VTBL   V12.B16, [V6.B16], V6.B16
    VTBL   V13.B16, [V7.B16], V7.B16
    VTBL   V16.B16, [V8.B16], V12.B16
    VTBL   V17.B16, [V9.B16], V13.B16
    VTBL   V14.B16, [V8.B16], V8.B16
    VTBL   V15.B16, [V9.B16], V9.B16
    VEOR   V6.B16, V0.B16, V0.B16
    VEOR   V7.B16, V1.B16, V1.B16
    VEOR   V8.B16, V0.B16, V0.B16
    VEOR   V9.B16, V1.B16, V1.B16
    VEOR   V10.B16, V2.B16, V2.B16
    VEOR   V11.B16, V3.B16, V3.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    // Check for early termination
    CMP    $6, R16
    BEQ    mulNeon_10x1_64Xor_store

    // Load and process 64 bytes from input 6 to 1 outputs
    VLD1.P 32(R11), [V12.B16, V13.B16]
    VLD1.P 32(R11), [V10.B16, V11.B16]
    VUSHR  $4, V12.B16, V14.B16
    VUSHR  $4, V13.B16, V15.B16
    VUSHR  $4, V10.B16, V16.B16
    VUSHR  $4, V11.B16, V17.B16
    VAND   V4.B16, V12.B16, V12.B16
    VAND   V4.B16, V13.B16, V13.B16
    VAND   V4.B16, V10.B16, V10.B16
    VAND   V4.B16, V11.B16, V11.B16
    VAND   V4.B16, V14.B16, V14.B16
    VAND   V4.B16, V15.B16, V15.B16
    VAND   V4.B16, V16.B16, V16.B16
    VAND   V4.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V6.B16, V7.B16]
    VLD1.P 32(R2), [V8.B16, V9.B16]
    VTBL   V10.B16, [V6.B16], V10.B16
    VTBL   V11.B16, [V7.B16], V11.B16
    VTBL   V12.B16, [V6.B16], V6.B16
    VTBL   V13.B16, [V7.B16], V7.B16
    VTBL   V16.B16, [V8.B16], V12.B16
    VTBL   V17.B16, [V9.B16], V13.B16
    VTBL   V14.B16, [V8.B16], V8.B16
    VTBL   V15.B16, [V9.B16], V9.B16
    VEOR   V6.B16, V0.B16, V0.B16
    VEOR   V7.B16, V1.B16, V1.B16
    VEOR   V8.B16, V0.B16, V0.B16
    VEOR   V9.B16, V1.B16, V1.B16
    VEOR   V10.B16, V2.B16, V2.B16
    VEOR   V11.B16, V3.B16, V3.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    // Check for early termination
    CMP    $7, R16
    BEQ    mulNeon_10x1_64Xor_store

    // Load and process 64 bytes from input 7 to 1 outputs
    VLD1.P 32(R12), [V12.B16, V13.B16]
    VLD1.P 32(R12), [V10.B16, V11.B16]
    VUSHR  $4, V12.B16, V14.B16
    VUSHR  $4, V13.B16, V15.B16
    VUSHR  $4, V10.B16, V16.B16
    VUSHR  $4, V11.B16, V17.B16
    VAND   V4.B16, V12.B16, V12.B16
    VAND   V4.B16, V13.B16, V13.B16
    VAND   V4.B16, V10.B16, V10.B16
    VAND   V4.B16, V11.B16, V11.B16
    VAND   V4.B16, V14.B16, V14.B16
    VAND   V4.B16, V15.B16, V15.B16
    VAND   V4.B16, V16.B16, V16.B16
    VAND   V4.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V6.B16, V7.B16]
    VLD1.P 32(R2), [V8.B16, V9.B16]
    VTBL   V10.B16, [V6.B16], V10.B16
    VTBL   V11.B16, [V7.B16], V11.B16
    VTBL   V12.B16, [V6.B16], V6.B16
    VTBL   V13.B16, [V7.B16], V7.B16
    VTBL   V16.B16, [V8.B16], V12.B16
    VTBL   V17.B16, [V9.B16], V13.B16
    VTBL   V14.B16, [V8.B16], V8.B16
    VTBL   V15.B16, [V9.B16], V9.B16
    VEOR   V6.B16, V0.B16, V0.B16
    VEOR   V7.B16, V1.B16, V1.B16
    VEOR   V8.B16, V0.B16, V0.B16
    VEOR   V9.B16, V1.B16, V1.B16
    VEOR   V10.B16, V2.B16, V2.B16
    VEOR   V11.B16, V3.B16, V3.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    // Check for early termination
    CMP    $8, R16
    BEQ    mulNeon_10x1_64Xor_store

    // Load and process 64 bytes from input 8 to 1 outputs
    VLD1.P 32(R13), [V12.B16, V13.B16]
    VLD1.P 32(R13), [V10.B16, V11.B16]
    VUSHR  $4, V12.B16, V14.B16
    VUSHR  $4, V13.B16, V15.B16
    VUSHR  $4, V10.B16, V16.B16
    VUSHR  $4, V11.B16, V17.B16
    VAND   V4.B16, V12.B16, V12.B16
    VAND   V4.B16, V13.B16, V13.B16
    VAND   V4.B16, V10.B16, V10.B16
    VAND   V4.B16, V11.B16, V11.B16
    VAND   V4.B16, V14.B16, V14.B16
    VAND   V4.B16, V15.B16, V15.B16
    VAND   V4.B16, V16.B16, V16.B16
    VAND   V4.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V6.B16, V7.B16]
    VLD1.P 32(R2), [V8.B16, V9.B16]
    VTBL   V10.B16, [V6.B16], V10.B16
    VTBL   V11.B16, [V7.B16], V11.B16
    VTBL   V12.B16, [V6.B16], V6.B16
    VTBL   V13.B16, [V7.B16], V7.B16
    VTBL   V16.B16, [V8.B16], V12.B16
    VTBL   V17.B16, [V9.B16], V13.B16
    VTBL   V14.B16, [V8.B16], V8.B16
    VTBL   V15.B16, [V9.B16], V9.B16
    VEOR   V6.B16, V0.B16, V0.B16
    VEOR   V7.B16, V1.B16, V1.B16
    VEOR   V8.B16, V0.B16, V0.B16
    VEOR   V9.B16, V1.B16, V1.B16
    VEOR   V10.B16, V2.B16, V2.B16
    VEOR   V11.B16, V3.B16, V3.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    // Check for early termination
    CMP    $9, R16
    BEQ    mulNeon_10x1_64Xor_store

    // Load and process 64 bytes from input 9 to 1 outputs
    VLD1.P 32(R3), [V12.B16, V13.B16]
    VLD1.P 32(R3), [V10.B16, V11.B16]
    VUSHR  $4, V12.B16, V14.B16
    VUSHR  $4, V13.B16, V15.B16
    VUSHR  $4, V10.B16, V16.B16
    VUSHR  $4, V11.B16, V17.B16
    VAND   V4.B16, V12.B16, V12.B16
    VAND   V4.B16, V13.B16, V13.B16
    VAND   V4.B16, V10.B16, V10.B16
    VAND   V4.B16, V11.B16, V11.B16
    VAND   V4.B16, V14.B16, V14.B16
    VAND   V4.B16, V15.B16, V15.B16
    VAND   V4.B16, V16.B16, V16.B16
    VAND   V4.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V6.B16, V7.B16]
    VLD1.P 32(R2), [V8.B16, V9.B16]
    VTBL   V10.B16, [V6.B16], V10.B16
    VTBL   V11.B16, [V7.B16], V11.B16
    VTBL   V12.B16, [V6.B16], V6.B16
    VTBL   V13.B16, [V7.B16], V7.B16
    VTBL   V16.B16, [V8.B16], V12.B16
    VTBL   V17.B16, [V9.B16], V13.B16
    VTBL   V14.B16, [V8.B16], V8.B16
    VTBL   V15.B16, [V9.B16], V9.B16
    VEOR   V6.B16, V0.B16, V0.B16
    VEOR   V7.B16, V1.B16, V1.B16
    VEOR   V8.B16, V0.B16, V0.B16
    VEOR   V9.B16, V1.B16, V1.B16
    VEOR   V10.B16, V2.B16, V2.B16
    VEOR   V11.B16, V3.B16, V3.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16

mulNeon_10x1_64Xor_store:
    // Store 1 outputs
    SUB    $64, R14
    VST1.P [V0.D2, V1.D2], 32(R14)
    VST1.P [V2.D2, V3.D2], 32(R14)

    // Prepare for next loop
    SUBS $1, R0
    BNE  mulNeon_10x1_64Xor_loop

mulNeon_10x1_64Xor_end:
    RET

// func mulNeon_10x2_64(matrix []byte, in [][]byte, out [][]byte, start int, n int)
// Requires: NEON
TEXT Â·mulNeon_10x2_64(SB), $8-88
    // Loading no tables to registers
    // Destination kept in GP registers
    // Full registers estimated 89 YMM used
    MOVD n+80(FP), R0
    LSR  $6, R0
    TST  R0, R0
    BEQ    mulNeon_10x2_64_end
    MOVD in_base+24(FP), R3
    MOVD (R3), R1
    MOVD 24(R3), R4
    MOVD 48(R3), R5
    MOVD 72(R3), R8
    MOVD 96(R3), R9
    MOVD 120(R3), R10
    MOVD 144(R3), R11
    MOVD 168(R3), R12
    MOVD 192(R3), R13
    MOVD 216(R3), R3
    MOVD out_base+48(FP), R14
    MOVD (R14), R15
    MOVD 24(R14), R14
    MOVD start+72(FP), R6

    // Add start offset to output
    ADD    R6, R15
    ADD    R6, R14

    // Add start offset to input
    ADD    R6, R1
    ADD    R6, R4
    ADD    R6, R5
    ADD    R6, R8
    ADD    R6, R9
    ADD    R6, R10
    ADD    R6, R11
    ADD    R6, R12
    ADD    R6, R13
    ADD    R6, R3
    MOVD   $15, R6
    VMOV   R6, V8.B[0]
    VDUP   V8.B[0], V8.B16

    // Load number of input shards
    MOVD   in_len+32(FP), R16

mulNeon_10x2_64_loop:
    MOVD matrix_base+0(FP), R2
    // Load and process 64 bytes from input 0 to 2 outputs
    VLD1.P 32(R1), [V18.B16, V19.B16]
    VLD1.P 32(R1), [V22.B16, V23.B16]
    VUSHR  $4, V18.B16, V20.B16
    VUSHR  $4, V19.B16, V21.B16
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VAND   V8.B16, V18.B16, V18.B16
    VAND   V8.B16, V19.B16, V19.B16
    VAND   V8.B16, V22.B16, V22.B16
    VAND   V8.B16, V23.B16, V23.B16
    VAND   V8.B16, V20.B16, V20.B16
    VAND   V8.B16, V21.B16, V21.B16
    VAND   V8.B16, V24.B16, V24.B16
    VAND   V8.B16, V25.B16, V25.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V22.B16, [V10.B16], V14.B16
    VTBL   V23.B16, [V11.B16], V15.B16
    VTBL   V18.B16, [V10.B16], V10.B16
    VTBL   V19.B16, [V11.B16], V11.B16
    VTBL   V24.B16, [V12.B16], V16.B16
    VTBL   V25.B16, [V13.B16], V17.B16
    VTBL   V20.B16, [V12.B16], V12.B16
    VTBL   V21.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V12.B16, V0.B16
    VEOR   V11.B16, V13.B16, V1.B16
    VEOR   V14.B16, V16.B16, V2.B16
    VEOR   V15.B16, V17.B16, V3.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V22.B16, [V10.B16], V14.B16
    VTBL   V23.B16, [V11.B16], V15.B16
    VTBL   V18.B16, [V10.B16], V10.B16
    VTBL   V19.B16, [V11.B16], V11.B16
    VTBL   V24.B16, [V12.B16], V16.B16
    VTBL   V25.B16, [V13.B16], V17.B16
    VTBL   V20.B16, [V12.B16], V12.B16
    VTBL   V21.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V12.B16, V4.B16
    VEOR   V11.B16, V13.B16, V5.B16
    VEOR   V14.B16, V16.B16, V6.B16
    VEOR   V15.B16, V17.B16, V7.B16
    // Check for early termination
    CMP    $1, R16
    BEQ    mulNeon_10x2_64_store

    // Load and process 64 bytes from input 1 to 2 outputs
    VLD1.P 32(R4), [V18.B16, V19.B16]
    VLD1.P 32(R4), [V22.B16, V23.B16]
    VUSHR  $4, V18.B16, V20.B16
    VUSHR  $4, V19.B16, V21.B16
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VAND   V8.B16, V18.B16, V18.B16
    VAND   V8.B16, V19.B16, V19.B16
    VAND   V8.B16, V22.B16, V22.B16
    VAND   V8.B16, V23.B16, V23.B16
    VAND   V8.B16, V20.B16, V20.B16
    VAND   V8.B16, V21.B16, V21.B16
    VAND   V8.B16, V24.B16, V24.B16
    VAND   V8.B16, V25.B16, V25.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V22.B16, [V10.B16], V14.B16
    VTBL   V23.B16, [V11.B16], V15.B16
    VTBL   V18.B16, [V10.B16], V10.B16
    VTBL   V19.B16, [V11.B16], V11.B16
    VTBL   V24.B16, [V12.B16], V16.B16
    VTBL   V25.B16, [V13.B16], V17.B16
    VTBL   V20.B16, [V12.B16], V12.B16
    VTBL   V21.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V0.B16, V0.B16
    VEOR   V11.B16, V1.B16, V1.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V22.B16, [V10.B16], V14.B16
    VTBL   V23.B16, [V11.B16], V15.B16
    VTBL   V18.B16, [V10.B16], V10.B16
    VTBL   V19.B16, [V11.B16], V11.B16
    VTBL   V24.B16, [V12.B16], V16.B16
    VTBL   V25.B16, [V13.B16], V17.B16
    VTBL   V20.B16, [V12.B16], V12.B16
    VTBL   V21.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V4.B16, V4.B16
    VEOR   V11.B16, V5.B16, V5.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    // Check for early termination
    CMP    $2, R16
    BEQ    mulNeon_10x2_64_store

    // Load and process 64 bytes from input 2 to 2 outputs
    VLD1.P 32(R5), [V18.B16, V19.B16]
    VLD1.P 32(R5), [V22.B16, V23.B16]
    VUSHR  $4, V18.B16, V20.B16
    VUSHR  $4, V19.B16, V21.B16
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VAND   V8.B16, V18.B16, V18.B16
    VAND   V8.B16, V19.B16, V19.B16
    VAND   V8.B16, V22.B16, V22.B16
    VAND   V8.B16, V23.B16, V23.B16
    VAND   V8.B16, V20.B16, V20.B16
    VAND   V8.B16, V21.B16, V21.B16
    VAND   V8.B16, V24.B16, V24.B16
    VAND   V8.B16, V25.B16, V25.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V22.B16, [V10.B16], V14.B16
    VTBL   V23.B16, [V11.B16], V15.B16
    VTBL   V18.B16, [V10.B16], V10.B16
    VTBL   V19.B16, [V11.B16], V11.B16
    VTBL   V24.B16, [V12.B16], V16.B16
    VTBL   V25.B16, [V13.B16], V17.B16
    VTBL   V20.B16, [V12.B16], V12.B16
    VTBL   V21.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V0.B16, V0.B16
    VEOR   V11.B16, V1.B16, V1.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V22.B16, [V10.B16], V14.B16
    VTBL   V23.B16, [V11.B16], V15.B16
    VTBL   V18.B16, [V10.B16], V10.B16
    VTBL   V19.B16, [V11.B16], V11.B16
    VTBL   V24.B16, [V12.B16], V16.B16
    VTBL   V25.B16, [V13.B16], V17.B16
    VTBL   V20.B16, [V12.B16], V12.B16
    VTBL   V21.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V4.B16, V4.B16
    VEOR   V11.B16, V5.B16, V5.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    // Check for early termination
    CMP    $3, R16
    BEQ    mulNeon_10x2_64_store

    // Load and process 64 bytes from input 3 to 2 outputs
    VLD1.P 32(R8), [V18.B16, V19.B16]
    VLD1.P 32(R8), [V22.B16, V23.B16]
    VUSHR  $4, V18.B16, V20.B16
    VUSHR  $4, V19.B16, V21.B16
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VAND   V8.B16, V18.B16, V18.B16
    VAND   V8.B16, V19.B16, V19.B16
    VAND   V8.B16, V22.B16, V22.B16
    VAND   V8.B16, V23.B16, V23.B16
    VAND   V8.B16, V20.B16, V20.B16
    VAND   V8.B16, V21.B16, V21.B16
    VAND   V8.B16, V24.B16, V24.B16
    VAND   V8.B16, V25.B16, V25.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V22.B16, [V10.B16], V14.B16
    VTBL   V23.B16, [V11.B16], V15.B16
    VTBL   V18.B16, [V10.B16], V10.B16
    VTBL   V19.B16, [V11.B16], V11.B16
    VTBL   V24.B16, [V12.B16], V16.B16
    VTBL   V25.B16, [V13.B16], V17.B16
    VTBL   V20.B16, [V12.B16], V12.B16
    VTBL   V21.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V0.B16, V0.B16
    VEOR   V11.B16, V1.B16, V1.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V22.B16, [V10.B16], V14.B16
    VTBL   V23.B16, [V11.B16], V15.B16
    VTBL   V18.B16, [V10.B16], V10.B16
    VTBL   V19.B16, [V11.B16], V11.B16
    VTBL   V24.B16, [V12.B16], V16.B16
    VTBL   V25.B16, [V13.B16], V17.B16
    VTBL   V20.B16, [V12.B16], V12.B16
    VTBL   V21.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V4.B16, V4.B16
    VEOR   V11.B16, V5.B16, V5.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    // Check for early termination
    CMP    $4, R16
    BEQ    mulNeon_10x2_64_store

    // Load and process 64 bytes from input 4 to 2 outputs
    VLD1.P 32(R9), [V18.B16, V19.B16]
    VLD1.P 32(R9), [V22.B16, V23.B16]
    VUSHR  $4, V18.B16, V20.B16
    VUSHR  $4, V19.B16, V21.B16
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VAND   V8.B16, V18.B16, V18.B16
    VAND   V8.B16, V19.B16, V19.B16
    VAND   V8.B16, V22.B16, V22.B16
    VAND   V8.B16, V23.B16, V23.B16
    VAND   V8.B16, V20.B16, V20.B16
    VAND   V8.B16, V21.B16, V21.B16
    VAND   V8.B16, V24.B16, V24.B16
    VAND   V8.B16, V25.B16, V25.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V22.B16, [V10.B16], V14.B16
    VTBL   V23.B16, [V11.B16], V15.B16
    VTBL   V18.B16, [V10.B16], V10.B16
    VTBL   V19.B16, [V11.B16], V11.B16
    VTBL   V24.B16, [V12.B16], V16.B16
    VTBL   V25.B16, [V13.B16], V17.B16
    VTBL   V20.B16, [V12.B16], V12.B16
    VTBL   V21.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V0.B16, V0.B16
    VEOR   V11.B16, V1.B16, V1.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V22.B16, [V10.B16], V14.B16
    VTBL   V23.B16, [V11.B16], V15.B16
    VTBL   V18.B16, [V10.B16], V10.B16
    VTBL   V19.B16, [V11.B16], V11.B16
    VTBL   V24.B16, [V12.B16], V16.B16
    VTBL   V25.B16, [V13.B16], V17.B16
    VTBL   V20.B16, [V12.B16], V12.B16
    VTBL   V21.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V4.B16, V4.B16
    VEOR   V11.B16, V5.B16, V5.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    // Check for early termination
    CMP    $5, R16
    BEQ    mulNeon_10x2_64_store

    // Load and process 64 bytes from input 5 to 2 outputs
    VLD1.P 32(R10), [V18.B16, V19.B16]
    VLD1.P 32(R10), [V22.B16, V23.B16]
    VUSHR  $4, V18.B16, V20.B16
    VUSHR  $4, V19.B16, V21.B16
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VAND   V8.B16, V18.B16, V18.B16
    VAND   V8.B16, V19.B16, V19.B16
    VAND   V8.B16, V22.B16, V22.B16
    VAND   V8.B16, V23.B16, V23.B16
    VAND   V8.B16, V20.B16, V20.B16
    VAND   V8.B16, V21.B16, V21.B16
    VAND   V8.B16, V24.B16, V24.B16
    VAND   V8.B16, V25.B16, V25.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V22.B16, [V10.B16], V14.B16
    VTBL   V23.B16, [V11.B16], V15.B16
    VTBL   V18.B16, [V10.B16], V10.B16
    VTBL   V19.B16, [V11.B16], V11.B16
    VTBL   V24.B16, [V12.B16], V16.B16
    VTBL   V25.B16, [V13.B16], V17.B16
    VTBL   V20.B16, [V12.B16], V12.B16
    VTBL   V21.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V0.B16, V0.B16
    VEOR   V11.B16, V1.B16, V1.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V22.B16, [V10.B16], V14.B16
    VTBL   V23.B16, [V11.B16], V15.B16
    VTBL   V18.B16, [V10.B16], V10.B16
    VTBL   V19.B16, [V11.B16], V11.B16
    VTBL   V24.B16, [V12.B16], V16.B16
    VTBL   V25.B16, [V13.B16], V17.B16
    VTBL   V20.B16, [V12.B16], V12.B16
    VTBL   V21.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V4.B16, V4.B16
    VEOR   V11.B16, V5.B16, V5.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    // Check for early termination
    CMP    $6, R16
    BEQ    mulNeon_10x2_64_store

    // Load and process 64 bytes from input 6 to 2 outputs
    VLD1.P 32(R11), [V18.B16, V19.B16]
    VLD1.P 32(R11), [V22.B16, V23.B16]
    VUSHR  $4, V18.B16, V20.B16
    VUSHR  $4, V19.B16, V21.B16
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VAND   V8.B16, V18.B16, V18.B16
    VAND   V8.B16, V19.B16, V19.B16
    VAND   V8.B16, V22.B16, V22.B16
    VAND   V8.B16, V23.B16, V23.B16
    VAND   V8.B16, V20.B16, V20.B16
    VAND   V8.B16, V21.B16, V21.B16
    VAND   V8.B16, V24.B16, V24.B16
    VAND   V8.B16, V25.B16, V25.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V22.B16, [V10.B16], V14.B16
    VTBL   V23.B16, [V11.B16], V15.B16
    VTBL   V18.B16, [V10.B16], V10.B16
    VTBL   V19.B16, [V11.B16], V11.B16
    VTBL   V24.B16, [V12.B16], V16.B16
    VTBL   V25.B16, [V13.B16], V17.B16
    VTBL   V20.B16, [V12.B16], V12.B16
    VTBL   V21.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V0.B16, V0.B16
    VEOR   V11.B16, V1.B16, V1.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V22.B16, [V10.B16], V14.B16
    VTBL   V23.B16, [V11.B16], V15.B16
    VTBL   V18.B16, [V10.B16], V10.B16
    VTBL   V19.B16, [V11.B16], V11.B16
    VTBL   V24.B16, [V12.B16], V16.B16
    VTBL   V25.B16, [V13.B16], V17.B16
    VTBL   V20.B16, [V12.B16], V12.B16
    VTBL   V21.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V4.B16, V4.B16
    VEOR   V11.B16, V5.B16, V5.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    // Check for early termination
    CMP    $7, R16
    BEQ    mulNeon_10x2_64_store

    // Load and process 64 bytes from input 7 to 2 outputs
    VLD1.P 32(R12), [V18.B16, V19.B16]
    VLD1.P 32(R12), [V22.B16, V23.B16]
    VUSHR  $4, V18.B16, V20.B16
    VUSHR  $4, V19.B16, V21.B16
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VAND   V8.B16, V18.B16, V18.B16
    VAND   V8.B16, V19.B16, V19.B16
    VAND   V8.B16, V22.B16, V22.B16
    VAND   V8.B16, V23.B16, V23.B16
    VAND   V8.B16, V20.B16, V20.B16
    VAND   V8.B16, V21.B16, V21.B16
    VAND   V8.B16, V24.B16, V24.B16
    VAND   V8.B16, V25.B16, V25.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V22.B16, [V10.B16], V14.B16
    VTBL   V23.B16, [V11.B16], V15.B16
    VTBL   V18.B16, [V10.B16], V10.B16
    VTBL   V19.B16, [V11.B16], V11.B16
    VTBL   V24.B16, [V12.B16], V16.B16
    VTBL   V25.B16, [V13.B16], V17.B16
    VTBL   V20.B16, [V12.B16], V12.B16
    VTBL   V21.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V0.B16, V0.B16
    VEOR   V11.B16, V1.B16, V1.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V22.B16, [V10.B16], V14.B16
    VTBL   V23.B16, [V11.B16], V15.B16
    VTBL   V18.B16, [V10.B16], V10.B16
    VTBL   V19.B16, [V11.B16], V11.B16
    VTBL   V24.B16, [V12.B16], V16.B16
    VTBL   V25.B16, [V13.B16], V17.B16
    VTBL   V20.B16, [V12.B16], V12.B16
    VTBL   V21.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V4.B16, V4.B16
    VEOR   V11.B16, V5.B16, V5.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    // Check for early termination
    CMP    $8, R16
    BEQ    mulNeon_10x2_64_store

    // Load and process 64 bytes from input 8 to 2 outputs
    VLD1.P 32(R13), [V18.B16, V19.B16]
    VLD1.P 32(R13), [V22.B16, V23.B16]
    VUSHR  $4, V18.B16, V20.B16
    VUSHR  $4, V19.B16, V21.B16
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VAND   V8.B16, V18.B16, V18.B16
    VAND   V8.B16, V19.B16, V19.B16
    VAND   V8.B16, V22.B16, V22.B16
    VAND   V8.B16, V23.B16, V23.B16
    VAND   V8.B16, V20.B16, V20.B16
    VAND   V8.B16, V21.B16, V21.B16
    VAND   V8.B16, V24.B16, V24.B16
    VAND   V8.B16, V25.B16, V25.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V22.B16, [V10.B16], V14.B16
    VTBL   V23.B16, [V11.B16], V15.B16
    VTBL   V18.B16, [V10.B16], V10.B16
    VTBL   V19.B16, [V11.B16], V11.B16
    VTBL   V24.B16, [V12.B16], V16.B16
    VTBL   V25.B16, [V13.B16], V17.B16
    VTBL   V20.B16, [V12.B16], V12.B16
    VTBL   V21.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V0.B16, V0.B16
    VEOR   V11.B16, V1.B16, V1.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V22.B16, [V10.B16], V14.B16
    VTBL   V23.B16, [V11.B16], V15.B16
    VTBL   V18.B16, [V10.B16], V10.B16
    VTBL   V19.B16, [V11.B16], V11.B16
    VTBL   V24.B16, [V12.B16], V16.B16
    VTBL   V25.B16, [V13.B16], V17.B16
    VTBL   V20.B16, [V12.B16], V12.B16
    VTBL   V21.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V4.B16, V4.B16
    VEOR   V11.B16, V5.B16, V5.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    // Check for early termination
    CMP    $9, R16
    BEQ    mulNeon_10x2_64_store

    // Load and process 64 bytes from input 9 to 2 outputs
    VLD1.P 32(R3), [V18.B16, V19.B16]
    VLD1.P 32(R3), [V22.B16, V23.B16]
    VUSHR  $4, V18.B16, V20.B16
    VUSHR  $4, V19.B16, V21.B16
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VAND   V8.B16, V18.B16, V18.B16
    VAND   V8.B16, V19.B16, V19.B16
    VAND   V8.B16, V22.B16, V22.B16
    VAND   V8.B16, V23.B16, V23.B16
    VAND   V8.B16, V20.B16, V20.B16
    VAND   V8.B16, V21.B16, V21.B16
    VAND   V8.B16, V24.B16, V24.B16
    VAND   V8.B16, V25.B16, V25.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V22.B16, [V10.B16], V14.B16
    VTBL   V23.B16, [V11.B16], V15.B16
    VTBL   V18.B16, [V10.B16], V10.B16
    VTBL   V19.B16, [V11.B16], V11.B16
    VTBL   V24.B16, [V12.B16], V16.B16
    VTBL   V25.B16, [V13.B16], V17.B16
    VTBL   V20.B16, [V12.B16], V12.B16
    VTBL   V21.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V0.B16, V0.B16
    VEOR   V11.B16, V1.B16, V1.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V22.B16, [V10.B16], V14.B16
    VTBL   V23.B16, [V11.B16], V15.B16
    VTBL   V18.B16, [V10.B16], V10.B16
    VTBL   V19.B16, [V11.B16], V11.B16
    VTBL   V24.B16, [V12.B16], V16.B16
    VTBL   V25.B16, [V13.B16], V17.B16
    VTBL   V20.B16, [V12.B16], V12.B16
    VTBL   V21.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V4.B16, V4.B16
    VEOR   V11.B16, V5.B16, V5.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16

mulNeon_10x2_64_store:
    // Store 2 outputs
    VST1.P [V0.D2, V1.D2], 32(R15)
    VST1.P [V2.D2, V3.D2], 32(R15)
    VST1.P [V4.D2, V5.D2], 32(R14)
    VST1.P [V6.D2, V7.D2], 32(R14)

    // Prepare for next loop
    SUBS $1, R0
    BNE  mulNeon_10x2_64_loop

mulNeon_10x2_64_end:
    RET

// func mulNeon_10x2_64Xor(matrix []byte, in [][]byte, out [][]byte, start int, n int)
// Requires: NEON
TEXT Â·mulNeon_10x2_64Xor(SB), $8-88
    // Loading no tables to registers
    // Destination kept in GP registers
    // Full registers estimated 89 YMM used
    MOVD n+80(FP), R0
    LSR  $6, R0
    TST  R0, R0
    BEQ    mulNeon_10x2_64Xor_end
    MOVD in_base+24(FP), R3
    MOVD (R3), R1
    MOVD 24(R3), R4
    MOVD 48(R3), R5
    MOVD 72(R3), R8
    MOVD 96(R3), R9
    MOVD 120(R3), R10
    MOVD 144(R3), R11
    MOVD 168(R3), R12
    MOVD 192(R3), R13
    MOVD 216(R3), R3
    MOVD out_base+48(FP), R14
    MOVD (R14), R15
    MOVD 24(R14), R14
    MOVD start+72(FP), R6

    // Add start offset to output
    ADD    R6, R15
    ADD    R6, R14

    // Add start offset to input
    ADD    R6, R1
    ADD    R6, R4
    ADD    R6, R5
    ADD    R6, R8
    ADD    R6, R9
    ADD    R6, R10
    ADD    R6, R11
    ADD    R6, R12
    ADD    R6, R13
    ADD    R6, R3
    MOVD   $15, R6
    VMOV   R6, V8.B[0]
    VDUP   V8.B[0], V8.B16

    // Load number of input shards
    MOVD   in_len+32(FP), R16

mulNeon_10x2_64Xor_loop:
    MOVD matrix_base+0(FP), R2
    // Load 2 outputs
    VLD1.P 32(R15), [V0.B16, V1.B16]
    VLD1.P 32(R15), [V2.B16, V3.B16]
    VLD1.P 32(R14), [V4.B16, V5.B16]
    VLD1.P 32(R14), [V6.B16, V7.B16]

    // Load and process 64 bytes from input 0 to 2 outputs
    VLD1.P 32(R1), [V18.B16, V19.B16]
    VLD1.P 32(R1), [V22.B16, V23.B16]
    VUSHR  $4, V18.B16, V20.B16
    VUSHR  $4, V19.B16, V21.B16
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VAND   V8.B16, V18.B16, V18.B16
    VAND   V8.B16, V19.B16, V19.B16
    VAND   V8.B16, V22.B16, V22.B16
    VAND   V8.B16, V23.B16, V23.B16
    VAND   V8.B16, V20.B16, V20.B16
    VAND   V8.B16, V21.B16, V21.B16
    VAND   V8.B16, V24.B16, V24.B16
    VAND   V8.B16, V25.B16, V25.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V22.B16, [V10.B16], V14.B16
    VTBL   V23.B16, [V11.B16], V15.B16
    VTBL   V18.B16, [V10.B16], V10.B16
    VTBL   V19.B16, [V11.B16], V11.B16
    VTBL   V24.B16, [V12.B16], V16.B16
    VTBL   V25.B16, [V13.B16], V17.B16
    VTBL   V20.B16, [V12.B16], V12.B16
    VTBL   V21.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V0.B16, V0.B16
    VEOR   V11.B16, V1.B16, V1.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V22.B16, [V10.B16], V14.B16
    VTBL   V23.B16, [V11.B16], V15.B16
    VTBL   V18.B16, [V10.B16], V10.B16
    VTBL   V19.B16, [V11.B16], V11.B16
    VTBL   V24.B16, [V12.B16], V16.B16
    VTBL   V25.B16, [V13.B16], V17.B16
    VTBL   V20.B16, [V12.B16], V12.B16
    VTBL   V21.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V4.B16, V4.B16
    VEOR   V11.B16, V5.B16, V5.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    // Check for early termination
    CMP    $1, R16
    BEQ    mulNeon_10x2_64Xor_store

    // Load and process 64 bytes from input 1 to 2 outputs
    VLD1.P 32(R4), [V18.B16, V19.B16]
    VLD1.P 32(R4), [V22.B16, V23.B16]
    VUSHR  $4, V18.B16, V20.B16
    VUSHR  $4, V19.B16, V21.B16
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VAND   V8.B16, V18.B16, V18.B16
    VAND   V8.B16, V19.B16, V19.B16
    VAND   V8.B16, V22.B16, V22.B16
    VAND   V8.B16, V23.B16, V23.B16
    VAND   V8.B16, V20.B16, V20.B16
    VAND   V8.B16, V21.B16, V21.B16
    VAND   V8.B16, V24.B16, V24.B16
    VAND   V8.B16, V25.B16, V25.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V22.B16, [V10.B16], V14.B16
    VTBL   V23.B16, [V11.B16], V15.B16
    VTBL   V18.B16, [V10.B16], V10.B16
    VTBL   V19.B16, [V11.B16], V11.B16
    VTBL   V24.B16, [V12.B16], V16.B16
    VTBL   V25.B16, [V13.B16], V17.B16
    VTBL   V20.B16, [V12.B16], V12.B16
    VTBL   V21.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V0.B16, V0.B16
    VEOR   V11.B16, V1.B16, V1.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V22.B16, [V10.B16], V14.B16
    VTBL   V23.B16, [V11.B16], V15.B16
    VTBL   V18.B16, [V10.B16], V10.B16
    VTBL   V19.B16, [V11.B16], V11.B16
    VTBL   V24.B16, [V12.B16], V16.B16
    VTBL   V25.B16, [V13.B16], V17.B16
    VTBL   V20.B16, [V12.B16], V12.B16
    VTBL   V21.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V4.B16, V4.B16
    VEOR   V11.B16, V5.B16, V5.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    // Check for early termination
    CMP    $2, R16
    BEQ    mulNeon_10x2_64Xor_store

    // Load and process 64 bytes from input 2 to 2 outputs
    VLD1.P 32(R5), [V18.B16, V19.B16]
    VLD1.P 32(R5), [V22.B16, V23.B16]
    VUSHR  $4, V18.B16, V20.B16
    VUSHR  $4, V19.B16, V21.B16
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VAND   V8.B16, V18.B16, V18.B16
    VAND   V8.B16, V19.B16, V19.B16
    VAND   V8.B16, V22.B16, V22.B16
    VAND   V8.B16, V23.B16, V23.B16
    VAND   V8.B16, V20.B16, V20.B16
    VAND   V8.B16, V21.B16, V21.B16
    VAND   V8.B16, V24.B16, V24.B16
    VAND   V8.B16, V25.B16, V25.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V22.B16, [V10.B16], V14.B16
    VTBL   V23.B16, [V11.B16], V15.B16
    VTBL   V18.B16, [V10.B16], V10.B16
    VTBL   V19.B16, [V11.B16], V11.B16
    VTBL   V24.B16, [V12.B16], V16.B16
    VTBL   V25.B16, [V13.B16], V17.B16
    VTBL   V20.B16, [V12.B16], V12.B16
    VTBL   V21.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V0.B16, V0.B16
    VEOR   V11.B16, V1.B16, V1.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V22.B16, [V10.B16], V14.B16
    VTBL   V23.B16, [V11.B16], V15.B16
    VTBL   V18.B16, [V10.B16], V10.B16
    VTBL   V19.B16, [V11.B16], V11.B16
    VTBL   V24.B16, [V12.B16], V16.B16
    VTBL   V25.B16, [V13.B16], V17.B16
    VTBL   V20.B16, [V12.B16], V12.B16
    VTBL   V21.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V4.B16, V4.B16
    VEOR   V11.B16, V5.B16, V5.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    // Check for early termination
    CMP    $3, R16
    BEQ    mulNeon_10x2_64Xor_store

    // Load and process 64 bytes from input 3 to 2 outputs
    VLD1.P 32(R8), [V18.B16, V19.B16]
    VLD1.P 32(R8), [V22.B16, V23.B16]
    VUSHR  $4, V18.B16, V20.B16
    VUSHR  $4, V19.B16, V21.B16
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VAND   V8.B16, V18.B16, V18.B16
    VAND   V8.B16, V19.B16, V19.B16
    VAND   V8.B16, V22.B16, V22.B16
    VAND   V8.B16, V23.B16, V23.B16
    VAND   V8.B16, V20.B16, V20.B16
    VAND   V8.B16, V21.B16, V21.B16
    VAND   V8.B16, V24.B16, V24.B16
    VAND   V8.B16, V25.B16, V25.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V22.B16, [V10.B16], V14.B16
    VTBL   V23.B16, [V11.B16], V15.B16
    VTBL   V18.B16, [V10.B16], V10.B16
    VTBL   V19.B16, [V11.B16], V11.B16
    VTBL   V24.B16, [V12.B16], V16.B16
    VTBL   V25.B16, [V13.B16], V17.B16
    VTBL   V20.B16, [V12.B16], V12.B16
    VTBL   V21.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V0.B16, V0.B16
    VEOR   V11.B16, V1.B16, V1.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V22.B16, [V10.B16], V14.B16
    VTBL   V23.B16, [V11.B16], V15.B16
    VTBL   V18.B16, [V10.B16], V10.B16
    VTBL   V19.B16, [V11.B16], V11.B16
    VTBL   V24.B16, [V12.B16], V16.B16
    VTBL   V25.B16, [V13.B16], V17.B16
    VTBL   V20.B16, [V12.B16], V12.B16
    VTBL   V21.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V4.B16, V4.B16
    VEOR   V11.B16, V5.B16, V5.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    // Check for early termination
    CMP    $4, R16
    BEQ    mulNeon_10x2_64Xor_store

    // Load and process 64 bytes from input 4 to 2 outputs
    VLD1.P 32(R9), [V18.B16, V19.B16]
    VLD1.P 32(R9), [V22.B16, V23.B16]
    VUSHR  $4, V18.B16, V20.B16
    VUSHR  $4, V19.B16, V21.B16
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VAND   V8.B16, V18.B16, V18.B16
    VAND   V8.B16, V19.B16, V19.B16
    VAND   V8.B16, V22.B16, V22.B16
    VAND   V8.B16, V23.B16, V23.B16
    VAND   V8.B16, V20.B16, V20.B16
    VAND   V8.B16, V21.B16, V21.B16
    VAND   V8.B16, V24.B16, V24.B16
    VAND   V8.B16, V25.B16, V25.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V22.B16, [V10.B16], V14.B16
    VTBL   V23.B16, [V11.B16], V15.B16
    VTBL   V18.B16, [V10.B16], V10.B16
    VTBL   V19.B16, [V11.B16], V11.B16
    VTBL   V24.B16, [V12.B16], V16.B16
    VTBL   V25.B16, [V13.B16], V17.B16
    VTBL   V20.B16, [V12.B16], V12.B16
    VTBL   V21.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V0.B16, V0.B16
    VEOR   V11.B16, V1.B16, V1.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V22.B16, [V10.B16], V14.B16
    VTBL   V23.B16, [V11.B16], V15.B16
    VTBL   V18.B16, [V10.B16], V10.B16
    VTBL   V19.B16, [V11.B16], V11.B16
    VTBL   V24.B16, [V12.B16], V16.B16
    VTBL   V25.B16, [V13.B16], V17.B16
    VTBL   V20.B16, [V12.B16], V12.B16
    VTBL   V21.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V4.B16, V4.B16
    VEOR   V11.B16, V5.B16, V5.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    // Check for early termination
    CMP    $5, R16
    BEQ    mulNeon_10x2_64Xor_store

    // Load and process 64 bytes from input 5 to 2 outputs
    VLD1.P 32(R10), [V18.B16, V19.B16]
    VLD1.P 32(R10), [V22.B16, V23.B16]
    VUSHR  $4, V18.B16, V20.B16
    VUSHR  $4, V19.B16, V21.B16
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VAND   V8.B16, V18.B16, V18.B16
    VAND   V8.B16, V19.B16, V19.B16
    VAND   V8.B16, V22.B16, V22.B16
    VAND   V8.B16, V23.B16, V23.B16
    VAND   V8.B16, V20.B16, V20.B16
    VAND   V8.B16, V21.B16, V21.B16
    VAND   V8.B16, V24.B16, V24.B16
    VAND   V8.B16, V25.B16, V25.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V22.B16, [V10.B16], V14.B16
    VTBL   V23.B16, [V11.B16], V15.B16
    VTBL   V18.B16, [V10.B16], V10.B16
    VTBL   V19.B16, [V11.B16], V11.B16
    VTBL   V24.B16, [V12.B16], V16.B16
    VTBL   V25.B16, [V13.B16], V17.B16
    VTBL   V20.B16, [V12.B16], V12.B16
    VTBL   V21.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V0.B16, V0.B16
    VEOR   V11.B16, V1.B16, V1.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V22.B16, [V10.B16], V14.B16
    VTBL   V23.B16, [V11.B16], V15.B16
    VTBL   V18.B16, [V10.B16], V10.B16
    VTBL   V19.B16, [V11.B16], V11.B16
    VTBL   V24.B16, [V12.B16], V16.B16
    VTBL   V25.B16, [V13.B16], V17.B16
    VTBL   V20.B16, [V12.B16], V12.B16
    VTBL   V21.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V4.B16, V4.B16
    VEOR   V11.B16, V5.B16, V5.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    // Check for early termination
    CMP    $6, R16
    BEQ    mulNeon_10x2_64Xor_store

    // Load and process 64 bytes from input 6 to 2 outputs
    VLD1.P 32(R11), [V18.B16, V19.B16]
    VLD1.P 32(R11), [V22.B16, V23.B16]
    VUSHR  $4, V18.B16, V20.B16
    VUSHR  $4, V19.B16, V21.B16
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VAND   V8.B16, V18.B16, V18.B16
    VAND   V8.B16, V19.B16, V19.B16
    VAND   V8.B16, V22.B16, V22.B16
    VAND   V8.B16, V23.B16, V23.B16
    VAND   V8.B16, V20.B16, V20.B16
    VAND   V8.B16, V21.B16, V21.B16
    VAND   V8.B16, V24.B16, V24.B16
    VAND   V8.B16, V25.B16, V25.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V22.B16, [V10.B16], V14.B16
    VTBL   V23.B16, [V11.B16], V15.B16
    VTBL   V18.B16, [V10.B16], V10.B16
    VTBL   V19.B16, [V11.B16], V11.B16
    VTBL   V24.B16, [V12.B16], V16.B16
    VTBL   V25.B16, [V13.B16], V17.B16
    VTBL   V20.B16, [V12.B16], V12.B16
    VTBL   V21.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V0.B16, V0.B16
    VEOR   V11.B16, V1.B16, V1.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V22.B16, [V10.B16], V14.B16
    VTBL   V23.B16, [V11.B16], V15.B16
    VTBL   V18.B16, [V10.B16], V10.B16
    VTBL   V19.B16, [V11.B16], V11.B16
    VTBL   V24.B16, [V12.B16], V16.B16
    VTBL   V25.B16, [V13.B16], V17.B16
    VTBL   V20.B16, [V12.B16], V12.B16
    VTBL   V21.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V4.B16, V4.B16
    VEOR   V11.B16, V5.B16, V5.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    // Check for early termination
    CMP    $7, R16
    BEQ    mulNeon_10x2_64Xor_store

    // Load and process 64 bytes from input 7 to 2 outputs
    VLD1.P 32(R12), [V18.B16, V19.B16]
    VLD1.P 32(R12), [V22.B16, V23.B16]
    VUSHR  $4, V18.B16, V20.B16
    VUSHR  $4, V19.B16, V21.B16
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VAND   V8.B16, V18.B16, V18.B16
    VAND   V8.B16, V19.B16, V19.B16
    VAND   V8.B16, V22.B16, V22.B16
    VAND   V8.B16, V23.B16, V23.B16
    VAND   V8.B16, V20.B16, V20.B16
    VAND   V8.B16, V21.B16, V21.B16
    VAND   V8.B16, V24.B16, V24.B16
    VAND   V8.B16, V25.B16, V25.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V22.B16, [V10.B16], V14.B16
    VTBL   V23.B16, [V11.B16], V15.B16
    VTBL   V18.B16, [V10.B16], V10.B16
    VTBL   V19.B16, [V11.B16], V11.B16
    VTBL   V24.B16, [V12.B16], V16.B16
    VTBL   V25.B16, [V13.B16], V17.B16
    VTBL   V20.B16, [V12.B16], V12.B16
    VTBL   V21.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V0.B16, V0.B16
    VEOR   V11.B16, V1.B16, V1.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V22.B16, [V10.B16], V14.B16
    VTBL   V23.B16, [V11.B16], V15.B16
    VTBL   V18.B16, [V10.B16], V10.B16
    VTBL   V19.B16, [V11.B16], V11.B16
    VTBL   V24.B16, [V12.B16], V16.B16
    VTBL   V25.B16, [V13.B16], V17.B16
    VTBL   V20.B16, [V12.B16], V12.B16
    VTBL   V21.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V4.B16, V4.B16
    VEOR   V11.B16, V5.B16, V5.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    // Check for early termination
    CMP    $8, R16
    BEQ    mulNeon_10x2_64Xor_store

    // Load and process 64 bytes from input 8 to 2 outputs
    VLD1.P 32(R13), [V18.B16, V19.B16]
    VLD1.P 32(R13), [V22.B16, V23.B16]
    VUSHR  $4, V18.B16, V20.B16
    VUSHR  $4, V19.B16, V21.B16
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VAND   V8.B16, V18.B16, V18.B16
    VAND   V8.B16, V19.B16, V19.B16
    VAND   V8.B16, V22.B16, V22.B16
    VAND   V8.B16, V23.B16, V23.B16
    VAND   V8.B16, V20.B16, V20.B16
    VAND   V8.B16, V21.B16, V21.B16
    VAND   V8.B16, V24.B16, V24.B16
    VAND   V8.B16, V25.B16, V25.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V22.B16, [V10.B16], V14.B16
    VTBL   V23.B16, [V11.B16], V15.B16
    VTBL   V18.B16, [V10.B16], V10.B16
    VTBL   V19.B16, [V11.B16], V11.B16
    VTBL   V24.B16, [V12.B16], V16.B16
    VTBL   V25.B16, [V13.B16], V17.B16
    VTBL   V20.B16, [V12.B16], V12.B16
    VTBL   V21.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V0.B16, V0.B16
    VEOR   V11.B16, V1.B16, V1.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V22.B16, [V10.B16], V14.B16
    VTBL   V23.B16, [V11.B16], V15.B16
    VTBL   V18.B16, [V10.B16], V10.B16
    VTBL   V19.B16, [V11.B16], V11.B16
    VTBL   V24.B16, [V12.B16], V16.B16
    VTBL   V25.B16, [V13.B16], V17.B16
    VTBL   V20.B16, [V12.B16], V12.B16
    VTBL   V21.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V4.B16, V4.B16
    VEOR   V11.B16, V5.B16, V5.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    // Check for early termination
    CMP    $9, R16
    BEQ    mulNeon_10x2_64Xor_store

    // Load and process 64 bytes from input 9 to 2 outputs
    VLD1.P 32(R3), [V18.B16, V19.B16]
    VLD1.P 32(R3), [V22.B16, V23.B16]
    VUSHR  $4, V18.B16, V20.B16
    VUSHR  $4, V19.B16, V21.B16
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VAND   V8.B16, V18.B16, V18.B16
    VAND   V8.B16, V19.B16, V19.B16
    VAND   V8.B16, V22.B16, V22.B16
    VAND   V8.B16, V23.B16, V23.B16
    VAND   V8.B16, V20.B16, V20.B16
    VAND   V8.B16, V21.B16, V21.B16
    VAND   V8.B16, V24.B16, V24.B16
    VAND   V8.B16, V25.B16, V25.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V22.B16, [V10.B16], V14.B16
    VTBL   V23.B16, [V11.B16], V15.B16
    VTBL   V18.B16, [V10.B16], V10.B16
    VTBL   V19.B16, [V11.B16], V11.B16
    VTBL   V24.B16, [V12.B16], V16.B16
    VTBL   V25.B16, [V13.B16], V17.B16
    VTBL   V20.B16, [V12.B16], V12.B16
    VTBL   V21.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V0.B16, V0.B16
    VEOR   V11.B16, V1.B16, V1.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V22.B16, [V10.B16], V14.B16
    VTBL   V23.B16, [V11.B16], V15.B16
    VTBL   V18.B16, [V10.B16], V10.B16
    VTBL   V19.B16, [V11.B16], V11.B16
    VTBL   V24.B16, [V12.B16], V16.B16
    VTBL   V25.B16, [V13.B16], V17.B16
    VTBL   V20.B16, [V12.B16], V12.B16
    VTBL   V21.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V4.B16, V4.B16
    VEOR   V11.B16, V5.B16, V5.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16

mulNeon_10x2_64Xor_store:
    // Store 2 outputs
    SUB    $64, R15
    VST1.P [V0.D2, V1.D2], 32(R15)
    VST1.P [V2.D2, V3.D2], 32(R15)
    SUB    $64, R14
    VST1.P [V4.D2, V5.D2], 32(R14)
    VST1.P [V6.D2, V7.D2], 32(R14)

    // Prepare for next loop
    SUBS $1, R0
    BNE  mulNeon_10x2_64Xor_loop

mulNeon_10x2_64Xor_end:
    RET

// func mulNeon_10x3_64(matrix []byte, in [][]byte, out [][]byte, start int, n int)
// Requires: NEON
TEXT Â·mulNeon_10x3_64(SB), $8-88
    // Loading no tables to registers
    // Destination kept in GP registers
    // Full registers estimated 130 YMM used
    MOVD n+80(FP), R0
    LSR  $6, R0
    TST  R0, R0
    BEQ    mulNeon_10x3_64_end
    MOVD in_base+24(FP), R0
    MOVD (R0), R3
    MOVD 24(R0), R1
    MOVD 48(R0), R4
    MOVD 72(R0), R5
    MOVD 96(R0), R8
    MOVD 120(R0), R9
    MOVD 144(R0), R10
    MOVD 168(R0), R11
    MOVD 192(R0), R12
    MOVD 216(R0), R0
    MOVD out_base+48(FP), R13
    MOVD (R13), R14
    MOVD 24(R13), R15
    MOVD 48(R13), R13
    MOVD start+72(FP), R6

    // Add start offset to output
    ADD    R6, R14
    ADD    R6, R15
    ADD    R6, R13

    // Add start offset to input
    ADD    R6, R3
    ADD    R6, R1
    ADD    R6, R4
    ADD    R6, R5
    ADD    R6, R8
    ADD    R6, R9
    ADD    R6, R10
    ADD    R6, R11
    ADD    R6, R12
    ADD    R6, R0
    MOVD   $15, R6
    VMOV   R6, V12.B[0]
    VDUP   V12.B[0], V12.B16

    // Reload length to save a register
    MOVD n+80(FP), R6
    LSR  $6, R6

    // Load number of input shards
    MOVD   in_len+32(FP), R16

mulNeon_10x3_64_loop:
    MOVD matrix_base+0(FP), R2
    // Load and process 64 bytes from input 0 to 3 outputs
    VLD1.P 32(R3), [V22.B16, V23.B16]
    VLD1.P 32(R3), [V26.B16, V27.B16]
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VUSHR  $4, V26.B16, V28.B16
    VUSHR  $4, V27.B16, V29.B16
    VAND   V12.B16, V22.B16, V22.B16
    VAND   V12.B16, V23.B16, V23.B16
    VAND   V12.B16, V26.B16, V26.B16
    VAND   V12.B16, V27.B16, V27.B16
    VAND   V12.B16, V24.B16, V24.B16
    VAND   V12.B16, V25.B16, V25.B16
    VAND   V12.B16, V28.B16, V28.B16
    VAND   V12.B16, V29.B16, V29.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V16.B16, V0.B16
    VEOR   V15.B16, V17.B16, V1.B16
    VEOR   V18.B16, V20.B16, V2.B16
    VEOR   V19.B16, V21.B16, V3.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V16.B16, V4.B16
    VEOR   V15.B16, V17.B16, V5.B16
    VEOR   V18.B16, V20.B16, V6.B16
    VEOR   V19.B16, V21.B16, V7.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V16.B16, V8.B16
    VEOR   V15.B16, V17.B16, V9.B16
    VEOR   V18.B16, V20.B16, V10.B16
    VEOR   V19.B16, V21.B16, V11.B16
    // Check for early termination
    CMP    $1, R16
    BEQ    mulNeon_10x3_64_store

    // Load and process 64 bytes from input 1 to 3 outputs
    VLD1.P 32(R1), [V22.B16, V23.B16]
    VLD1.P 32(R1), [V26.B16, V27.B16]
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VUSHR  $4, V26.B16, V28.B16
    VUSHR  $4, V27.B16, V29.B16
    VAND   V12.B16, V22.B16, V22.B16
    VAND   V12.B16, V23.B16, V23.B16
    VAND   V12.B16, V26.B16, V26.B16
    VAND   V12.B16, V27.B16, V27.B16
    VAND   V12.B16, V24.B16, V24.B16
    VAND   V12.B16, V25.B16, V25.B16
    VAND   V12.B16, V28.B16, V28.B16
    VAND   V12.B16, V29.B16, V29.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    // Check for early termination
    CMP    $2, R16
    BEQ    mulNeon_10x3_64_store

    // Load and process 64 bytes from input 2 to 3 outputs
    VLD1.P 32(R4), [V22.B16, V23.B16]
    VLD1.P 32(R4), [V26.B16, V27.B16]
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VUSHR  $4, V26.B16, V28.B16
    VUSHR  $4, V27.B16, V29.B16
    VAND   V12.B16, V22.B16, V22.B16
    VAND   V12.B16, V23.B16, V23.B16
    VAND   V12.B16, V26.B16, V26.B16
    VAND   V12.B16, V27.B16, V27.B16
    VAND   V12.B16, V24.B16, V24.B16
    VAND   V12.B16, V25.B16, V25.B16
    VAND   V12.B16, V28.B16, V28.B16
    VAND   V12.B16, V29.B16, V29.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    // Check for early termination
    CMP    $3, R16
    BEQ    mulNeon_10x3_64_store

    // Load and process 64 bytes from input 3 to 3 outputs
    VLD1.P 32(R5), [V22.B16, V23.B16]
    VLD1.P 32(R5), [V26.B16, V27.B16]
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VUSHR  $4, V26.B16, V28.B16
    VUSHR  $4, V27.B16, V29.B16
    VAND   V12.B16, V22.B16, V22.B16
    VAND   V12.B16, V23.B16, V23.B16
    VAND   V12.B16, V26.B16, V26.B16
    VAND   V12.B16, V27.B16, V27.B16
    VAND   V12.B16, V24.B16, V24.B16
    VAND   V12.B16, V25.B16, V25.B16
    VAND   V12.B16, V28.B16, V28.B16
    VAND   V12.B16, V29.B16, V29.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    // Check for early termination
    CMP    $4, R16
    BEQ    mulNeon_10x3_64_store

    // Load and process 64 bytes from input 4 to 3 outputs
    VLD1.P 32(R8), [V22.B16, V23.B16]
    VLD1.P 32(R8), [V26.B16, V27.B16]
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VUSHR  $4, V26.B16, V28.B16
    VUSHR  $4, V27.B16, V29.B16
    VAND   V12.B16, V22.B16, V22.B16
    VAND   V12.B16, V23.B16, V23.B16
    VAND   V12.B16, V26.B16, V26.B16
    VAND   V12.B16, V27.B16, V27.B16
    VAND   V12.B16, V24.B16, V24.B16
    VAND   V12.B16, V25.B16, V25.B16
    VAND   V12.B16, V28.B16, V28.B16
    VAND   V12.B16, V29.B16, V29.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    // Check for early termination
    CMP    $5, R16
    BEQ    mulNeon_10x3_64_store

    // Load and process 64 bytes from input 5 to 3 outputs
    VLD1.P 32(R9), [V22.B16, V23.B16]
    VLD1.P 32(R9), [V26.B16, V27.B16]
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VUSHR  $4, V26.B16, V28.B16
    VUSHR  $4, V27.B16, V29.B16
    VAND   V12.B16, V22.B16, V22.B16
    VAND   V12.B16, V23.B16, V23.B16
    VAND   V12.B16, V26.B16, V26.B16
    VAND   V12.B16, V27.B16, V27.B16
    VAND   V12.B16, V24.B16, V24.B16
    VAND   V12.B16, V25.B16, V25.B16
    VAND   V12.B16, V28.B16, V28.B16
    VAND   V12.B16, V29.B16, V29.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    // Check for early termination
    CMP    $6, R16
    BEQ    mulNeon_10x3_64_store

    // Load and process 64 bytes from input 6 to 3 outputs
    VLD1.P 32(R10), [V22.B16, V23.B16]
    VLD1.P 32(R10), [V26.B16, V27.B16]
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VUSHR  $4, V26.B16, V28.B16
    VUSHR  $4, V27.B16, V29.B16
    VAND   V12.B16, V22.B16, V22.B16
    VAND   V12.B16, V23.B16, V23.B16
    VAND   V12.B16, V26.B16, V26.B16
    VAND   V12.B16, V27.B16, V27.B16
    VAND   V12.B16, V24.B16, V24.B16
    VAND   V12.B16, V25.B16, V25.B16
    VAND   V12.B16, V28.B16, V28.B16
    VAND   V12.B16, V29.B16, V29.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    // Check for early termination
    CMP    $7, R16
    BEQ    mulNeon_10x3_64_store

    // Load and process 64 bytes from input 7 to 3 outputs
    VLD1.P 32(R11), [V22.B16, V23.B16]
    VLD1.P 32(R11), [V26.B16, V27.B16]
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VUSHR  $4, V26.B16, V28.B16
    VUSHR  $4, V27.B16, V29.B16
    VAND   V12.B16, V22.B16, V22.B16
    VAND   V12.B16, V23.B16, V23.B16
    VAND   V12.B16, V26.B16, V26.B16
    VAND   V12.B16, V27.B16, V27.B16
    VAND   V12.B16, V24.B16, V24.B16
    VAND   V12.B16, V25.B16, V25.B16
    VAND   V12.B16, V28.B16, V28.B16
    VAND   V12.B16, V29.B16, V29.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    // Check for early termination
    CMP    $8, R16
    BEQ    mulNeon_10x3_64_store

    // Load and process 64 bytes from input 8 to 3 outputs
    VLD1.P 32(R12), [V22.B16, V23.B16]
    VLD1.P 32(R12), [V26.B16, V27.B16]
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VUSHR  $4, V26.B16, V28.B16
    VUSHR  $4, V27.B16, V29.B16
    VAND   V12.B16, V22.B16, V22.B16
    VAND   V12.B16, V23.B16, V23.B16
    VAND   V12.B16, V26.B16, V26.B16
    VAND   V12.B16, V27.B16, V27.B16
    VAND   V12.B16, V24.B16, V24.B16
    VAND   V12.B16, V25.B16, V25.B16
    VAND   V12.B16, V28.B16, V28.B16
    VAND   V12.B16, V29.B16, V29.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    // Check for early termination
    CMP    $9, R16
    BEQ    mulNeon_10x3_64_store

    // Load and process 64 bytes from input 9 to 3 outputs
    VLD1.P 32(R0), [V22.B16, V23.B16]
    VLD1.P 32(R0), [V26.B16, V27.B16]
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VUSHR  $4, V26.B16, V28.B16
    VUSHR  $4, V27.B16, V29.B16
    VAND   V12.B16, V22.B16, V22.B16
    VAND   V12.B16, V23.B16, V23.B16
    VAND   V12.B16, V26.B16, V26.B16
    VAND   V12.B16, V27.B16, V27.B16
    VAND   V12.B16, V24.B16, V24.B16
    VAND   V12.B16, V25.B16, V25.B16
    VAND   V12.B16, V28.B16, V28.B16
    VAND   V12.B16, V29.B16, V29.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16

mulNeon_10x3_64_store:
    // Store 3 outputs
    VST1.P [V0.D2, V1.D2], 32(R14)
    VST1.P [V2.D2, V3.D2], 32(R14)
    VST1.P [V4.D2, V5.D2], 32(R15)
    VST1.P [V6.D2, V7.D2], 32(R15)
    VST1.P [V8.D2, V9.D2], 32(R13)
    VST1.P [V10.D2, V11.D2], 32(R13)

    // Prepare for next loop
    SUBS $1, R6
    BNE  mulNeon_10x3_64_loop

mulNeon_10x3_64_end:
    RET

// func mulNeon_10x3_64Xor(matrix []byte, in [][]byte, out [][]byte, start int, n int)
// Requires: NEON
TEXT Â·mulNeon_10x3_64Xor(SB), $8-88
    // Loading no tables to registers
    // Destination kept in GP registers
    // Full registers estimated 130 YMM used
    MOVD n+80(FP), R0
    LSR  $6, R0
    TST  R0, R0
    BEQ    mulNeon_10x3_64Xor_end
    MOVD in_base+24(FP), R0
    MOVD (R0), R3
    MOVD 24(R0), R1
    MOVD 48(R0), R4
    MOVD 72(R0), R5
    MOVD 96(R0), R8
    MOVD 120(R0), R9
    MOVD 144(R0), R10
    MOVD 168(R0), R11
    MOVD 192(R0), R12
    MOVD 216(R0), R0
    MOVD out_base+48(FP), R13
    MOVD (R13), R14
    MOVD 24(R13), R15
    MOVD 48(R13), R13
    MOVD start+72(FP), R6

    // Add start offset to output
    ADD    R6, R14
    ADD    R6, R15
    ADD    R6, R13

    // Add start offset to input
    ADD    R6, R3
    ADD    R6, R1
    ADD    R6, R4
    ADD    R6, R5
    ADD    R6, R8
    ADD    R6, R9
    ADD    R6, R10
    ADD    R6, R11
    ADD    R6, R12
    ADD    R6, R0
    MOVD   $15, R6
    VMOV   R6, V12.B[0]
    VDUP   V12.B[0], V12.B16

    // Reload length to save a register
    MOVD n+80(FP), R6
    LSR  $6, R6

    // Load number of input shards
    MOVD   in_len+32(FP), R16

mulNeon_10x3_64Xor_loop:
    MOVD matrix_base+0(FP), R2
    // Load 3 outputs
    VLD1.P 32(R14), [V0.B16, V1.B16]
    VLD1.P 32(R14), [V2.B16, V3.B16]
    VLD1.P 32(R15), [V4.B16, V5.B16]
    VLD1.P 32(R15), [V6.B16, V7.B16]
    VLD1.P 32(R13), [V8.B16, V9.B16]
    VLD1.P 32(R13), [V10.B16, V11.B16]

    // Load and process 64 bytes from input 0 to 3 outputs
    VLD1.P 32(R3), [V22.B16, V23.B16]
    VLD1.P 32(R3), [V26.B16, V27.B16]
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VUSHR  $4, V26.B16, V28.B16
    VUSHR  $4, V27.B16, V29.B16
    VAND   V12.B16, V22.B16, V22.B16
    VAND   V12.B16, V23.B16, V23.B16
    VAND   V12.B16, V26.B16, V26.B16
    VAND   V12.B16, V27.B16, V27.B16
    VAND   V12.B16, V24.B16, V24.B16
    VAND   V12.B16, V25.B16, V25.B16
    VAND   V12.B16, V28.B16, V28.B16
    VAND   V12.B16, V29.B16, V29.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    // Check for early termination
    CMP    $1, R16
    BEQ    mulNeon_10x3_64Xor_store

    // Load and process 64 bytes from input 1 to 3 outputs
    VLD1.P 32(R1), [V22.B16, V23.B16]
    VLD1.P 32(R1), [V26.B16, V27.B16]
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VUSHR  $4, V26.B16, V28.B16
    VUSHR  $4, V27.B16, V29.B16
    VAND   V12.B16, V22.B16, V22.B16
    VAND   V12.B16, V23.B16, V23.B16
    VAND   V12.B16, V26.B16, V26.B16
    VAND   V12.B16, V27.B16, V27.B16
    VAND   V12.B16, V24.B16, V24.B16
    VAND   V12.B16, V25.B16, V25.B16
    VAND   V12.B16, V28.B16, V28.B16
    VAND   V12.B16, V29.B16, V29.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    // Check for early termination
    CMP    $2, R16
    BEQ    mulNeon_10x3_64Xor_store

    // Load and process 64 bytes from input 2 to 3 outputs
    VLD1.P 32(R4), [V22.B16, V23.B16]
    VLD1.P 32(R4), [V26.B16, V27.B16]
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VUSHR  $4, V26.B16, V28.B16
    VUSHR  $4, V27.B16, V29.B16
    VAND   V12.B16, V22.B16, V22.B16
    VAND   V12.B16, V23.B16, V23.B16
    VAND   V12.B16, V26.B16, V26.B16
    VAND   V12.B16, V27.B16, V27.B16
    VAND   V12.B16, V24.B16, V24.B16
    VAND   V12.B16, V25.B16, V25.B16
    VAND   V12.B16, V28.B16, V28.B16
    VAND   V12.B16, V29.B16, V29.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    // Check for early termination
    CMP    $3, R16
    BEQ    mulNeon_10x3_64Xor_store

    // Load and process 64 bytes from input 3 to 3 outputs
    VLD1.P 32(R5), [V22.B16, V23.B16]
    VLD1.P 32(R5), [V26.B16, V27.B16]
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VUSHR  $4, V26.B16, V28.B16
    VUSHR  $4, V27.B16, V29.B16
    VAND   V12.B16, V22.B16, V22.B16
    VAND   V12.B16, V23.B16, V23.B16
    VAND   V12.B16, V26.B16, V26.B16
    VAND   V12.B16, V27.B16, V27.B16
    VAND   V12.B16, V24.B16, V24.B16
    VAND   V12.B16, V25.B16, V25.B16
    VAND   V12.B16, V28.B16, V28.B16
    VAND   V12.B16, V29.B16, V29.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    // Check for early termination
    CMP    $4, R16
    BEQ    mulNeon_10x3_64Xor_store

    // Load and process 64 bytes from input 4 to 3 outputs
    VLD1.P 32(R8), [V22.B16, V23.B16]
    VLD1.P 32(R8), [V26.B16, V27.B16]
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VUSHR  $4, V26.B16, V28.B16
    VUSHR  $4, V27.B16, V29.B16
    VAND   V12.B16, V22.B16, V22.B16
    VAND   V12.B16, V23.B16, V23.B16
    VAND   V12.B16, V26.B16, V26.B16
    VAND   V12.B16, V27.B16, V27.B16
    VAND   V12.B16, V24.B16, V24.B16
    VAND   V12.B16, V25.B16, V25.B16
    VAND   V12.B16, V28.B16, V28.B16
    VAND   V12.B16, V29.B16, V29.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    // Check for early termination
    CMP    $5, R16
    BEQ    mulNeon_10x3_64Xor_store

    // Load and process 64 bytes from input 5 to 3 outputs
    VLD1.P 32(R9), [V22.B16, V23.B16]
    VLD1.P 32(R9), [V26.B16, V27.B16]
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VUSHR  $4, V26.B16, V28.B16
    VUSHR  $4, V27.B16, V29.B16
    VAND   V12.B16, V22.B16, V22.B16
    VAND   V12.B16, V23.B16, V23.B16
    VAND   V12.B16, V26.B16, V26.B16
    VAND   V12.B16, V27.B16, V27.B16
    VAND   V12.B16, V24.B16, V24.B16
    VAND   V12.B16, V25.B16, V25.B16
    VAND   V12.B16, V28.B16, V28.B16
    VAND   V12.B16, V29.B16, V29.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    // Check for early termination
    CMP    $6, R16
    BEQ    mulNeon_10x3_64Xor_store

    // Load and process 64 bytes from input 6 to 3 outputs
    VLD1.P 32(R10), [V22.B16, V23.B16]
    VLD1.P 32(R10), [V26.B16, V27.B16]
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VUSHR  $4, V26.B16, V28.B16
    VUSHR  $4, V27.B16, V29.B16
    VAND   V12.B16, V22.B16, V22.B16
    VAND   V12.B16, V23.B16, V23.B16
    VAND   V12.B16, V26.B16, V26.B16
    VAND   V12.B16, V27.B16, V27.B16
    VAND   V12.B16, V24.B16, V24.B16
    VAND   V12.B16, V25.B16, V25.B16
    VAND   V12.B16, V28.B16, V28.B16
    VAND   V12.B16, V29.B16, V29.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    // Check for early termination
    CMP    $7, R16
    BEQ    mulNeon_10x3_64Xor_store

    // Load and process 64 bytes from input 7 to 3 outputs
    VLD1.P 32(R11), [V22.B16, V23.B16]
    VLD1.P 32(R11), [V26.B16, V27.B16]
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VUSHR  $4, V26.B16, V28.B16
    VUSHR  $4, V27.B16, V29.B16
    VAND   V12.B16, V22.B16, V22.B16
    VAND   V12.B16, V23.B16, V23.B16
    VAND   V12.B16, V26.B16, V26.B16
    VAND   V12.B16, V27.B16, V27.B16
    VAND   V12.B16, V24.B16, V24.B16
    VAND   V12.B16, V25.B16, V25.B16
    VAND   V12.B16, V28.B16, V28.B16
    VAND   V12.B16, V29.B16, V29.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    // Check for early termination
    CMP    $8, R16
    BEQ    mulNeon_10x3_64Xor_store

    // Load and process 64 bytes from input 8 to 3 outputs
    VLD1.P 32(R12), [V22.B16, V23.B16]
    VLD1.P 32(R12), [V26.B16, V27.B16]
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VUSHR  $4, V26.B16, V28.B16
    VUSHR  $4, V27.B16, V29.B16
    VAND   V12.B16, V22.B16, V22.B16
    VAND   V12.B16, V23.B16, V23.B16
    VAND   V12.B16, V26.B16, V26.B16
    VAND   V12.B16, V27.B16, V27.B16
    VAND   V12.B16, V24.B16, V24.B16
    VAND   V12.B16, V25.B16, V25.B16
    VAND   V12.B16, V28.B16, V28.B16
    VAND   V12.B16, V29.B16, V29.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    // Check for early termination
    CMP    $9, R16
    BEQ    mulNeon_10x3_64Xor_store

    // Load and process 64 bytes from input 9 to 3 outputs
    VLD1.P 32(R0), [V22.B16, V23.B16]
    VLD1.P 32(R0), [V26.B16, V27.B16]
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VUSHR  $4, V26.B16, V28.B16
    VUSHR  $4, V27.B16, V29.B16
    VAND   V12.B16, V22.B16, V22.B16
    VAND   V12.B16, V23.B16, V23.B16
    VAND   V12.B16, V26.B16, V26.B16
    VAND   V12.B16, V27.B16, V27.B16
    VAND   V12.B16, V24.B16, V24.B16
    VAND   V12.B16, V25.B16, V25.B16
    VAND   V12.B16, V28.B16, V28.B16
    VAND   V12.B16, V29.B16, V29.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V26.B16, [V14.B16], V18.B16
    VTBL   V27.B16, [V15.B16], V19.B16
    VTBL   V22.B16, [V14.B16], V14.B16
    VTBL   V23.B16, [V15.B16], V15.B16
    VTBL   V28.B16, [V16.B16], V20.B16
    VTBL   V29.B16, [V17.B16], V21.B16
    VTBL   V24.B16, [V16.B16], V16.B16
    VTBL   V25.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16

mulNeon_10x3_64Xor_store:
    // Store 3 outputs
    SUB    $64, R14
    VST1.P [V0.D2, V1.D2], 32(R14)
    VST1.P [V2.D2, V3.D2], 32(R14)
    SUB    $64, R15
    VST1.P [V4.D2, V5.D2], 32(R15)
    VST1.P [V6.D2, V7.D2], 32(R15)
    SUB    $64, R13
    VST1.P [V8.D2, V9.D2], 32(R13)
    VST1.P [V10.D2, V11.D2], 32(R13)

    // Prepare for next loop
    SUBS $1, R6
    BNE  mulNeon_10x3_64Xor_loop

mulNeon_10x3_64Xor_end:
    RET

// func mulNeon_10x4(matrix []byte, in [][]byte, out [][]byte, start int, n int)
// Requires: NEON
TEXT Â·mulNeon_10x4(SB), NOSPLIT, $8-88
    // Loading no tables to registers
    // Destination kept on stack
    // Full registers estimated 89 YMM used
    MOVD n+80(FP), R0
    LSR  $5, R0
    TST  R0, R0
    BEQ    mulNeon_10x4_end
    MOVD in_base+24(FP), R3
    MOVD (R3), R1
    MOVD 24(R3), R4
    MOVD 48(R3), R5
    MOVD 72(R3), R8
    MOVD 96(R3), R9
    MOVD 120(R3), R10
    MOVD 144(R3), R11
    MOVD 168(R3), R12
    MOVD 192(R3), R13
    MOVD 216(R3), R3
    MOVD out_base+48(FP), R14
    MOVD start+72(FP), R15

    // Add start offset to input
    ADD    R15, R1
    ADD    R15, R4
    ADD    R15, R5
    ADD    R15, R8
    ADD    R15, R9
    ADD    R15, R10
    ADD    R15, R11
    ADD    R15, R12
    ADD    R15, R13
    ADD    R15, R3
    LSR  $3, R15
    MOVD   $15, R6
    VMOV   R6, V8.B[0]
    VDUP   V8.B[0], V8.B16

    // Load number of input shards
    MOVD   in_len+32(FP), R16

mulNeon_10x4_loop:
    MOVD matrix_base+0(FP), R2
    // Load and process 32 bytes from input 0 to 4 outputs
    VLD1.P 32(R1), [V14.B16, V15.B16]
    VUSHR  $4, V14.B16, V16.B16
    VUSHR  $4, V15.B16, V17.B16
    VAND   V8.B16, V14.B16, V14.B16
    VAND   V8.B16, V15.B16, V15.B16
    VAND   V8.B16, V16.B16, V16.B16
    VAND   V8.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V12.B16, V0.B16
    VEOR   V11.B16, V13.B16, V1.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V12.B16, V2.B16
    VEOR   V11.B16, V13.B16, V3.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V12.B16, V4.B16
    VEOR   V11.B16, V13.B16, V5.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V12.B16, V6.B16
    VEOR   V11.B16, V13.B16, V7.B16
    // Check for early termination
    CMP    $1, R16
    BEQ    mulNeon_10x4_store

    // Load and process 32 bytes from input 1 to 4 outputs
    VLD1.P 32(R4), [V14.B16, V15.B16]
    VUSHR  $4, V14.B16, V16.B16
    VUSHR  $4, V15.B16, V17.B16
    VAND   V8.B16, V14.B16, V14.B16
    VAND   V8.B16, V15.B16, V15.B16
    VAND   V8.B16, V16.B16, V16.B16
    VAND   V8.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V0.B16, V0.B16
    VEOR   V11.B16, V1.B16, V1.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V2.B16, V2.B16
    VEOR   V11.B16, V3.B16, V3.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V4.B16, V4.B16
    VEOR   V11.B16, V5.B16, V5.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V6.B16, V6.B16
    VEOR   V11.B16, V7.B16, V7.B16
    VEOR   V12.B16, V6.B16, V6.B16
    VEOR   V13.B16, V7.B16, V7.B16
    // Check for early termination
    CMP    $2, R16
    BEQ    mulNeon_10x4_store

    // Load and process 32 bytes from input 2 to 4 outputs
    VLD1.P 32(R5), [V14.B16, V15.B16]
    VUSHR  $4, V14.B16, V16.B16
    VUSHR  $4, V15.B16, V17.B16
    VAND   V8.B16, V14.B16, V14.B16
    VAND   V8.B16, V15.B16, V15.B16
    VAND   V8.B16, V16.B16, V16.B16
    VAND   V8.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V0.B16, V0.B16
    VEOR   V11.B16, V1.B16, V1.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V2.B16, V2.B16
    VEOR   V11.B16, V3.B16, V3.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V4.B16, V4.B16
    VEOR   V11.B16, V5.B16, V5.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V6.B16, V6.B16
    VEOR   V11.B16, V7.B16, V7.B16
    VEOR   V12.B16, V6.B16, V6.B16
    VEOR   V13.B16, V7.B16, V7.B16
    // Check for early termination
    CMP    $3, R16
    BEQ    mulNeon_10x4_store

    // Load and process 32 bytes from input 3 to 4 outputs
    VLD1.P 32(R8), [V14.B16, V15.B16]
    VUSHR  $4, V14.B16, V16.B16
    VUSHR  $4, V15.B16, V17.B16
    VAND   V8.B16, V14.B16, V14.B16
    VAND   V8.B16, V15.B16, V15.B16
    VAND   V8.B16, V16.B16, V16.B16
    VAND   V8.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V0.B16, V0.B16
    VEOR   V11.B16, V1.B16, V1.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V2.B16, V2.B16
    VEOR   V11.B16, V3.B16, V3.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V4.B16, V4.B16
    VEOR   V11.B16, V5.B16, V5.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V6.B16, V6.B16
    VEOR   V11.B16, V7.B16, V7.B16
    VEOR   V12.B16, V6.B16, V6.B16
    VEOR   V13.B16, V7.B16, V7.B16
    // Check for early termination
    CMP    $4, R16
    BEQ    mulNeon_10x4_store

    // Load and process 32 bytes from input 4 to 4 outputs
    VLD1.P 32(R9), [V14.B16, V15.B16]
    VUSHR  $4, V14.B16, V16.B16
    VUSHR  $4, V15.B16, V17.B16
    VAND   V8.B16, V14.B16, V14.B16
    VAND   V8.B16, V15.B16, V15.B16
    VAND   V8.B16, V16.B16, V16.B16
    VAND   V8.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V0.B16, V0.B16
    VEOR   V11.B16, V1.B16, V1.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V2.B16, V2.B16
    VEOR   V11.B16, V3.B16, V3.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V4.B16, V4.B16
    VEOR   V11.B16, V5.B16, V5.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V6.B16, V6.B16
    VEOR   V11.B16, V7.B16, V7.B16
    VEOR   V12.B16, V6.B16, V6.B16
    VEOR   V13.B16, V7.B16, V7.B16
    // Check for early termination
    CMP    $5, R16
    BEQ    mulNeon_10x4_store

    // Load and process 32 bytes from input 5 to 4 outputs
    VLD1.P 32(R10), [V14.B16, V15.B16]
    VUSHR  $4, V14.B16, V16.B16
    VUSHR  $4, V15.B16, V17.B16
    VAND   V8.B16, V14.B16, V14.B16
    VAND   V8.B16, V15.B16, V15.B16
    VAND   V8.B16, V16.B16, V16.B16
    VAND   V8.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V0.B16, V0.B16
    VEOR   V11.B16, V1.B16, V1.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V2.B16, V2.B16
    VEOR   V11.B16, V3.B16, V3.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V4.B16, V4.B16
    VEOR   V11.B16, V5.B16, V5.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V6.B16, V6.B16
    VEOR   V11.B16, V7.B16, V7.B16
    VEOR   V12.B16, V6.B16, V6.B16
    VEOR   V13.B16, V7.B16, V7.B16
    // Check for early termination
    CMP    $6, R16
    BEQ    mulNeon_10x4_store

    // Load and process 32 bytes from input 6 to 4 outputs
    VLD1.P 32(R11), [V14.B16, V15.B16]
    VUSHR  $4, V14.B16, V16.B16
    VUSHR  $4, V15.B16, V17.B16
    VAND   V8.B16, V14.B16, V14.B16
    VAND   V8.B16, V15.B16, V15.B16
    VAND   V8.B16, V16.B16, V16.B16
    VAND   V8.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V0.B16, V0.B16
    VEOR   V11.B16, V1.B16, V1.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V2.B16, V2.B16
    VEOR   V11.B16, V3.B16, V3.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V4.B16, V4.B16
    VEOR   V11.B16, V5.B16, V5.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V6.B16, V6.B16
    VEOR   V11.B16, V7.B16, V7.B16
    VEOR   V12.B16, V6.B16, V6.B16
    VEOR   V13.B16, V7.B16, V7.B16
    // Check for early termination
    CMP    $7, R16
    BEQ    mulNeon_10x4_store

    // Load and process 32 bytes from input 7 to 4 outputs
    VLD1.P 32(R12), [V14.B16, V15.B16]
    VUSHR  $4, V14.B16, V16.B16
    VUSHR  $4, V15.B16, V17.B16
    VAND   V8.B16, V14.B16, V14.B16
    VAND   V8.B16, V15.B16, V15.B16
    VAND   V8.B16, V16.B16, V16.B16
    VAND   V8.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V0.B16, V0.B16
    VEOR   V11.B16, V1.B16, V1.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V2.B16, V2.B16
    VEOR   V11.B16, V3.B16, V3.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V4.B16, V4.B16
    VEOR   V11.B16, V5.B16, V5.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V6.B16, V6.B16
    VEOR   V11.B16, V7.B16, V7.B16
    VEOR   V12.B16, V6.B16, V6.B16
    VEOR   V13.B16, V7.B16, V7.B16
    // Check for early termination
    CMP    $8, R16
    BEQ    mulNeon_10x4_store

    // Load and process 32 bytes from input 8 to 4 outputs
    VLD1.P 32(R13), [V14.B16, V15.B16]
    VUSHR  $4, V14.B16, V16.B16
    VUSHR  $4, V15.B16, V17.B16
    VAND   V8.B16, V14.B16, V14.B16
    VAND   V8.B16, V15.B16, V15.B16
    VAND   V8.B16, V16.B16, V16.B16
    VAND   V8.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V0.B16, V0.B16
    VEOR   V11.B16, V1.B16, V1.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V2.B16, V2.B16
    VEOR   V11.B16, V3.B16, V3.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V4.B16, V4.B16
    VEOR   V11.B16, V5.B16, V5.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V6.B16, V6.B16
    VEOR   V11.B16, V7.B16, V7.B16
    VEOR   V12.B16, V6.B16, V6.B16
    VEOR   V13.B16, V7.B16, V7.B16
    // Check for early termination
    CMP    $9, R16
    BEQ    mulNeon_10x4_store

    // Load and process 32 bytes from input 9 to 4 outputs
    VLD1.P 32(R3), [V14.B16, V15.B16]
    VUSHR  $4, V14.B16, V16.B16
    VUSHR  $4, V15.B16, V17.B16
    VAND   V8.B16, V14.B16, V14.B16
    VAND   V8.B16, V15.B16, V15.B16
    VAND   V8.B16, V16.B16, V16.B16
    VAND   V8.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V0.B16, V0.B16
    VEOR   V11.B16, V1.B16, V1.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V2.B16, V2.B16
    VEOR   V11.B16, V3.B16, V3.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V4.B16, V4.B16
    VEOR   V11.B16, V5.B16, V5.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V6.B16, V6.B16
    VEOR   V11.B16, V7.B16, V7.B16
    VEOR   V12.B16, V6.B16, V6.B16
    VEOR   V13.B16, V7.B16, V7.B16

mulNeon_10x4_store:
    // Store 4 outputs
    MOVD (R14), R6
    ADD    R15<<3, R6
    VST1   [V0.D2, V1.D2], (R6)
    MOVD 24(R14), R6
    ADD    R15<<3, R6
    VST1   [V2.D2, V3.D2], (R6)
    MOVD 48(R14), R6
    ADD    R15<<3, R6
    VST1   [V4.D2, V5.D2], (R6)
    MOVD 72(R14), R6
    ADD    R15<<3, R6
    VST1   [V6.D2, V7.D2], (R6)

    // Prepare for next loop
    ADD    $4, R15
    SUBS $1, R0
    BNE  mulNeon_10x4_loop

mulNeon_10x4_end:
    RET

// func mulNeon_10x4Xor(matrix []byte, in [][]byte, out [][]byte, start int, n int)
// Requires: NEON
TEXT Â·mulNeon_10x4Xor(SB), NOSPLIT, $8-88
    // Loading no tables to registers
    // Destination kept on stack
    // Full registers estimated 89 YMM used
    MOVD n+80(FP), R0
    LSR  $5, R0
    TST  R0, R0
    BEQ    mulNeon_10x4Xor_end
    MOVD in_base+24(FP), R3
    MOVD (R3), R1
    MOVD 24(R3), R4
    MOVD 48(R3), R5
    MOVD 72(R3), R8
    MOVD 96(R3), R9
    MOVD 120(R3), R10
    MOVD 144(R3), R11
    MOVD 168(R3), R12
    MOVD 192(R3), R13
    MOVD 216(R3), R3
    MOVD out_base+48(FP), R14
    MOVD start+72(FP), R15

    // Add start offset to input
    ADD    R15, R1
    ADD    R15, R4
    ADD    R15, R5
    ADD    R15, R8
    ADD    R15, R9
    ADD    R15, R10
    ADD    R15, R11
    ADD    R15, R12
    ADD    R15, R13
    ADD    R15, R3
    LSR  $3, R15
    MOVD   $15, R6
    VMOV   R6, V8.B[0]
    VDUP   V8.B[0], V8.B16

    // Load number of input shards
    MOVD   in_len+32(FP), R16

mulNeon_10x4Xor_loop:
    MOVD matrix_base+0(FP), R2
    // Load and process 32 bytes from input 0 to 4 outputs
    VLD1.P 32(R1), [V14.B16, V15.B16]
    VUSHR  $4, V14.B16, V16.B16
    VUSHR  $4, V15.B16, V17.B16
    VAND   V8.B16, V14.B16, V14.B16
    VAND   V8.B16, V15.B16, V15.B16
    VAND   V8.B16, V16.B16, V16.B16
    VAND   V8.B16, V17.B16, V17.B16
    MOVD (R14), R6
    ADD    R15<<3, R6
    VLD1   (R6), [V0.B16, V1.B16]
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V0.B16, V0.B16
    VEOR   V11.B16, V1.B16, V1.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    MOVD 24(R14), R6
    ADD    R15<<3, R6
    VLD1   (R6), [V2.B16, V3.B16]
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V2.B16, V2.B16
    VEOR   V11.B16, V3.B16, V3.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    MOVD 48(R14), R6
    ADD    R15<<3, R6
    VLD1   (R6), [V4.B16, V5.B16]
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V4.B16, V4.B16
    VEOR   V11.B16, V5.B16, V5.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    MOVD 72(R14), R6
    ADD    R15<<3, R6
    VLD1   (R6), [V6.B16, V7.B16]
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V6.B16, V6.B16
    VEOR   V11.B16, V7.B16, V7.B16
    VEOR   V12.B16, V6.B16, V6.B16
    VEOR   V13.B16, V7.B16, V7.B16
    // Check for early termination
    CMP    $1, R16
    BEQ    mulNeon_10x4Xor_store

    // Load and process 32 bytes from input 1 to 4 outputs
    VLD1.P 32(R4), [V14.B16, V15.B16]
    VUSHR  $4, V14.B16, V16.B16
    VUSHR  $4, V15.B16, V17.B16
    VAND   V8.B16, V14.B16, V14.B16
    VAND   V8.B16, V15.B16, V15.B16
    VAND   V8.B16, V16.B16, V16.B16
    VAND   V8.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V0.B16, V0.B16
    VEOR   V11.B16, V1.B16, V1.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V2.B16, V2.B16
    VEOR   V11.B16, V3.B16, V3.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V4.B16, V4.B16
    VEOR   V11.B16, V5.B16, V5.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V6.B16, V6.B16
    VEOR   V11.B16, V7.B16, V7.B16
    VEOR   V12.B16, V6.B16, V6.B16
    VEOR   V13.B16, V7.B16, V7.B16
    // Check for early termination
    CMP    $2, R16
    BEQ    mulNeon_10x4Xor_store

    // Load and process 32 bytes from input 2 to 4 outputs
    VLD1.P 32(R5), [V14.B16, V15.B16]
    VUSHR  $4, V14.B16, V16.B16
    VUSHR  $4, V15.B16, V17.B16
    VAND   V8.B16, V14.B16, V14.B16
    VAND   V8.B16, V15.B16, V15.B16
    VAND   V8.B16, V16.B16, V16.B16
    VAND   V8.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V0.B16, V0.B16
    VEOR   V11.B16, V1.B16, V1.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V2.B16, V2.B16
    VEOR   V11.B16, V3.B16, V3.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V4.B16, V4.B16
    VEOR   V11.B16, V5.B16, V5.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V6.B16, V6.B16
    VEOR   V11.B16, V7.B16, V7.B16
    VEOR   V12.B16, V6.B16, V6.B16
    VEOR   V13.B16, V7.B16, V7.B16
    // Check for early termination
    CMP    $3, R16
    BEQ    mulNeon_10x4Xor_store

    // Load and process 32 bytes from input 3 to 4 outputs
    VLD1.P 32(R8), [V14.B16, V15.B16]
    VUSHR  $4, V14.B16, V16.B16
    VUSHR  $4, V15.B16, V17.B16
    VAND   V8.B16, V14.B16, V14.B16
    VAND   V8.B16, V15.B16, V15.B16
    VAND   V8.B16, V16.B16, V16.B16
    VAND   V8.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V0.B16, V0.B16
    VEOR   V11.B16, V1.B16, V1.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V2.B16, V2.B16
    VEOR   V11.B16, V3.B16, V3.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V4.B16, V4.B16
    VEOR   V11.B16, V5.B16, V5.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V6.B16, V6.B16
    VEOR   V11.B16, V7.B16, V7.B16
    VEOR   V12.B16, V6.B16, V6.B16
    VEOR   V13.B16, V7.B16, V7.B16
    // Check for early termination
    CMP    $4, R16
    BEQ    mulNeon_10x4Xor_store

    // Load and process 32 bytes from input 4 to 4 outputs
    VLD1.P 32(R9), [V14.B16, V15.B16]
    VUSHR  $4, V14.B16, V16.B16
    VUSHR  $4, V15.B16, V17.B16
    VAND   V8.B16, V14.B16, V14.B16
    VAND   V8.B16, V15.B16, V15.B16
    VAND   V8.B16, V16.B16, V16.B16
    VAND   V8.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V0.B16, V0.B16
    VEOR   V11.B16, V1.B16, V1.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V2.B16, V2.B16
    VEOR   V11.B16, V3.B16, V3.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V4.B16, V4.B16
    VEOR   V11.B16, V5.B16, V5.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V6.B16, V6.B16
    VEOR   V11.B16, V7.B16, V7.B16
    VEOR   V12.B16, V6.B16, V6.B16
    VEOR   V13.B16, V7.B16, V7.B16
    // Check for early termination
    CMP    $5, R16
    BEQ    mulNeon_10x4Xor_store

    // Load and process 32 bytes from input 5 to 4 outputs
    VLD1.P 32(R10), [V14.B16, V15.B16]
    VUSHR  $4, V14.B16, V16.B16
    VUSHR  $4, V15.B16, V17.B16
    VAND   V8.B16, V14.B16, V14.B16
    VAND   V8.B16, V15.B16, V15.B16
    VAND   V8.B16, V16.B16, V16.B16
    VAND   V8.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V0.B16, V0.B16
    VEOR   V11.B16, V1.B16, V1.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V2.B16, V2.B16
    VEOR   V11.B16, V3.B16, V3.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V4.B16, V4.B16
    VEOR   V11.B16, V5.B16, V5.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V6.B16, V6.B16
    VEOR   V11.B16, V7.B16, V7.B16
    VEOR   V12.B16, V6.B16, V6.B16
    VEOR   V13.B16, V7.B16, V7.B16
    // Check for early termination
    CMP    $6, R16
    BEQ    mulNeon_10x4Xor_store

    // Load and process 32 bytes from input 6 to 4 outputs
    VLD1.P 32(R11), [V14.B16, V15.B16]
    VUSHR  $4, V14.B16, V16.B16
    VUSHR  $4, V15.B16, V17.B16
    VAND   V8.B16, V14.B16, V14.B16
    VAND   V8.B16, V15.B16, V15.B16
    VAND   V8.B16, V16.B16, V16.B16
    VAND   V8.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V0.B16, V0.B16
    VEOR   V11.B16, V1.B16, V1.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V2.B16, V2.B16
    VEOR   V11.B16, V3.B16, V3.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V4.B16, V4.B16
    VEOR   V11.B16, V5.B16, V5.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V6.B16, V6.B16
    VEOR   V11.B16, V7.B16, V7.B16
    VEOR   V12.B16, V6.B16, V6.B16
    VEOR   V13.B16, V7.B16, V7.B16
    // Check for early termination
    CMP    $7, R16
    BEQ    mulNeon_10x4Xor_store

    // Load and process 32 bytes from input 7 to 4 outputs
    VLD1.P 32(R12), [V14.B16, V15.B16]
    VUSHR  $4, V14.B16, V16.B16
    VUSHR  $4, V15.B16, V17.B16
    VAND   V8.B16, V14.B16, V14.B16
    VAND   V8.B16, V15.B16, V15.B16
    VAND   V8.B16, V16.B16, V16.B16
    VAND   V8.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V0.B16, V0.B16
    VEOR   V11.B16, V1.B16, V1.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V2.B16, V2.B16
    VEOR   V11.B16, V3.B16, V3.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V4.B16, V4.B16
    VEOR   V11.B16, V5.B16, V5.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V6.B16, V6.B16
    VEOR   V11.B16, V7.B16, V7.B16
    VEOR   V12.B16, V6.B16, V6.B16
    VEOR   V13.B16, V7.B16, V7.B16
    // Check for early termination
    CMP    $8, R16
    BEQ    mulNeon_10x4Xor_store

    // Load and process 32 bytes from input 8 to 4 outputs
    VLD1.P 32(R13), [V14.B16, V15.B16]
    VUSHR  $4, V14.B16, V16.B16
    VUSHR  $4, V15.B16, V17.B16
    VAND   V8.B16, V14.B16, V14.B16
    VAND   V8.B16, V15.B16, V15.B16
    VAND   V8.B16, V16.B16, V16.B16
    VAND   V8.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V0.B16, V0.B16
    VEOR   V11.B16, V1.B16, V1.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V2.B16, V2.B16
    VEOR   V11.B16, V3.B16, V3.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V4.B16, V4.B16
    VEOR   V11.B16, V5.B16, V5.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V6.B16, V6.B16
    VEOR   V11.B16, V7.B16, V7.B16
    VEOR   V12.B16, V6.B16, V6.B16
    VEOR   V13.B16, V7.B16, V7.B16
    // Check for early termination
    CMP    $9, R16
    BEQ    mulNeon_10x4Xor_store

    // Load and process 32 bytes from input 9 to 4 outputs
    VLD1.P 32(R3), [V14.B16, V15.B16]
    VUSHR  $4, V14.B16, V16.B16
    VUSHR  $4, V15.B16, V17.B16
    VAND   V8.B16, V14.B16, V14.B16
    VAND   V8.B16, V15.B16, V15.B16
    VAND   V8.B16, V16.B16, V16.B16
    VAND   V8.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V0.B16, V0.B16
    VEOR   V11.B16, V1.B16, V1.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V2.B16, V2.B16
    VEOR   V11.B16, V3.B16, V3.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V4.B16, V4.B16
    VEOR   V11.B16, V5.B16, V5.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VTBL   V14.B16, [V10.B16], V10.B16
    VTBL   V15.B16, [V11.B16], V11.B16
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VEOR   V10.B16, V6.B16, V6.B16
    VEOR   V11.B16, V7.B16, V7.B16
    VEOR   V12.B16, V6.B16, V6.B16
    VEOR   V13.B16, V7.B16, V7.B16

mulNeon_10x4Xor_store:
    // Store 4 outputs
    MOVD (R14), R6
    ADD    R15<<3, R6
    VST1   [V0.D2, V1.D2], (R6)
    MOVD 24(R14), R6
    ADD    R15<<3, R6
    VST1   [V2.D2, V3.D2], (R6)
    MOVD 48(R14), R6
    ADD    R15<<3, R6
    VST1   [V4.D2, V5.D2], (R6)
    MOVD 72(R14), R6
    ADD    R15<<3, R6
    VST1   [V6.D2, V7.D2], (R6)

    // Prepare for next loop
    ADD    $4, R15
    SUBS $1, R0
    BNE  mulNeon_10x4Xor_loop

mulNeon_10x4Xor_end:
    RET

// func mulNeon_10x5(matrix []byte, in [][]byte, out [][]byte, start int, n int)
// Requires: NEON
TEXT Â·mulNeon_10x5(SB), NOSPLIT, $8-88
    // Loading no tables to registers
    // Destination kept on stack
    // Full registers estimated 110 YMM used
    MOVD n+80(FP), R0
    LSR  $5, R0
    TST  R0, R0
    BEQ    mulNeon_10x5_end
    MOVD in_base+24(FP), R3
    MOVD (R3), R1
    MOVD 24(R3), R4
    MOVD 48(R3), R5
    MOVD 72(R3), R8
    MOVD 96(R3), R9
    MOVD 120(R3), R10
    MOVD 144(R3), R11
    MOVD 168(R3), R12
    MOVD 192(R3), R13
    MOVD 216(R3), R3
    MOVD out_base+48(FP), R14
    MOVD start+72(FP), R15

    // Add start offset to input
    ADD    R15, R1
    ADD    R15, R4
    ADD    R15, R5
    ADD    R15, R8
    ADD    R15, R9
    ADD    R15, R10
    ADD    R15, R11
    ADD    R15, R12
    ADD    R15, R13
    ADD    R15, R3
    LSR  $3, R15
    MOVD   $15, R6
    VMOV   R6, V10.B[0]
    VDUP   V10.B[0], V10.B16

    // Load number of input shards
    MOVD   in_len+32(FP), R16

mulNeon_10x5_loop:
    MOVD matrix_base+0(FP), R2
    // Load and process 32 bytes from input 0 to 5 outputs
    VLD1.P 32(R1), [V16.B16, V17.B16]
    VUSHR  $4, V16.B16, V18.B16
    VUSHR  $4, V17.B16, V19.B16
    VAND   V10.B16, V16.B16, V16.B16
    VAND   V10.B16, V17.B16, V17.B16
    VAND   V10.B16, V18.B16, V18.B16
    VAND   V10.B16, V19.B16, V19.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V14.B16, V0.B16
    VEOR   V13.B16, V15.B16, V1.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V14.B16, V2.B16
    VEOR   V13.B16, V15.B16, V3.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V14.B16, V4.B16
    VEOR   V13.B16, V15.B16, V5.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V14.B16, V6.B16
    VEOR   V13.B16, V15.B16, V7.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V14.B16, V8.B16
    VEOR   V13.B16, V15.B16, V9.B16
    // Check for early termination
    CMP    $1, R16
    BEQ    mulNeon_10x5_store

    // Load and process 32 bytes from input 1 to 5 outputs
    VLD1.P 32(R4), [V16.B16, V17.B16]
    VUSHR  $4, V16.B16, V18.B16
    VUSHR  $4, V17.B16, V19.B16
    VAND   V10.B16, V16.B16, V16.B16
    VAND   V10.B16, V17.B16, V17.B16
    VAND   V10.B16, V18.B16, V18.B16
    VAND   V10.B16, V19.B16, V19.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V6.B16, V6.B16
    VEOR   V13.B16, V7.B16, V7.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V8.B16, V8.B16
    VEOR   V13.B16, V9.B16, V9.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    // Check for early termination
    CMP    $2, R16
    BEQ    mulNeon_10x5_store

    // Load and process 32 bytes from input 2 to 5 outputs
    VLD1.P 32(R5), [V16.B16, V17.B16]
    VUSHR  $4, V16.B16, V18.B16
    VUSHR  $4, V17.B16, V19.B16
    VAND   V10.B16, V16.B16, V16.B16
    VAND   V10.B16, V17.B16, V17.B16
    VAND   V10.B16, V18.B16, V18.B16
    VAND   V10.B16, V19.B16, V19.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V6.B16, V6.B16
    VEOR   V13.B16, V7.B16, V7.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V8.B16, V8.B16
    VEOR   V13.B16, V9.B16, V9.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    // Check for early termination
    CMP    $3, R16
    BEQ    mulNeon_10x5_store

    // Load and process 32 bytes from input 3 to 5 outputs
    VLD1.P 32(R8), [V16.B16, V17.B16]
    VUSHR  $4, V16.B16, V18.B16
    VUSHR  $4, V17.B16, V19.B16
    VAND   V10.B16, V16.B16, V16.B16
    VAND   V10.B16, V17.B16, V17.B16
    VAND   V10.B16, V18.B16, V18.B16
    VAND   V10.B16, V19.B16, V19.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V6.B16, V6.B16
    VEOR   V13.B16, V7.B16, V7.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V8.B16, V8.B16
    VEOR   V13.B16, V9.B16, V9.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    // Check for early termination
    CMP    $4, R16
    BEQ    mulNeon_10x5_store

    // Load and process 32 bytes from input 4 to 5 outputs
    VLD1.P 32(R9), [V16.B16, V17.B16]
    VUSHR  $4, V16.B16, V18.B16
    VUSHR  $4, V17.B16, V19.B16
    VAND   V10.B16, V16.B16, V16.B16
    VAND   V10.B16, V17.B16, V17.B16
    VAND   V10.B16, V18.B16, V18.B16
    VAND   V10.B16, V19.B16, V19.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V6.B16, V6.B16
    VEOR   V13.B16, V7.B16, V7.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V8.B16, V8.B16
    VEOR   V13.B16, V9.B16, V9.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    // Check for early termination
    CMP    $5, R16
    BEQ    mulNeon_10x5_store

    // Load and process 32 bytes from input 5 to 5 outputs
    VLD1.P 32(R10), [V16.B16, V17.B16]
    VUSHR  $4, V16.B16, V18.B16
    VUSHR  $4, V17.B16, V19.B16
    VAND   V10.B16, V16.B16, V16.B16
    VAND   V10.B16, V17.B16, V17.B16
    VAND   V10.B16, V18.B16, V18.B16
    VAND   V10.B16, V19.B16, V19.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V6.B16, V6.B16
    VEOR   V13.B16, V7.B16, V7.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V8.B16, V8.B16
    VEOR   V13.B16, V9.B16, V9.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    // Check for early termination
    CMP    $6, R16
    BEQ    mulNeon_10x5_store

    // Load and process 32 bytes from input 6 to 5 outputs
    VLD1.P 32(R11), [V16.B16, V17.B16]
    VUSHR  $4, V16.B16, V18.B16
    VUSHR  $4, V17.B16, V19.B16
    VAND   V10.B16, V16.B16, V16.B16
    VAND   V10.B16, V17.B16, V17.B16
    VAND   V10.B16, V18.B16, V18.B16
    VAND   V10.B16, V19.B16, V19.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V6.B16, V6.B16
    VEOR   V13.B16, V7.B16, V7.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V8.B16, V8.B16
    VEOR   V13.B16, V9.B16, V9.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    // Check for early termination
    CMP    $7, R16
    BEQ    mulNeon_10x5_store

    // Load and process 32 bytes from input 7 to 5 outputs
    VLD1.P 32(R12), [V16.B16, V17.B16]
    VUSHR  $4, V16.B16, V18.B16
    VUSHR  $4, V17.B16, V19.B16
    VAND   V10.B16, V16.B16, V16.B16
    VAND   V10.B16, V17.B16, V17.B16
    VAND   V10.B16, V18.B16, V18.B16
    VAND   V10.B16, V19.B16, V19.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V6.B16, V6.B16
    VEOR   V13.B16, V7.B16, V7.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V8.B16, V8.B16
    VEOR   V13.B16, V9.B16, V9.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    // Check for early termination
    CMP    $8, R16
    BEQ    mulNeon_10x5_store

    // Load and process 32 bytes from input 8 to 5 outputs
    VLD1.P 32(R13), [V16.B16, V17.B16]
    VUSHR  $4, V16.B16, V18.B16
    VUSHR  $4, V17.B16, V19.B16
    VAND   V10.B16, V16.B16, V16.B16
    VAND   V10.B16, V17.B16, V17.B16
    VAND   V10.B16, V18.B16, V18.B16
    VAND   V10.B16, V19.B16, V19.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V6.B16, V6.B16
    VEOR   V13.B16, V7.B16, V7.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V8.B16, V8.B16
    VEOR   V13.B16, V9.B16, V9.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    // Check for early termination
    CMP    $9, R16
    BEQ    mulNeon_10x5_store

    // Load and process 32 bytes from input 9 to 5 outputs
    VLD1.P 32(R3), [V16.B16, V17.B16]
    VUSHR  $4, V16.B16, V18.B16
    VUSHR  $4, V17.B16, V19.B16
    VAND   V10.B16, V16.B16, V16.B16
    VAND   V10.B16, V17.B16, V17.B16
    VAND   V10.B16, V18.B16, V18.B16
    VAND   V10.B16, V19.B16, V19.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V6.B16, V6.B16
    VEOR   V13.B16, V7.B16, V7.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V8.B16, V8.B16
    VEOR   V13.B16, V9.B16, V9.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16

mulNeon_10x5_store:
    // Store 5 outputs
    MOVD (R14), R6
    ADD    R15<<3, R6
    VST1   [V0.D2, V1.D2], (R6)
    MOVD 24(R14), R6
    ADD    R15<<3, R6
    VST1   [V2.D2, V3.D2], (R6)
    MOVD 48(R14), R6
    ADD    R15<<3, R6
    VST1   [V4.D2, V5.D2], (R6)
    MOVD 72(R14), R6
    ADD    R15<<3, R6
    VST1   [V6.D2, V7.D2], (R6)
    MOVD 96(R14), R6
    ADD    R15<<3, R6
    VST1   [V8.D2, V9.D2], (R6)

    // Prepare for next loop
    ADD    $4, R15
    SUBS $1, R0
    BNE  mulNeon_10x5_loop

mulNeon_10x5_end:
    RET

// func mulNeon_10x5Xor(matrix []byte, in [][]byte, out [][]byte, start int, n int)
// Requires: NEON
TEXT Â·mulNeon_10x5Xor(SB), NOSPLIT, $8-88
    // Loading no tables to registers
    // Destination kept on stack
    // Full registers estimated 110 YMM used
    MOVD n+80(FP), R0
    LSR  $5, R0
    TST  R0, R0
    BEQ    mulNeon_10x5Xor_end
    MOVD in_base+24(FP), R3
    MOVD (R3), R1
    MOVD 24(R3), R4
    MOVD 48(R3), R5
    MOVD 72(R3), R8
    MOVD 96(R3), R9
    MOVD 120(R3), R10
    MOVD 144(R3), R11
    MOVD 168(R3), R12
    MOVD 192(R3), R13
    MOVD 216(R3), R3
    MOVD out_base+48(FP), R14
    MOVD start+72(FP), R15

    // Add start offset to input
    ADD    R15, R1
    ADD    R15, R4
    ADD    R15, R5
    ADD    R15, R8
    ADD    R15, R9
    ADD    R15, R10
    ADD    R15, R11
    ADD    R15, R12
    ADD    R15, R13
    ADD    R15, R3
    LSR  $3, R15
    MOVD   $15, R6
    VMOV   R6, V10.B[0]
    VDUP   V10.B[0], V10.B16

    // Load number of input shards
    MOVD   in_len+32(FP), R16

mulNeon_10x5Xor_loop:
    MOVD matrix_base+0(FP), R2
    // Load and process 32 bytes from input 0 to 5 outputs
    VLD1.P 32(R1), [V16.B16, V17.B16]
    VUSHR  $4, V16.B16, V18.B16
    VUSHR  $4, V17.B16, V19.B16
    VAND   V10.B16, V16.B16, V16.B16
    VAND   V10.B16, V17.B16, V17.B16
    VAND   V10.B16, V18.B16, V18.B16
    VAND   V10.B16, V19.B16, V19.B16
    MOVD (R14), R6
    ADD    R15<<3, R6
    VLD1   (R6), [V0.B16, V1.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    MOVD 24(R14), R6
    ADD    R15<<3, R6
    VLD1   (R6), [V2.B16, V3.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    MOVD 48(R14), R6
    ADD    R15<<3, R6
    VLD1   (R6), [V4.B16, V5.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    MOVD 72(R14), R6
    ADD    R15<<3, R6
    VLD1   (R6), [V6.B16, V7.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V6.B16, V6.B16
    VEOR   V13.B16, V7.B16, V7.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    MOVD 96(R14), R6
    ADD    R15<<3, R6
    VLD1   (R6), [V8.B16, V9.B16]
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V8.B16, V8.B16
    VEOR   V13.B16, V9.B16, V9.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    // Check for early termination
    CMP    $1, R16
    BEQ    mulNeon_10x5Xor_store

    // Load and process 32 bytes from input 1 to 5 outputs
    VLD1.P 32(R4), [V16.B16, V17.B16]
    VUSHR  $4, V16.B16, V18.B16
    VUSHR  $4, V17.B16, V19.B16
    VAND   V10.B16, V16.B16, V16.B16
    VAND   V10.B16, V17.B16, V17.B16
    VAND   V10.B16, V18.B16, V18.B16
    VAND   V10.B16, V19.B16, V19.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V6.B16, V6.B16
    VEOR   V13.B16, V7.B16, V7.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V8.B16, V8.B16
    VEOR   V13.B16, V9.B16, V9.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    // Check for early termination
    CMP    $2, R16
    BEQ    mulNeon_10x5Xor_store

    // Load and process 32 bytes from input 2 to 5 outputs
    VLD1.P 32(R5), [V16.B16, V17.B16]
    VUSHR  $4, V16.B16, V18.B16
    VUSHR  $4, V17.B16, V19.B16
    VAND   V10.B16, V16.B16, V16.B16
    VAND   V10.B16, V17.B16, V17.B16
    VAND   V10.B16, V18.B16, V18.B16
    VAND   V10.B16, V19.B16, V19.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V6.B16, V6.B16
    VEOR   V13.B16, V7.B16, V7.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V8.B16, V8.B16
    VEOR   V13.B16, V9.B16, V9.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    // Check for early termination
    CMP    $3, R16
    BEQ    mulNeon_10x5Xor_store

    // Load and process 32 bytes from input 3 to 5 outputs
    VLD1.P 32(R8), [V16.B16, V17.B16]
    VUSHR  $4, V16.B16, V18.B16
    VUSHR  $4, V17.B16, V19.B16
    VAND   V10.B16, V16.B16, V16.B16
    VAND   V10.B16, V17.B16, V17.B16
    VAND   V10.B16, V18.B16, V18.B16
    VAND   V10.B16, V19.B16, V19.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V6.B16, V6.B16
    VEOR   V13.B16, V7.B16, V7.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V8.B16, V8.B16
    VEOR   V13.B16, V9.B16, V9.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    // Check for early termination
    CMP    $4, R16
    BEQ    mulNeon_10x5Xor_store

    // Load and process 32 bytes from input 4 to 5 outputs
    VLD1.P 32(R9), [V16.B16, V17.B16]
    VUSHR  $4, V16.B16, V18.B16
    VUSHR  $4, V17.B16, V19.B16
    VAND   V10.B16, V16.B16, V16.B16
    VAND   V10.B16, V17.B16, V17.B16
    VAND   V10.B16, V18.B16, V18.B16
    VAND   V10.B16, V19.B16, V19.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V6.B16, V6.B16
    VEOR   V13.B16, V7.B16, V7.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V8.B16, V8.B16
    VEOR   V13.B16, V9.B16, V9.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    // Check for early termination
    CMP    $5, R16
    BEQ    mulNeon_10x5Xor_store

    // Load and process 32 bytes from input 5 to 5 outputs
    VLD1.P 32(R10), [V16.B16, V17.B16]
    VUSHR  $4, V16.B16, V18.B16
    VUSHR  $4, V17.B16, V19.B16
    VAND   V10.B16, V16.B16, V16.B16
    VAND   V10.B16, V17.B16, V17.B16
    VAND   V10.B16, V18.B16, V18.B16
    VAND   V10.B16, V19.B16, V19.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V6.B16, V6.B16
    VEOR   V13.B16, V7.B16, V7.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V8.B16, V8.B16
    VEOR   V13.B16, V9.B16, V9.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    // Check for early termination
    CMP    $6, R16
    BEQ    mulNeon_10x5Xor_store

    // Load and process 32 bytes from input 6 to 5 outputs
    VLD1.P 32(R11), [V16.B16, V17.B16]
    VUSHR  $4, V16.B16, V18.B16
    VUSHR  $4, V17.B16, V19.B16
    VAND   V10.B16, V16.B16, V16.B16
    VAND   V10.B16, V17.B16, V17.B16
    VAND   V10.B16, V18.B16, V18.B16
    VAND   V10.B16, V19.B16, V19.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V6.B16, V6.B16
    VEOR   V13.B16, V7.B16, V7.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V8.B16, V8.B16
    VEOR   V13.B16, V9.B16, V9.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    // Check for early termination
    CMP    $7, R16
    BEQ    mulNeon_10x5Xor_store

    // Load and process 32 bytes from input 7 to 5 outputs
    VLD1.P 32(R12), [V16.B16, V17.B16]
    VUSHR  $4, V16.B16, V18.B16
    VUSHR  $4, V17.B16, V19.B16
    VAND   V10.B16, V16.B16, V16.B16
    VAND   V10.B16, V17.B16, V17.B16
    VAND   V10.B16, V18.B16, V18.B16
    VAND   V10.B16, V19.B16, V19.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V6.B16, V6.B16
    VEOR   V13.B16, V7.B16, V7.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V8.B16, V8.B16
    VEOR   V13.B16, V9.B16, V9.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    // Check for early termination
    CMP    $8, R16
    BEQ    mulNeon_10x5Xor_store

    // Load and process 32 bytes from input 8 to 5 outputs
    VLD1.P 32(R13), [V16.B16, V17.B16]
    VUSHR  $4, V16.B16, V18.B16
    VUSHR  $4, V17.B16, V19.B16
    VAND   V10.B16, V16.B16, V16.B16
    VAND   V10.B16, V17.B16, V17.B16
    VAND   V10.B16, V18.B16, V18.B16
    VAND   V10.B16, V19.B16, V19.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V6.B16, V6.B16
    VEOR   V13.B16, V7.B16, V7.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V8.B16, V8.B16
    VEOR   V13.B16, V9.B16, V9.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    // Check for early termination
    CMP    $9, R16
    BEQ    mulNeon_10x5Xor_store

    // Load and process 32 bytes from input 9 to 5 outputs
    VLD1.P 32(R3), [V16.B16, V17.B16]
    VUSHR  $4, V16.B16, V18.B16
    VUSHR  $4, V17.B16, V19.B16
    VAND   V10.B16, V16.B16, V16.B16
    VAND   V10.B16, V17.B16, V17.B16
    VAND   V10.B16, V18.B16, V18.B16
    VAND   V10.B16, V19.B16, V19.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V0.B16, V0.B16
    VEOR   V13.B16, V1.B16, V1.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V2.B16, V2.B16
    VEOR   V13.B16, V3.B16, V3.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V4.B16, V4.B16
    VEOR   V13.B16, V5.B16, V5.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V6.B16, V6.B16
    VEOR   V13.B16, V7.B16, V7.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VTBL   V16.B16, [V12.B16], V12.B16
    VTBL   V17.B16, [V13.B16], V13.B16
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VEOR   V12.B16, V8.B16, V8.B16
    VEOR   V13.B16, V9.B16, V9.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16

mulNeon_10x5Xor_store:
    // Store 5 outputs
    MOVD (R14), R6
    ADD    R15<<3, R6
    VST1   [V0.D2, V1.D2], (R6)
    MOVD 24(R14), R6
    ADD    R15<<3, R6
    VST1   [V2.D2, V3.D2], (R6)
    MOVD 48(R14), R6
    ADD    R15<<3, R6
    VST1   [V4.D2, V5.D2], (R6)
    MOVD 72(R14), R6
    ADD    R15<<3, R6
    VST1   [V6.D2, V7.D2], (R6)
    MOVD 96(R14), R6
    ADD    R15<<3, R6
    VST1   [V8.D2, V9.D2], (R6)

    // Prepare for next loop
    ADD    $4, R15
    SUBS $1, R0
    BNE  mulNeon_10x5Xor_loop

mulNeon_10x5Xor_end:
    RET

// func mulNeon_10x6(matrix []byte, in [][]byte, out [][]byte, start int, n int)
// Requires: NEON
TEXT Â·mulNeon_10x6(SB), NOSPLIT, $8-88
    // Loading no tables to registers
    // Destination kept on stack
    // Full registers estimated 131 YMM used
    MOVD n+80(FP), R0
    LSR  $5, R0
    TST  R0, R0
    BEQ    mulNeon_10x6_end
    MOVD in_base+24(FP), R3
    MOVD (R3), R1
    MOVD 24(R3), R4
    MOVD 48(R3), R5
    MOVD 72(R3), R8
    MOVD 96(R3), R9
    MOVD 120(R3), R10
    MOVD 144(R3), R11
    MOVD 168(R3), R12
    MOVD 192(R3), R13
    MOVD 216(R3), R3
    MOVD out_base+48(FP), R14
    MOVD start+72(FP), R15

    // Add start offset to input
    ADD    R15, R1
    ADD    R15, R4
    ADD    R15, R5
    ADD    R15, R8
    ADD    R15, R9
    ADD    R15, R10
    ADD    R15, R11
    ADD    R15, R12
    ADD    R15, R13
    ADD    R15, R3
    LSR  $3, R15
    MOVD   $15, R6
    VMOV   R6, V12.B[0]
    VDUP   V12.B[0], V12.B16

    // Load number of input shards
    MOVD   in_len+32(FP), R16

mulNeon_10x6_loop:
    MOVD matrix_base+0(FP), R2
    // Load and process 32 bytes from input 0 to 6 outputs
    VLD1.P 32(R1), [V18.B16, V19.B16]
    VUSHR  $4, V18.B16, V20.B16
    VUSHR  $4, V19.B16, V21.B16
    VAND   V12.B16, V18.B16, V18.B16
    VAND   V12.B16, V19.B16, V19.B16
    VAND   V12.B16, V20.B16, V20.B16
    VAND   V12.B16, V21.B16, V21.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V16.B16, V0.B16
    VEOR   V15.B16, V17.B16, V1.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V16.B16, V2.B16
    VEOR   V15.B16, V17.B16, V3.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V16.B16, V4.B16
    VEOR   V15.B16, V17.B16, V5.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V16.B16, V6.B16
    VEOR   V15.B16, V17.B16, V7.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V16.B16, V8.B16
    VEOR   V15.B16, V17.B16, V9.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V16.B16, V10.B16
    VEOR   V15.B16, V17.B16, V11.B16
    // Check for early termination
    CMP    $1, R16
    BEQ    mulNeon_10x6_store

    // Load and process 32 bytes from input 1 to 6 outputs
    VLD1.P 32(R4), [V18.B16, V19.B16]
    VUSHR  $4, V18.B16, V20.B16
    VUSHR  $4, V19.B16, V21.B16
    VAND   V12.B16, V18.B16, V18.B16
    VAND   V12.B16, V19.B16, V19.B16
    VAND   V12.B16, V20.B16, V20.B16
    VAND   V12.B16, V21.B16, V21.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V10.B16, V10.B16
    VEOR   V15.B16, V11.B16, V11.B16
    VEOR   V16.B16, V10.B16, V10.B16
    VEOR   V17.B16, V11.B16, V11.B16
    // Check for early termination
    CMP    $2, R16
    BEQ    mulNeon_10x6_store

    // Load and process 32 bytes from input 2 to 6 outputs
    VLD1.P 32(R5), [V18.B16, V19.B16]
    VUSHR  $4, V18.B16, V20.B16
    VUSHR  $4, V19.B16, V21.B16
    VAND   V12.B16, V18.B16, V18.B16
    VAND   V12.B16, V19.B16, V19.B16
    VAND   V12.B16, V20.B16, V20.B16
    VAND   V12.B16, V21.B16, V21.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V10.B16, V10.B16
    VEOR   V15.B16, V11.B16, V11.B16
    VEOR   V16.B16, V10.B16, V10.B16
    VEOR   V17.B16, V11.B16, V11.B16
    // Check for early termination
    CMP    $3, R16
    BEQ    mulNeon_10x6_store

    // Load and process 32 bytes from input 3 to 6 outputs
    VLD1.P 32(R8), [V18.B16, V19.B16]
    VUSHR  $4, V18.B16, V20.B16
    VUSHR  $4, V19.B16, V21.B16
    VAND   V12.B16, V18.B16, V18.B16
    VAND   V12.B16, V19.B16, V19.B16
    VAND   V12.B16, V20.B16, V20.B16
    VAND   V12.B16, V21.B16, V21.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V10.B16, V10.B16
    VEOR   V15.B16, V11.B16, V11.B16
    VEOR   V16.B16, V10.B16, V10.B16
    VEOR   V17.B16, V11.B16, V11.B16
    // Check for early termination
    CMP    $4, R16
    BEQ    mulNeon_10x6_store

    // Load and process 32 bytes from input 4 to 6 outputs
    VLD1.P 32(R9), [V18.B16, V19.B16]
    VUSHR  $4, V18.B16, V20.B16
    VUSHR  $4, V19.B16, V21.B16
    VAND   V12.B16, V18.B16, V18.B16
    VAND   V12.B16, V19.B16, V19.B16
    VAND   V12.B16, V20.B16, V20.B16
    VAND   V12.B16, V21.B16, V21.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V10.B16, V10.B16
    VEOR   V15.B16, V11.B16, V11.B16
    VEOR   V16.B16, V10.B16, V10.B16
    VEOR   V17.B16, V11.B16, V11.B16
    // Check for early termination
    CMP    $5, R16
    BEQ    mulNeon_10x6_store

    // Load and process 32 bytes from input 5 to 6 outputs
    VLD1.P 32(R10), [V18.B16, V19.B16]
    VUSHR  $4, V18.B16, V20.B16
    VUSHR  $4, V19.B16, V21.B16
    VAND   V12.B16, V18.B16, V18.B16
    VAND   V12.B16, V19.B16, V19.B16
    VAND   V12.B16, V20.B16, V20.B16
    VAND   V12.B16, V21.B16, V21.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V10.B16, V10.B16
    VEOR   V15.B16, V11.B16, V11.B16
    VEOR   V16.B16, V10.B16, V10.B16
    VEOR   V17.B16, V11.B16, V11.B16
    // Check for early termination
    CMP    $6, R16
    BEQ    mulNeon_10x6_store

    // Load and process 32 bytes from input 6 to 6 outputs
    VLD1.P 32(R11), [V18.B16, V19.B16]
    VUSHR  $4, V18.B16, V20.B16
    VUSHR  $4, V19.B16, V21.B16
    VAND   V12.B16, V18.B16, V18.B16
    VAND   V12.B16, V19.B16, V19.B16
    VAND   V12.B16, V20.B16, V20.B16
    VAND   V12.B16, V21.B16, V21.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V10.B16, V10.B16
    VEOR   V15.B16, V11.B16, V11.B16
    VEOR   V16.B16, V10.B16, V10.B16
    VEOR   V17.B16, V11.B16, V11.B16
    // Check for early termination
    CMP    $7, R16
    BEQ    mulNeon_10x6_store

    // Load and process 32 bytes from input 7 to 6 outputs
    VLD1.P 32(R12), [V18.B16, V19.B16]
    VUSHR  $4, V18.B16, V20.B16
    VUSHR  $4, V19.B16, V21.B16
    VAND   V12.B16, V18.B16, V18.B16
    VAND   V12.B16, V19.B16, V19.B16
    VAND   V12.B16, V20.B16, V20.B16
    VAND   V12.B16, V21.B16, V21.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V10.B16, V10.B16
    VEOR   V15.B16, V11.B16, V11.B16
    VEOR   V16.B16, V10.B16, V10.B16
    VEOR   V17.B16, V11.B16, V11.B16
    // Check for early termination
    CMP    $8, R16
    BEQ    mulNeon_10x6_store

    // Load and process 32 bytes from input 8 to 6 outputs
    VLD1.P 32(R13), [V18.B16, V19.B16]
    VUSHR  $4, V18.B16, V20.B16
    VUSHR  $4, V19.B16, V21.B16
    VAND   V12.B16, V18.B16, V18.B16
    VAND   V12.B16, V19.B16, V19.B16
    VAND   V12.B16, V20.B16, V20.B16
    VAND   V12.B16, V21.B16, V21.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V10.B16, V10.B16
    VEOR   V15.B16, V11.B16, V11.B16
    VEOR   V16.B16, V10.B16, V10.B16
    VEOR   V17.B16, V11.B16, V11.B16
    // Check for early termination
    CMP    $9, R16
    BEQ    mulNeon_10x6_store

    // Load and process 32 bytes from input 9 to 6 outputs
    VLD1.P 32(R3), [V18.B16, V19.B16]
    VUSHR  $4, V18.B16, V20.B16
    VUSHR  $4, V19.B16, V21.B16
    VAND   V12.B16, V18.B16, V18.B16
    VAND   V12.B16, V19.B16, V19.B16
    VAND   V12.B16, V20.B16, V20.B16
    VAND   V12.B16, V21.B16, V21.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V10.B16, V10.B16
    VEOR   V15.B16, V11.B16, V11.B16
    VEOR   V16.B16, V10.B16, V10.B16
    VEOR   V17.B16, V11.B16, V11.B16

mulNeon_10x6_store:
    // Store 6 outputs
    MOVD (R14), R6
    ADD    R15<<3, R6
    VST1   [V0.D2, V1.D2], (R6)
    MOVD 24(R14), R6
    ADD    R15<<3, R6
    VST1   [V2.D2, V3.D2], (R6)
    MOVD 48(R14), R6
    ADD    R15<<3, R6
    VST1   [V4.D2, V5.D2], (R6)
    MOVD 72(R14), R6
    ADD    R15<<3, R6
    VST1   [V6.D2, V7.D2], (R6)
    MOVD 96(R14), R6
    ADD    R15<<3, R6
    VST1   [V8.D2, V9.D2], (R6)
    MOVD 120(R14), R6
    ADD    R15<<3, R6
    VST1   [V10.D2, V11.D2], (R6)

    // Prepare for next loop
    ADD    $4, R15
    SUBS $1, R0
    BNE  mulNeon_10x6_loop

mulNeon_10x6_end:
    RET

// func mulNeon_10x6Xor(matrix []byte, in [][]byte, out [][]byte, start int, n int)
// Requires: NEON
TEXT Â·mulNeon_10x6Xor(SB), NOSPLIT, $8-88
    // Loading no tables to registers
    // Destination kept on stack
    // Full registers estimated 131 YMM used
    MOVD n+80(FP), R0
    LSR  $5, R0
    TST  R0, R0
    BEQ    mulNeon_10x6Xor_end
    MOVD in_base+24(FP), R3
    MOVD (R3), R1
    MOVD 24(R3), R4
    MOVD 48(R3), R5
    MOVD 72(R3), R8
    MOVD 96(R3), R9
    MOVD 120(R3), R10
    MOVD 144(R3), R11
    MOVD 168(R3), R12
    MOVD 192(R3), R13
    MOVD 216(R3), R3
    MOVD out_base+48(FP), R14
    MOVD start+72(FP), R15

    // Add start offset to input
    ADD    R15, R1
    ADD    R15, R4
    ADD    R15, R5
    ADD    R15, R8
    ADD    R15, R9
    ADD    R15, R10
    ADD    R15, R11
    ADD    R15, R12
    ADD    R15, R13
    ADD    R15, R3
    LSR  $3, R15
    MOVD   $15, R6
    VMOV   R6, V12.B[0]
    VDUP   V12.B[0], V12.B16

    // Load number of input shards
    MOVD   in_len+32(FP), R16

mulNeon_10x6Xor_loop:
    MOVD matrix_base+0(FP), R2
    // Load and process 32 bytes from input 0 to 6 outputs
    VLD1.P 32(R1), [V18.B16, V19.B16]
    VUSHR  $4, V18.B16, V20.B16
    VUSHR  $4, V19.B16, V21.B16
    VAND   V12.B16, V18.B16, V18.B16
    VAND   V12.B16, V19.B16, V19.B16
    VAND   V12.B16, V20.B16, V20.B16
    VAND   V12.B16, V21.B16, V21.B16
    MOVD (R14), R6
    ADD    R15<<3, R6
    VLD1   (R6), [V0.B16, V1.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    MOVD 24(R14), R6
    ADD    R15<<3, R6
    VLD1   (R6), [V2.B16, V3.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    MOVD 48(R14), R6
    ADD    R15<<3, R6
    VLD1   (R6), [V4.B16, V5.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    MOVD 72(R14), R6
    ADD    R15<<3, R6
    VLD1   (R6), [V6.B16, V7.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    MOVD 96(R14), R6
    ADD    R15<<3, R6
    VLD1   (R6), [V8.B16, V9.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    MOVD 120(R14), R6
    ADD    R15<<3, R6
    VLD1   (R6), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V10.B16, V10.B16
    VEOR   V15.B16, V11.B16, V11.B16
    VEOR   V16.B16, V10.B16, V10.B16
    VEOR   V17.B16, V11.B16, V11.B16
    // Check for early termination
    CMP    $1, R16
    BEQ    mulNeon_10x6Xor_store

    // Load and process 32 bytes from input 1 to 6 outputs
    VLD1.P 32(R4), [V18.B16, V19.B16]
    VUSHR  $4, V18.B16, V20.B16
    VUSHR  $4, V19.B16, V21.B16
    VAND   V12.B16, V18.B16, V18.B16
    VAND   V12.B16, V19.B16, V19.B16
    VAND   V12.B16, V20.B16, V20.B16
    VAND   V12.B16, V21.B16, V21.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V10.B16, V10.B16
    VEOR   V15.B16, V11.B16, V11.B16
    VEOR   V16.B16, V10.B16, V10.B16
    VEOR   V17.B16, V11.B16, V11.B16
    // Check for early termination
    CMP    $2, R16
    BEQ    mulNeon_10x6Xor_store

    // Load and process 32 bytes from input 2 to 6 outputs
    VLD1.P 32(R5), [V18.B16, V19.B16]
    VUSHR  $4, V18.B16, V20.B16
    VUSHR  $4, V19.B16, V21.B16
    VAND   V12.B16, V18.B16, V18.B16
    VAND   V12.B16, V19.B16, V19.B16
    VAND   V12.B16, V20.B16, V20.B16
    VAND   V12.B16, V21.B16, V21.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V10.B16, V10.B16
    VEOR   V15.B16, V11.B16, V11.B16
    VEOR   V16.B16, V10.B16, V10.B16
    VEOR   V17.B16, V11.B16, V11.B16
    // Check for early termination
    CMP    $3, R16
    BEQ    mulNeon_10x6Xor_store

    // Load and process 32 bytes from input 3 to 6 outputs
    VLD1.P 32(R8), [V18.B16, V19.B16]
    VUSHR  $4, V18.B16, V20.B16
    VUSHR  $4, V19.B16, V21.B16
    VAND   V12.B16, V18.B16, V18.B16
    VAND   V12.B16, V19.B16, V19.B16
    VAND   V12.B16, V20.B16, V20.B16
    VAND   V12.B16, V21.B16, V21.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V10.B16, V10.B16
    VEOR   V15.B16, V11.B16, V11.B16
    VEOR   V16.B16, V10.B16, V10.B16
    VEOR   V17.B16, V11.B16, V11.B16
    // Check for early termination
    CMP    $4, R16
    BEQ    mulNeon_10x6Xor_store

    // Load and process 32 bytes from input 4 to 6 outputs
    VLD1.P 32(R9), [V18.B16, V19.B16]
    VUSHR  $4, V18.B16, V20.B16
    VUSHR  $4, V19.B16, V21.B16
    VAND   V12.B16, V18.B16, V18.B16
    VAND   V12.B16, V19.B16, V19.B16
    VAND   V12.B16, V20.B16, V20.B16
    VAND   V12.B16, V21.B16, V21.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V10.B16, V10.B16
    VEOR   V15.B16, V11.B16, V11.B16
    VEOR   V16.B16, V10.B16, V10.B16
    VEOR   V17.B16, V11.B16, V11.B16
    // Check for early termination
    CMP    $5, R16
    BEQ    mulNeon_10x6Xor_store

    // Load and process 32 bytes from input 5 to 6 outputs
    VLD1.P 32(R10), [V18.B16, V19.B16]
    VUSHR  $4, V18.B16, V20.B16
    VUSHR  $4, V19.B16, V21.B16
    VAND   V12.B16, V18.B16, V18.B16
    VAND   V12.B16, V19.B16, V19.B16
    VAND   V12.B16, V20.B16, V20.B16
    VAND   V12.B16, V21.B16, V21.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V10.B16, V10.B16
    VEOR   V15.B16, V11.B16, V11.B16
    VEOR   V16.B16, V10.B16, V10.B16
    VEOR   V17.B16, V11.B16, V11.B16
    // Check for early termination
    CMP    $6, R16
    BEQ    mulNeon_10x6Xor_store

    // Load and process 32 bytes from input 6 to 6 outputs
    VLD1.P 32(R11), [V18.B16, V19.B16]
    VUSHR  $4, V18.B16, V20.B16
    VUSHR  $4, V19.B16, V21.B16
    VAND   V12.B16, V18.B16, V18.B16
    VAND   V12.B16, V19.B16, V19.B16
    VAND   V12.B16, V20.B16, V20.B16
    VAND   V12.B16, V21.B16, V21.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V10.B16, V10.B16
    VEOR   V15.B16, V11.B16, V11.B16
    VEOR   V16.B16, V10.B16, V10.B16
    VEOR   V17.B16, V11.B16, V11.B16
    // Check for early termination
    CMP    $7, R16
    BEQ    mulNeon_10x6Xor_store

    // Load and process 32 bytes from input 7 to 6 outputs
    VLD1.P 32(R12), [V18.B16, V19.B16]
    VUSHR  $4, V18.B16, V20.B16
    VUSHR  $4, V19.B16, V21.B16
    VAND   V12.B16, V18.B16, V18.B16
    VAND   V12.B16, V19.B16, V19.B16
    VAND   V12.B16, V20.B16, V20.B16
    VAND   V12.B16, V21.B16, V21.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V10.B16, V10.B16
    VEOR   V15.B16, V11.B16, V11.B16
    VEOR   V16.B16, V10.B16, V10.B16
    VEOR   V17.B16, V11.B16, V11.B16
    // Check for early termination
    CMP    $8, R16
    BEQ    mulNeon_10x6Xor_store

    // Load and process 32 bytes from input 8 to 6 outputs
    VLD1.P 32(R13), [V18.B16, V19.B16]
    VUSHR  $4, V18.B16, V20.B16
    VUSHR  $4, V19.B16, V21.B16
    VAND   V12.B16, V18.B16, V18.B16
    VAND   V12.B16, V19.B16, V19.B16
    VAND   V12.B16, V20.B16, V20.B16
    VAND   V12.B16, V21.B16, V21.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V10.B16, V10.B16
    VEOR   V15.B16, V11.B16, V11.B16
    VEOR   V16.B16, V10.B16, V10.B16
    VEOR   V17.B16, V11.B16, V11.B16
    // Check for early termination
    CMP    $9, R16
    BEQ    mulNeon_10x6Xor_store

    // Load and process 32 bytes from input 9 to 6 outputs
    VLD1.P 32(R3), [V18.B16, V19.B16]
    VUSHR  $4, V18.B16, V20.B16
    VUSHR  $4, V19.B16, V21.B16
    VAND   V12.B16, V18.B16, V18.B16
    VAND   V12.B16, V19.B16, V19.B16
    VAND   V12.B16, V20.B16, V20.B16
    VAND   V12.B16, V21.B16, V21.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V0.B16, V0.B16
    VEOR   V15.B16, V1.B16, V1.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V2.B16, V2.B16
    VEOR   V15.B16, V3.B16, V3.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V4.B16, V4.B16
    VEOR   V15.B16, V5.B16, V5.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V6.B16, V6.B16
    VEOR   V15.B16, V7.B16, V7.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V8.B16, V8.B16
    VEOR   V15.B16, V9.B16, V9.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VTBL   V18.B16, [V14.B16], V14.B16
    VTBL   V19.B16, [V15.B16], V15.B16
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VEOR   V14.B16, V10.B16, V10.B16
    VEOR   V15.B16, V11.B16, V11.B16
    VEOR   V16.B16, V10.B16, V10.B16
    VEOR   V17.B16, V11.B16, V11.B16

mulNeon_10x6Xor_store:
    // Store 6 outputs
    MOVD (R14), R6
    ADD    R15<<3, R6
    VST1   [V0.D2, V1.D2], (R6)
    MOVD 24(R14), R6
    ADD    R15<<3, R6
    VST1   [V2.D2, V3.D2], (R6)
    MOVD 48(R14), R6
    ADD    R15<<3, R6
    VST1   [V4.D2, V5.D2], (R6)
    MOVD 72(R14), R6
    ADD    R15<<3, R6
    VST1   [V6.D2, V7.D2], (R6)
    MOVD 96(R14), R6
    ADD    R15<<3, R6
    VST1   [V8.D2, V9.D2], (R6)
    MOVD 120(R14), R6
    ADD    R15<<3, R6
    VST1   [V10.D2, V11.D2], (R6)

    // Prepare for next loop
    ADD    $4, R15
    SUBS $1, R0
    BNE  mulNeon_10x6Xor_loop

mulNeon_10x6Xor_end:
    RET

// func mulNeon_10x7(matrix []byte, in [][]byte, out [][]byte, start int, n int)
// Requires: NEON
TEXT Â·mulNeon_10x7(SB), NOSPLIT, $8-88
    // Loading no tables to registers
    // Destination kept on stack
    // Full registers estimated 152 YMM used
    MOVD n+80(FP), R0
    LSR  $5, R0
    TST  R0, R0
    BEQ    mulNeon_10x7_end
    MOVD in_base+24(FP), R3
    MOVD (R3), R1
    MOVD 24(R3), R4
    MOVD 48(R3), R5
    MOVD 72(R3), R8
    MOVD 96(R3), R9
    MOVD 120(R3), R10
    MOVD 144(R3), R11
    MOVD 168(R3), R12
    MOVD 192(R3), R13
    MOVD 216(R3), R3
    MOVD out_base+48(FP), R14
    MOVD start+72(FP), R15

    // Add start offset to input
    ADD    R15, R1
    ADD    R15, R4
    ADD    R15, R5
    ADD    R15, R8
    ADD    R15, R9
    ADD    R15, R10
    ADD    R15, R11
    ADD    R15, R12
    ADD    R15, R13
    ADD    R15, R3
    LSR  $3, R15
    MOVD   $15, R6
    VMOV   R6, V14.B[0]
    VDUP   V14.B[0], V14.B16

    // Load number of input shards
    MOVD   in_len+32(FP), R16

mulNeon_10x7_loop:
    MOVD matrix_base+0(FP), R2
    // Load and process 32 bytes from input 0 to 7 outputs
    VLD1.P 32(R1), [V20.B16, V21.B16]
    VUSHR  $4, V20.B16, V22.B16
    VUSHR  $4, V21.B16, V23.B16
    VAND   V14.B16, V20.B16, V20.B16
    VAND   V14.B16, V21.B16, V21.B16
    VAND   V14.B16, V22.B16, V22.B16
    VAND   V14.B16, V23.B16, V23.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V18.B16, V0.B16
    VEOR   V17.B16, V19.B16, V1.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V18.B16, V2.B16
    VEOR   V17.B16, V19.B16, V3.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V18.B16, V4.B16
    VEOR   V17.B16, V19.B16, V5.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V18.B16, V6.B16
    VEOR   V17.B16, V19.B16, V7.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V18.B16, V8.B16
    VEOR   V17.B16, V19.B16, V9.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V18.B16, V10.B16
    VEOR   V17.B16, V19.B16, V11.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V18.B16, V12.B16
    VEOR   V17.B16, V19.B16, V13.B16
    // Check for early termination
    CMP    $1, R16
    BEQ    mulNeon_10x7_store

    // Load and process 32 bytes from input 1 to 7 outputs
    VLD1.P 32(R4), [V20.B16, V21.B16]
    VUSHR  $4, V20.B16, V22.B16
    VUSHR  $4, V21.B16, V23.B16
    VAND   V14.B16, V20.B16, V20.B16
    VAND   V14.B16, V21.B16, V21.B16
    VAND   V14.B16, V22.B16, V22.B16
    VAND   V14.B16, V23.B16, V23.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VEOR   V18.B16, V0.B16, V0.B16
    VEOR   V19.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VEOR   V18.B16, V4.B16, V4.B16
    VEOR   V19.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VEOR   V18.B16, V8.B16, V8.B16
    VEOR   V19.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V10.B16, V10.B16
    VEOR   V17.B16, V11.B16, V11.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V12.B16, V12.B16
    VEOR   V17.B16, V13.B16, V13.B16
    VEOR   V18.B16, V12.B16, V12.B16
    VEOR   V19.B16, V13.B16, V13.B16
    // Check for early termination
    CMP    $2, R16
    BEQ    mulNeon_10x7_store

    // Load and process 32 bytes from input 2 to 7 outputs
    VLD1.P 32(R5), [V20.B16, V21.B16]
    VUSHR  $4, V20.B16, V22.B16
    VUSHR  $4, V21.B16, V23.B16
    VAND   V14.B16, V20.B16, V20.B16
    VAND   V14.B16, V21.B16, V21.B16
    VAND   V14.B16, V22.B16, V22.B16
    VAND   V14.B16, V23.B16, V23.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VEOR   V18.B16, V0.B16, V0.B16
    VEOR   V19.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VEOR   V18.B16, V4.B16, V4.B16
    VEOR   V19.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VEOR   V18.B16, V8.B16, V8.B16
    VEOR   V19.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V10.B16, V10.B16
    VEOR   V17.B16, V11.B16, V11.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V12.B16, V12.B16
    VEOR   V17.B16, V13.B16, V13.B16
    VEOR   V18.B16, V12.B16, V12.B16
    VEOR   V19.B16, V13.B16, V13.B16
    // Check for early termination
    CMP    $3, R16
    BEQ    mulNeon_10x7_store

    // Load and process 32 bytes from input 3 to 7 outputs
    VLD1.P 32(R8), [V20.B16, V21.B16]
    VUSHR  $4, V20.B16, V22.B16
    VUSHR  $4, V21.B16, V23.B16
    VAND   V14.B16, V20.B16, V20.B16
    VAND   V14.B16, V21.B16, V21.B16
    VAND   V14.B16, V22.B16, V22.B16
    VAND   V14.B16, V23.B16, V23.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VEOR   V18.B16, V0.B16, V0.B16
    VEOR   V19.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VEOR   V18.B16, V4.B16, V4.B16
    VEOR   V19.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VEOR   V18.B16, V8.B16, V8.B16
    VEOR   V19.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V10.B16, V10.B16
    VEOR   V17.B16, V11.B16, V11.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V12.B16, V12.B16
    VEOR   V17.B16, V13.B16, V13.B16
    VEOR   V18.B16, V12.B16, V12.B16
    VEOR   V19.B16, V13.B16, V13.B16
    // Check for early termination
    CMP    $4, R16
    BEQ    mulNeon_10x7_store

    // Load and process 32 bytes from input 4 to 7 outputs
    VLD1.P 32(R9), [V20.B16, V21.B16]
    VUSHR  $4, V20.B16, V22.B16
    VUSHR  $4, V21.B16, V23.B16
    VAND   V14.B16, V20.B16, V20.B16
    VAND   V14.B16, V21.B16, V21.B16
    VAND   V14.B16, V22.B16, V22.B16
    VAND   V14.B16, V23.B16, V23.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VEOR   V18.B16, V0.B16, V0.B16
    VEOR   V19.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VEOR   V18.B16, V4.B16, V4.B16
    VEOR   V19.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VEOR   V18.B16, V8.B16, V8.B16
    VEOR   V19.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V10.B16, V10.B16
    VEOR   V17.B16, V11.B16, V11.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V12.B16, V12.B16
    VEOR   V17.B16, V13.B16, V13.B16
    VEOR   V18.B16, V12.B16, V12.B16
    VEOR   V19.B16, V13.B16, V13.B16
    // Check for early termination
    CMP    $5, R16
    BEQ    mulNeon_10x7_store

    // Load and process 32 bytes from input 5 to 7 outputs
    VLD1.P 32(R10), [V20.B16, V21.B16]
    VUSHR  $4, V20.B16, V22.B16
    VUSHR  $4, V21.B16, V23.B16
    VAND   V14.B16, V20.B16, V20.B16
    VAND   V14.B16, V21.B16, V21.B16
    VAND   V14.B16, V22.B16, V22.B16
    VAND   V14.B16, V23.B16, V23.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VEOR   V18.B16, V0.B16, V0.B16
    VEOR   V19.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VEOR   V18.B16, V4.B16, V4.B16
    VEOR   V19.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VEOR   V18.B16, V8.B16, V8.B16
    VEOR   V19.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V10.B16, V10.B16
    VEOR   V17.B16, V11.B16, V11.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V12.B16, V12.B16
    VEOR   V17.B16, V13.B16, V13.B16
    VEOR   V18.B16, V12.B16, V12.B16
    VEOR   V19.B16, V13.B16, V13.B16
    // Check for early termination
    CMP    $6, R16
    BEQ    mulNeon_10x7_store

    // Load and process 32 bytes from input 6 to 7 outputs
    VLD1.P 32(R11), [V20.B16, V21.B16]
    VUSHR  $4, V20.B16, V22.B16
    VUSHR  $4, V21.B16, V23.B16
    VAND   V14.B16, V20.B16, V20.B16
    VAND   V14.B16, V21.B16, V21.B16
    VAND   V14.B16, V22.B16, V22.B16
    VAND   V14.B16, V23.B16, V23.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VEOR   V18.B16, V0.B16, V0.B16
    VEOR   V19.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VEOR   V18.B16, V4.B16, V4.B16
    VEOR   V19.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VEOR   V18.B16, V8.B16, V8.B16
    VEOR   V19.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V10.B16, V10.B16
    VEOR   V17.B16, V11.B16, V11.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V12.B16, V12.B16
    VEOR   V17.B16, V13.B16, V13.B16
    VEOR   V18.B16, V12.B16, V12.B16
    VEOR   V19.B16, V13.B16, V13.B16
    // Check for early termination
    CMP    $7, R16
    BEQ    mulNeon_10x7_store

    // Load and process 32 bytes from input 7 to 7 outputs
    VLD1.P 32(R12), [V20.B16, V21.B16]
    VUSHR  $4, V20.B16, V22.B16
    VUSHR  $4, V21.B16, V23.B16
    VAND   V14.B16, V20.B16, V20.B16
    VAND   V14.B16, V21.B16, V21.B16
    VAND   V14.B16, V22.B16, V22.B16
    VAND   V14.B16, V23.B16, V23.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VEOR   V18.B16, V0.B16, V0.B16
    VEOR   V19.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VEOR   V18.B16, V4.B16, V4.B16
    VEOR   V19.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VEOR   V18.B16, V8.B16, V8.B16
    VEOR   V19.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V10.B16, V10.B16
    VEOR   V17.B16, V11.B16, V11.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V12.B16, V12.B16
    VEOR   V17.B16, V13.B16, V13.B16
    VEOR   V18.B16, V12.B16, V12.B16
    VEOR   V19.B16, V13.B16, V13.B16
    // Check for early termination
    CMP    $8, R16
    BEQ    mulNeon_10x7_store

    // Load and process 32 bytes from input 8 to 7 outputs
    VLD1.P 32(R13), [V20.B16, V21.B16]
    VUSHR  $4, V20.B16, V22.B16
    VUSHR  $4, V21.B16, V23.B16
    VAND   V14.B16, V20.B16, V20.B16
    VAND   V14.B16, V21.B16, V21.B16
    VAND   V14.B16, V22.B16, V22.B16
    VAND   V14.B16, V23.B16, V23.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VEOR   V18.B16, V0.B16, V0.B16
    VEOR   V19.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VEOR   V18.B16, V4.B16, V4.B16
    VEOR   V19.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VEOR   V18.B16, V8.B16, V8.B16
    VEOR   V19.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V10.B16, V10.B16
    VEOR   V17.B16, V11.B16, V11.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V12.B16, V12.B16
    VEOR   V17.B16, V13.B16, V13.B16
    VEOR   V18.B16, V12.B16, V12.B16
    VEOR   V19.B16, V13.B16, V13.B16
    // Check for early termination
    CMP    $9, R16
    BEQ    mulNeon_10x7_store

    // Load and process 32 bytes from input 9 to 7 outputs
    VLD1.P 32(R3), [V20.B16, V21.B16]
    VUSHR  $4, V20.B16, V22.B16
    VUSHR  $4, V21.B16, V23.B16
    VAND   V14.B16, V20.B16, V20.B16
    VAND   V14.B16, V21.B16, V21.B16
    VAND   V14.B16, V22.B16, V22.B16
    VAND   V14.B16, V23.B16, V23.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VEOR   V18.B16, V0.B16, V0.B16
    VEOR   V19.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VEOR   V18.B16, V4.B16, V4.B16
    VEOR   V19.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VEOR   V18.B16, V8.B16, V8.B16
    VEOR   V19.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V10.B16, V10.B16
    VEOR   V17.B16, V11.B16, V11.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V12.B16, V12.B16
    VEOR   V17.B16, V13.B16, V13.B16
    VEOR   V18.B16, V12.B16, V12.B16
    VEOR   V19.B16, V13.B16, V13.B16

mulNeon_10x7_store:
    // Store 7 outputs
    MOVD (R14), R6
    ADD    R15<<3, R6
    VST1   [V0.D2, V1.D2], (R6)
    MOVD 24(R14), R6
    ADD    R15<<3, R6
    VST1   [V2.D2, V3.D2], (R6)
    MOVD 48(R14), R6
    ADD    R15<<3, R6
    VST1   [V4.D2, V5.D2], (R6)
    MOVD 72(R14), R6
    ADD    R15<<3, R6
    VST1   [V6.D2, V7.D2], (R6)
    MOVD 96(R14), R6
    ADD    R15<<3, R6
    VST1   [V8.D2, V9.D2], (R6)
    MOVD 120(R14), R6
    ADD    R15<<3, R6
    VST1   [V10.D2, V11.D2], (R6)
    MOVD 144(R14), R6
    ADD    R15<<3, R6
    VST1   [V12.D2, V13.D2], (R6)

    // Prepare for next loop
    ADD    $4, R15
    SUBS $1, R0
    BNE  mulNeon_10x7_loop

mulNeon_10x7_end:
    RET

// func mulNeon_10x7Xor(matrix []byte, in [][]byte, out [][]byte, start int, n int)
// Requires: NEON
TEXT Â·mulNeon_10x7Xor(SB), NOSPLIT, $8-88
    // Loading no tables to registers
    // Destination kept on stack
    // Full registers estimated 152 YMM used
    MOVD n+80(FP), R0
    LSR  $5, R0
    TST  R0, R0
    BEQ    mulNeon_10x7Xor_end
    MOVD in_base+24(FP), R3
    MOVD (R3), R1
    MOVD 24(R3), R4
    MOVD 48(R3), R5
    MOVD 72(R3), R8
    MOVD 96(R3), R9
    MOVD 120(R3), R10
    MOVD 144(R3), R11
    MOVD 168(R3), R12
    MOVD 192(R3), R13
    MOVD 216(R3), R3
    MOVD out_base+48(FP), R14
    MOVD start+72(FP), R15

    // Add start offset to input
    ADD    R15, R1
    ADD    R15, R4
    ADD    R15, R5
    ADD    R15, R8
    ADD    R15, R9
    ADD    R15, R10
    ADD    R15, R11
    ADD    R15, R12
    ADD    R15, R13
    ADD    R15, R3
    LSR  $3, R15
    MOVD   $15, R6
    VMOV   R6, V14.B[0]
    VDUP   V14.B[0], V14.B16

    // Load number of input shards
    MOVD   in_len+32(FP), R16

mulNeon_10x7Xor_loop:
    MOVD matrix_base+0(FP), R2
    // Load and process 32 bytes from input 0 to 7 outputs
    VLD1.P 32(R1), [V20.B16, V21.B16]
    VUSHR  $4, V20.B16, V22.B16
    VUSHR  $4, V21.B16, V23.B16
    VAND   V14.B16, V20.B16, V20.B16
    VAND   V14.B16, V21.B16, V21.B16
    VAND   V14.B16, V22.B16, V22.B16
    VAND   V14.B16, V23.B16, V23.B16
    MOVD (R14), R6
    ADD    R15<<3, R6
    VLD1   (R6), [V0.B16, V1.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VEOR   V18.B16, V0.B16, V0.B16
    VEOR   V19.B16, V1.B16, V1.B16
    MOVD 24(R14), R6
    ADD    R15<<3, R6
    VLD1   (R6), [V2.B16, V3.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    MOVD 48(R14), R6
    ADD    R15<<3, R6
    VLD1   (R6), [V4.B16, V5.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VEOR   V18.B16, V4.B16, V4.B16
    VEOR   V19.B16, V5.B16, V5.B16
    MOVD 72(R14), R6
    ADD    R15<<3, R6
    VLD1   (R6), [V6.B16, V7.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    MOVD 96(R14), R6
    ADD    R15<<3, R6
    VLD1   (R6), [V8.B16, V9.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VEOR   V18.B16, V8.B16, V8.B16
    VEOR   V19.B16, V9.B16, V9.B16
    MOVD 120(R14), R6
    ADD    R15<<3, R6
    VLD1   (R6), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V10.B16, V10.B16
    VEOR   V17.B16, V11.B16, V11.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    MOVD 144(R14), R6
    ADD    R15<<3, R6
    VLD1   (R6), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V12.B16, V12.B16
    VEOR   V17.B16, V13.B16, V13.B16
    VEOR   V18.B16, V12.B16, V12.B16
    VEOR   V19.B16, V13.B16, V13.B16
    // Check for early termination
    CMP    $1, R16
    BEQ    mulNeon_10x7Xor_store

    // Load and process 32 bytes from input 1 to 7 outputs
    VLD1.P 32(R4), [V20.B16, V21.B16]
    VUSHR  $4, V20.B16, V22.B16
    VUSHR  $4, V21.B16, V23.B16
    VAND   V14.B16, V20.B16, V20.B16
    VAND   V14.B16, V21.B16, V21.B16
    VAND   V14.B16, V22.B16, V22.B16
    VAND   V14.B16, V23.B16, V23.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VEOR   V18.B16, V0.B16, V0.B16
    VEOR   V19.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VEOR   V18.B16, V4.B16, V4.B16
    VEOR   V19.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VEOR   V18.B16, V8.B16, V8.B16
    VEOR   V19.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V10.B16, V10.B16
    VEOR   V17.B16, V11.B16, V11.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V12.B16, V12.B16
    VEOR   V17.B16, V13.B16, V13.B16
    VEOR   V18.B16, V12.B16, V12.B16
    VEOR   V19.B16, V13.B16, V13.B16
    // Check for early termination
    CMP    $2, R16
    BEQ    mulNeon_10x7Xor_store

    // Load and process 32 bytes from input 2 to 7 outputs
    VLD1.P 32(R5), [V20.B16, V21.B16]
    VUSHR  $4, V20.B16, V22.B16
    VUSHR  $4, V21.B16, V23.B16
    VAND   V14.B16, V20.B16, V20.B16
    VAND   V14.B16, V21.B16, V21.B16
    VAND   V14.B16, V22.B16, V22.B16
    VAND   V14.B16, V23.B16, V23.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VEOR   V18.B16, V0.B16, V0.B16
    VEOR   V19.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VEOR   V18.B16, V4.B16, V4.B16
    VEOR   V19.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VEOR   V18.B16, V8.B16, V8.B16
    VEOR   V19.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V10.B16, V10.B16
    VEOR   V17.B16, V11.B16, V11.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V12.B16, V12.B16
    VEOR   V17.B16, V13.B16, V13.B16
    VEOR   V18.B16, V12.B16, V12.B16
    VEOR   V19.B16, V13.B16, V13.B16
    // Check for early termination
    CMP    $3, R16
    BEQ    mulNeon_10x7Xor_store

    // Load and process 32 bytes from input 3 to 7 outputs
    VLD1.P 32(R8), [V20.B16, V21.B16]
    VUSHR  $4, V20.B16, V22.B16
    VUSHR  $4, V21.B16, V23.B16
    VAND   V14.B16, V20.B16, V20.B16
    VAND   V14.B16, V21.B16, V21.B16
    VAND   V14.B16, V22.B16, V22.B16
    VAND   V14.B16, V23.B16, V23.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VEOR   V18.B16, V0.B16, V0.B16
    VEOR   V19.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VEOR   V18.B16, V4.B16, V4.B16
    VEOR   V19.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VEOR   V18.B16, V8.B16, V8.B16
    VEOR   V19.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V10.B16, V10.B16
    VEOR   V17.B16, V11.B16, V11.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V12.B16, V12.B16
    VEOR   V17.B16, V13.B16, V13.B16
    VEOR   V18.B16, V12.B16, V12.B16
    VEOR   V19.B16, V13.B16, V13.B16
    // Check for early termination
    CMP    $4, R16
    BEQ    mulNeon_10x7Xor_store

    // Load and process 32 bytes from input 4 to 7 outputs
    VLD1.P 32(R9), [V20.B16, V21.B16]
    VUSHR  $4, V20.B16, V22.B16
    VUSHR  $4, V21.B16, V23.B16
    VAND   V14.B16, V20.B16, V20.B16
    VAND   V14.B16, V21.B16, V21.B16
    VAND   V14.B16, V22.B16, V22.B16
    VAND   V14.B16, V23.B16, V23.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VEOR   V18.B16, V0.B16, V0.B16
    VEOR   V19.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VEOR   V18.B16, V4.B16, V4.B16
    VEOR   V19.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VEOR   V18.B16, V8.B16, V8.B16
    VEOR   V19.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V10.B16, V10.B16
    VEOR   V17.B16, V11.B16, V11.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V12.B16, V12.B16
    VEOR   V17.B16, V13.B16, V13.B16
    VEOR   V18.B16, V12.B16, V12.B16
    VEOR   V19.B16, V13.B16, V13.B16
    // Check for early termination
    CMP    $5, R16
    BEQ    mulNeon_10x7Xor_store

    // Load and process 32 bytes from input 5 to 7 outputs
    VLD1.P 32(R10), [V20.B16, V21.B16]
    VUSHR  $4, V20.B16, V22.B16
    VUSHR  $4, V21.B16, V23.B16
    VAND   V14.B16, V20.B16, V20.B16
    VAND   V14.B16, V21.B16, V21.B16
    VAND   V14.B16, V22.B16, V22.B16
    VAND   V14.B16, V23.B16, V23.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VEOR   V18.B16, V0.B16, V0.B16
    VEOR   V19.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VEOR   V18.B16, V4.B16, V4.B16
    VEOR   V19.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VEOR   V18.B16, V8.B16, V8.B16
    VEOR   V19.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V10.B16, V10.B16
    VEOR   V17.B16, V11.B16, V11.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V12.B16, V12.B16
    VEOR   V17.B16, V13.B16, V13.B16
    VEOR   V18.B16, V12.B16, V12.B16
    VEOR   V19.B16, V13.B16, V13.B16
    // Check for early termination
    CMP    $6, R16
    BEQ    mulNeon_10x7Xor_store

    // Load and process 32 bytes from input 6 to 7 outputs
    VLD1.P 32(R11), [V20.B16, V21.B16]
    VUSHR  $4, V20.B16, V22.B16
    VUSHR  $4, V21.B16, V23.B16
    VAND   V14.B16, V20.B16, V20.B16
    VAND   V14.B16, V21.B16, V21.B16
    VAND   V14.B16, V22.B16, V22.B16
    VAND   V14.B16, V23.B16, V23.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VEOR   V18.B16, V0.B16, V0.B16
    VEOR   V19.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VEOR   V18.B16, V4.B16, V4.B16
    VEOR   V19.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VEOR   V18.B16, V8.B16, V8.B16
    VEOR   V19.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V10.B16, V10.B16
    VEOR   V17.B16, V11.B16, V11.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V12.B16, V12.B16
    VEOR   V17.B16, V13.B16, V13.B16
    VEOR   V18.B16, V12.B16, V12.B16
    VEOR   V19.B16, V13.B16, V13.B16
    // Check for early termination
    CMP    $7, R16
    BEQ    mulNeon_10x7Xor_store

    // Load and process 32 bytes from input 7 to 7 outputs
    VLD1.P 32(R12), [V20.B16, V21.B16]
    VUSHR  $4, V20.B16, V22.B16
    VUSHR  $4, V21.B16, V23.B16
    VAND   V14.B16, V20.B16, V20.B16
    VAND   V14.B16, V21.B16, V21.B16
    VAND   V14.B16, V22.B16, V22.B16
    VAND   V14.B16, V23.B16, V23.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VEOR   V18.B16, V0.B16, V0.B16
    VEOR   V19.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VEOR   V18.B16, V4.B16, V4.B16
    VEOR   V19.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VEOR   V18.B16, V8.B16, V8.B16
    VEOR   V19.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V10.B16, V10.B16
    VEOR   V17.B16, V11.B16, V11.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V12.B16, V12.B16
    VEOR   V17.B16, V13.B16, V13.B16
    VEOR   V18.B16, V12.B16, V12.B16
    VEOR   V19.B16, V13.B16, V13.B16
    // Check for early termination
    CMP    $8, R16
    BEQ    mulNeon_10x7Xor_store

    // Load and process 32 bytes from input 8 to 7 outputs
    VLD1.P 32(R13), [V20.B16, V21.B16]
    VUSHR  $4, V20.B16, V22.B16
    VUSHR  $4, V21.B16, V23.B16
    VAND   V14.B16, V20.B16, V20.B16
    VAND   V14.B16, V21.B16, V21.B16
    VAND   V14.B16, V22.B16, V22.B16
    VAND   V14.B16, V23.B16, V23.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VEOR   V18.B16, V0.B16, V0.B16
    VEOR   V19.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VEOR   V18.B16, V4.B16, V4.B16
    VEOR   V19.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VEOR   V18.B16, V8.B16, V8.B16
    VEOR   V19.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V10.B16, V10.B16
    VEOR   V17.B16, V11.B16, V11.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V12.B16, V12.B16
    VEOR   V17.B16, V13.B16, V13.B16
    VEOR   V18.B16, V12.B16, V12.B16
    VEOR   V19.B16, V13.B16, V13.B16
    // Check for early termination
    CMP    $9, R16
    BEQ    mulNeon_10x7Xor_store

    // Load and process 32 bytes from input 9 to 7 outputs
    VLD1.P 32(R3), [V20.B16, V21.B16]
    VUSHR  $4, V20.B16, V22.B16
    VUSHR  $4, V21.B16, V23.B16
    VAND   V14.B16, V20.B16, V20.B16
    VAND   V14.B16, V21.B16, V21.B16
    VAND   V14.B16, V22.B16, V22.B16
    VAND   V14.B16, V23.B16, V23.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V0.B16, V0.B16
    VEOR   V17.B16, V1.B16, V1.B16
    VEOR   V18.B16, V0.B16, V0.B16
    VEOR   V19.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V2.B16, V2.B16
    VEOR   V17.B16, V3.B16, V3.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V4.B16, V4.B16
    VEOR   V17.B16, V5.B16, V5.B16
    VEOR   V18.B16, V4.B16, V4.B16
    VEOR   V19.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V6.B16, V6.B16
    VEOR   V17.B16, V7.B16, V7.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V8.B16, V8.B16
    VEOR   V17.B16, V9.B16, V9.B16
    VEOR   V18.B16, V8.B16, V8.B16
    VEOR   V19.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V10.B16, V10.B16
    VEOR   V17.B16, V11.B16, V11.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VTBL   V20.B16, [V16.B16], V16.B16
    VTBL   V21.B16, [V17.B16], V17.B16
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VEOR   V16.B16, V12.B16, V12.B16
    VEOR   V17.B16, V13.B16, V13.B16
    VEOR   V18.B16, V12.B16, V12.B16
    VEOR   V19.B16, V13.B16, V13.B16

mulNeon_10x7Xor_store:
    // Store 7 outputs
    MOVD (R14), R6
    ADD    R15<<3, R6
    VST1   [V0.D2, V1.D2], (R6)
    MOVD 24(R14), R6
    ADD    R15<<3, R6
    VST1   [V2.D2, V3.D2], (R6)
    MOVD 48(R14), R6
    ADD    R15<<3, R6
    VST1   [V4.D2, V5.D2], (R6)
    MOVD 72(R14), R6
    ADD    R15<<3, R6
    VST1   [V6.D2, V7.D2], (R6)
    MOVD 96(R14), R6
    ADD    R15<<3, R6
    VST1   [V8.D2, V9.D2], (R6)
    MOVD 120(R14), R6
    ADD    R15<<3, R6
    VST1   [V10.D2, V11.D2], (R6)
    MOVD 144(R14), R6
    ADD    R15<<3, R6
    VST1   [V12.D2, V13.D2], (R6)

    // Prepare for next loop
    ADD    $4, R15
    SUBS $1, R0
    BNE  mulNeon_10x7Xor_loop

mulNeon_10x7Xor_end:
    RET

// func mulNeon_10x8(matrix []byte, in [][]byte, out [][]byte, start int, n int)
// Requires: NEON
TEXT Â·mulNeon_10x8(SB), NOSPLIT, $8-88
    // Loading no tables to registers
    // Destination kept on stack
    // Full registers estimated 173 YMM used
    MOVD n+80(FP), R0
    LSR  $5, R0
    TST  R0, R0
    BEQ    mulNeon_10x8_end
    MOVD in_base+24(FP), R3
    MOVD (R3), R1
    MOVD 24(R3), R4
    MOVD 48(R3), R5
    MOVD 72(R3), R8
    MOVD 96(R3), R9
    MOVD 120(R3), R10
    MOVD 144(R3), R11
    MOVD 168(R3), R12
    MOVD 192(R3), R13
    MOVD 216(R3), R3
    MOVD out_base+48(FP), R14
    MOVD start+72(FP), R15

    // Add start offset to input
    ADD    R15, R1
    ADD    R15, R4
    ADD    R15, R5
    ADD    R15, R8
    ADD    R15, R9
    ADD    R15, R10
    ADD    R15, R11
    ADD    R15, R12
    ADD    R15, R13
    ADD    R15, R3
    LSR  $3, R15
    MOVD   $15, R6
    VMOV   R6, V16.B[0]
    VDUP   V16.B[0], V16.B16

    // Load number of input shards
    MOVD   in_len+32(FP), R16

mulNeon_10x8_loop:
    MOVD matrix_base+0(FP), R2
    // Load and process 32 bytes from input 0 to 8 outputs
    VLD1.P 32(R1), [V22.B16, V23.B16]
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VAND   V16.B16, V22.B16, V22.B16
    VAND   V16.B16, V23.B16, V23.B16
    VAND   V16.B16, V24.B16, V24.B16
    VAND   V16.B16, V25.B16, V25.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V20.B16, V0.B16
    VEOR   V19.B16, V21.B16, V1.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V20.B16, V2.B16
    VEOR   V19.B16, V21.B16, V3.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V20.B16, V4.B16
    VEOR   V19.B16, V21.B16, V5.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V20.B16, V6.B16
    VEOR   V19.B16, V21.B16, V7.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V20.B16, V8.B16
    VEOR   V19.B16, V21.B16, V9.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V20.B16, V10.B16
    VEOR   V19.B16, V21.B16, V11.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V20.B16, V12.B16
    VEOR   V19.B16, V21.B16, V13.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V20.B16, V14.B16
    VEOR   V19.B16, V21.B16, V15.B16
    // Check for early termination
    CMP    $1, R16
    BEQ    mulNeon_10x8_store

    // Load and process 32 bytes from input 1 to 8 outputs
    VLD1.P 32(R4), [V22.B16, V23.B16]
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VAND   V16.B16, V22.B16, V22.B16
    VAND   V16.B16, V23.B16, V23.B16
    VAND   V16.B16, V24.B16, V24.B16
    VAND   V16.B16, V25.B16, V25.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V0.B16, V0.B16
    VEOR   V19.B16, V1.B16, V1.B16
    VEOR   V20.B16, V0.B16, V0.B16
    VEOR   V21.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V4.B16, V4.B16
    VEOR   V19.B16, V5.B16, V5.B16
    VEOR   V20.B16, V4.B16, V4.B16
    VEOR   V21.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V8.B16, V8.B16
    VEOR   V19.B16, V9.B16, V9.B16
    VEOR   V20.B16, V8.B16, V8.B16
    VEOR   V21.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V12.B16, V12.B16
    VEOR   V19.B16, V13.B16, V13.B16
    VEOR   V20.B16, V12.B16, V12.B16
    VEOR   V21.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V14.B16, V14.B16
    VEOR   V19.B16, V15.B16, V15.B16
    VEOR   V20.B16, V14.B16, V14.B16
    VEOR   V21.B16, V15.B16, V15.B16
    // Check for early termination
    CMP    $2, R16
    BEQ    mulNeon_10x8_store

    // Load and process 32 bytes from input 2 to 8 outputs
    VLD1.P 32(R5), [V22.B16, V23.B16]
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VAND   V16.B16, V22.B16, V22.B16
    VAND   V16.B16, V23.B16, V23.B16
    VAND   V16.B16, V24.B16, V24.B16
    VAND   V16.B16, V25.B16, V25.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V0.B16, V0.B16
    VEOR   V19.B16, V1.B16, V1.B16
    VEOR   V20.B16, V0.B16, V0.B16
    VEOR   V21.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V4.B16, V4.B16
    VEOR   V19.B16, V5.B16, V5.B16
    VEOR   V20.B16, V4.B16, V4.B16
    VEOR   V21.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V8.B16, V8.B16
    VEOR   V19.B16, V9.B16, V9.B16
    VEOR   V20.B16, V8.B16, V8.B16
    VEOR   V21.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V12.B16, V12.B16
    VEOR   V19.B16, V13.B16, V13.B16
    VEOR   V20.B16, V12.B16, V12.B16
    VEOR   V21.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V14.B16, V14.B16
    VEOR   V19.B16, V15.B16, V15.B16
    VEOR   V20.B16, V14.B16, V14.B16
    VEOR   V21.B16, V15.B16, V15.B16
    // Check for early termination
    CMP    $3, R16
    BEQ    mulNeon_10x8_store

    // Load and process 32 bytes from input 3 to 8 outputs
    VLD1.P 32(R8), [V22.B16, V23.B16]
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VAND   V16.B16, V22.B16, V22.B16
    VAND   V16.B16, V23.B16, V23.B16
    VAND   V16.B16, V24.B16, V24.B16
    VAND   V16.B16, V25.B16, V25.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V0.B16, V0.B16
    VEOR   V19.B16, V1.B16, V1.B16
    VEOR   V20.B16, V0.B16, V0.B16
    VEOR   V21.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V4.B16, V4.B16
    VEOR   V19.B16, V5.B16, V5.B16
    VEOR   V20.B16, V4.B16, V4.B16
    VEOR   V21.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V8.B16, V8.B16
    VEOR   V19.B16, V9.B16, V9.B16
    VEOR   V20.B16, V8.B16, V8.B16
    VEOR   V21.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V12.B16, V12.B16
    VEOR   V19.B16, V13.B16, V13.B16
    VEOR   V20.B16, V12.B16, V12.B16
    VEOR   V21.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V14.B16, V14.B16
    VEOR   V19.B16, V15.B16, V15.B16
    VEOR   V20.B16, V14.B16, V14.B16
    VEOR   V21.B16, V15.B16, V15.B16
    // Check for early termination
    CMP    $4, R16
    BEQ    mulNeon_10x8_store

    // Load and process 32 bytes from input 4 to 8 outputs
    VLD1.P 32(R9), [V22.B16, V23.B16]
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VAND   V16.B16, V22.B16, V22.B16
    VAND   V16.B16, V23.B16, V23.B16
    VAND   V16.B16, V24.B16, V24.B16
    VAND   V16.B16, V25.B16, V25.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V0.B16, V0.B16
    VEOR   V19.B16, V1.B16, V1.B16
    VEOR   V20.B16, V0.B16, V0.B16
    VEOR   V21.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V4.B16, V4.B16
    VEOR   V19.B16, V5.B16, V5.B16
    VEOR   V20.B16, V4.B16, V4.B16
    VEOR   V21.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V8.B16, V8.B16
    VEOR   V19.B16, V9.B16, V9.B16
    VEOR   V20.B16, V8.B16, V8.B16
    VEOR   V21.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V12.B16, V12.B16
    VEOR   V19.B16, V13.B16, V13.B16
    VEOR   V20.B16, V12.B16, V12.B16
    VEOR   V21.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V14.B16, V14.B16
    VEOR   V19.B16, V15.B16, V15.B16
    VEOR   V20.B16, V14.B16, V14.B16
    VEOR   V21.B16, V15.B16, V15.B16
    // Check for early termination
    CMP    $5, R16
    BEQ    mulNeon_10x8_store

    // Load and process 32 bytes from input 5 to 8 outputs
    VLD1.P 32(R10), [V22.B16, V23.B16]
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VAND   V16.B16, V22.B16, V22.B16
    VAND   V16.B16, V23.B16, V23.B16
    VAND   V16.B16, V24.B16, V24.B16
    VAND   V16.B16, V25.B16, V25.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V0.B16, V0.B16
    VEOR   V19.B16, V1.B16, V1.B16
    VEOR   V20.B16, V0.B16, V0.B16
    VEOR   V21.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V4.B16, V4.B16
    VEOR   V19.B16, V5.B16, V5.B16
    VEOR   V20.B16, V4.B16, V4.B16
    VEOR   V21.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V8.B16, V8.B16
    VEOR   V19.B16, V9.B16, V9.B16
    VEOR   V20.B16, V8.B16, V8.B16
    VEOR   V21.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V12.B16, V12.B16
    VEOR   V19.B16, V13.B16, V13.B16
    VEOR   V20.B16, V12.B16, V12.B16
    VEOR   V21.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V14.B16, V14.B16
    VEOR   V19.B16, V15.B16, V15.B16
    VEOR   V20.B16, V14.B16, V14.B16
    VEOR   V21.B16, V15.B16, V15.B16
    // Check for early termination
    CMP    $6, R16
    BEQ    mulNeon_10x8_store

    // Load and process 32 bytes from input 6 to 8 outputs
    VLD1.P 32(R11), [V22.B16, V23.B16]
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VAND   V16.B16, V22.B16, V22.B16
    VAND   V16.B16, V23.B16, V23.B16
    VAND   V16.B16, V24.B16, V24.B16
    VAND   V16.B16, V25.B16, V25.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V0.B16, V0.B16
    VEOR   V19.B16, V1.B16, V1.B16
    VEOR   V20.B16, V0.B16, V0.B16
    VEOR   V21.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V4.B16, V4.B16
    VEOR   V19.B16, V5.B16, V5.B16
    VEOR   V20.B16, V4.B16, V4.B16
    VEOR   V21.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V8.B16, V8.B16
    VEOR   V19.B16, V9.B16, V9.B16
    VEOR   V20.B16, V8.B16, V8.B16
    VEOR   V21.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V12.B16, V12.B16
    VEOR   V19.B16, V13.B16, V13.B16
    VEOR   V20.B16, V12.B16, V12.B16
    VEOR   V21.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V14.B16, V14.B16
    VEOR   V19.B16, V15.B16, V15.B16
    VEOR   V20.B16, V14.B16, V14.B16
    VEOR   V21.B16, V15.B16, V15.B16
    // Check for early termination
    CMP    $7, R16
    BEQ    mulNeon_10x8_store

    // Load and process 32 bytes from input 7 to 8 outputs
    VLD1.P 32(R12), [V22.B16, V23.B16]
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VAND   V16.B16, V22.B16, V22.B16
    VAND   V16.B16, V23.B16, V23.B16
    VAND   V16.B16, V24.B16, V24.B16
    VAND   V16.B16, V25.B16, V25.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V0.B16, V0.B16
    VEOR   V19.B16, V1.B16, V1.B16
    VEOR   V20.B16, V0.B16, V0.B16
    VEOR   V21.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V4.B16, V4.B16
    VEOR   V19.B16, V5.B16, V5.B16
    VEOR   V20.B16, V4.B16, V4.B16
    VEOR   V21.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V8.B16, V8.B16
    VEOR   V19.B16, V9.B16, V9.B16
    VEOR   V20.B16, V8.B16, V8.B16
    VEOR   V21.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V12.B16, V12.B16
    VEOR   V19.B16, V13.B16, V13.B16
    VEOR   V20.B16, V12.B16, V12.B16
    VEOR   V21.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V14.B16, V14.B16
    VEOR   V19.B16, V15.B16, V15.B16
    VEOR   V20.B16, V14.B16, V14.B16
    VEOR   V21.B16, V15.B16, V15.B16
    // Check for early termination
    CMP    $8, R16
    BEQ    mulNeon_10x8_store

    // Load and process 32 bytes from input 8 to 8 outputs
    VLD1.P 32(R13), [V22.B16, V23.B16]
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VAND   V16.B16, V22.B16, V22.B16
    VAND   V16.B16, V23.B16, V23.B16
    VAND   V16.B16, V24.B16, V24.B16
    VAND   V16.B16, V25.B16, V25.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V0.B16, V0.B16
    VEOR   V19.B16, V1.B16, V1.B16
    VEOR   V20.B16, V0.B16, V0.B16
    VEOR   V21.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V4.B16, V4.B16
    VEOR   V19.B16, V5.B16, V5.B16
    VEOR   V20.B16, V4.B16, V4.B16
    VEOR   V21.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V8.B16, V8.B16
    VEOR   V19.B16, V9.B16, V9.B16
    VEOR   V20.B16, V8.B16, V8.B16
    VEOR   V21.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V12.B16, V12.B16
    VEOR   V19.B16, V13.B16, V13.B16
    VEOR   V20.B16, V12.B16, V12.B16
    VEOR   V21.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V14.B16, V14.B16
    VEOR   V19.B16, V15.B16, V15.B16
    VEOR   V20.B16, V14.B16, V14.B16
    VEOR   V21.B16, V15.B16, V15.B16
    // Check for early termination
    CMP    $9, R16
    BEQ    mulNeon_10x8_store

    // Load and process 32 bytes from input 9 to 8 outputs
    VLD1.P 32(R3), [V22.B16, V23.B16]
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VAND   V16.B16, V22.B16, V22.B16
    VAND   V16.B16, V23.B16, V23.B16
    VAND   V16.B16, V24.B16, V24.B16
    VAND   V16.B16, V25.B16, V25.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V0.B16, V0.B16
    VEOR   V19.B16, V1.B16, V1.B16
    VEOR   V20.B16, V0.B16, V0.B16
    VEOR   V21.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V4.B16, V4.B16
    VEOR   V19.B16, V5.B16, V5.B16
    VEOR   V20.B16, V4.B16, V4.B16
    VEOR   V21.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V8.B16, V8.B16
    VEOR   V19.B16, V9.B16, V9.B16
    VEOR   V20.B16, V8.B16, V8.B16
    VEOR   V21.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V12.B16, V12.B16
    VEOR   V19.B16, V13.B16, V13.B16
    VEOR   V20.B16, V12.B16, V12.B16
    VEOR   V21.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V14.B16, V14.B16
    VEOR   V19.B16, V15.B16, V15.B16
    VEOR   V20.B16, V14.B16, V14.B16
    VEOR   V21.B16, V15.B16, V15.B16

mulNeon_10x8_store:
    // Store 8 outputs
    MOVD (R14), R6
    ADD    R15<<3, R6
    VST1   [V0.D2, V1.D2], (R6)
    MOVD 24(R14), R6
    ADD    R15<<3, R6
    VST1   [V2.D2, V3.D2], (R6)
    MOVD 48(R14), R6
    ADD    R15<<3, R6
    VST1   [V4.D2, V5.D2], (R6)
    MOVD 72(R14), R6
    ADD    R15<<3, R6
    VST1   [V6.D2, V7.D2], (R6)
    MOVD 96(R14), R6
    ADD    R15<<3, R6
    VST1   [V8.D2, V9.D2], (R6)
    MOVD 120(R14), R6
    ADD    R15<<3, R6
    VST1   [V10.D2, V11.D2], (R6)
    MOVD 144(R14), R6
    ADD    R15<<3, R6
    VST1   [V12.D2, V13.D2], (R6)
    MOVD 168(R14), R6
    ADD    R15<<3, R6
    VST1   [V14.D2, V15.D2], (R6)

    // Prepare for next loop
    ADD    $4, R15
    SUBS $1, R0
    BNE  mulNeon_10x8_loop

mulNeon_10x8_end:
    RET

// func mulNeon_10x8Xor(matrix []byte, in [][]byte, out [][]byte, start int, n int)
// Requires: NEON
TEXT Â·mulNeon_10x8Xor(SB), NOSPLIT, $8-88
    // Loading no tables to registers
    // Destination kept on stack
    // Full registers estimated 173 YMM used
    MOVD n+80(FP), R0
    LSR  $5, R0
    TST  R0, R0
    BEQ    mulNeon_10x8Xor_end
    MOVD in_base+24(FP), R3
    MOVD (R3), R1
    MOVD 24(R3), R4
    MOVD 48(R3), R5
    MOVD 72(R3), R8
    MOVD 96(R3), R9
    MOVD 120(R3), R10
    MOVD 144(R3), R11
    MOVD 168(R3), R12
    MOVD 192(R3), R13
    MOVD 216(R3), R3
    MOVD out_base+48(FP), R14
    MOVD start+72(FP), R15

    // Add start offset to input
    ADD    R15, R1
    ADD    R15, R4
    ADD    R15, R5
    ADD    R15, R8
    ADD    R15, R9
    ADD    R15, R10
    ADD    R15, R11
    ADD    R15, R12
    ADD    R15, R13
    ADD    R15, R3
    LSR  $3, R15
    MOVD   $15, R6
    VMOV   R6, V16.B[0]
    VDUP   V16.B[0], V16.B16

    // Load number of input shards
    MOVD   in_len+32(FP), R16

mulNeon_10x8Xor_loop:
    MOVD matrix_base+0(FP), R2
    // Load and process 32 bytes from input 0 to 8 outputs
    VLD1.P 32(R1), [V22.B16, V23.B16]
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VAND   V16.B16, V22.B16, V22.B16
    VAND   V16.B16, V23.B16, V23.B16
    VAND   V16.B16, V24.B16, V24.B16
    VAND   V16.B16, V25.B16, V25.B16
    MOVD (R14), R6
    ADD    R15<<3, R6
    VLD1   (R6), [V0.B16, V1.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V0.B16, V0.B16
    VEOR   V19.B16, V1.B16, V1.B16
    VEOR   V20.B16, V0.B16, V0.B16
    VEOR   V21.B16, V1.B16, V1.B16
    MOVD 24(R14), R6
    ADD    R15<<3, R6
    VLD1   (R6), [V2.B16, V3.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    MOVD 48(R14), R6
    ADD    R15<<3, R6
    VLD1   (R6), [V4.B16, V5.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V4.B16, V4.B16
    VEOR   V19.B16, V5.B16, V5.B16
    VEOR   V20.B16, V4.B16, V4.B16
    VEOR   V21.B16, V5.B16, V5.B16
    MOVD 72(R14), R6
    ADD    R15<<3, R6
    VLD1   (R6), [V6.B16, V7.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    MOVD 96(R14), R6
    ADD    R15<<3, R6
    VLD1   (R6), [V8.B16, V9.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V8.B16, V8.B16
    VEOR   V19.B16, V9.B16, V9.B16
    VEOR   V20.B16, V8.B16, V8.B16
    VEOR   V21.B16, V9.B16, V9.B16
    MOVD 120(R14), R6
    ADD    R15<<3, R6
    VLD1   (R6), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    MOVD 144(R14), R6
    ADD    R15<<3, R6
    VLD1   (R6), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V12.B16, V12.B16
    VEOR   V19.B16, V13.B16, V13.B16
    VEOR   V20.B16, V12.B16, V12.B16
    VEOR   V21.B16, V13.B16, V13.B16
    MOVD 168(R14), R6
    ADD    R15<<3, R6
    VLD1   (R6), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V14.B16, V14.B16
    VEOR   V19.B16, V15.B16, V15.B16
    VEOR   V20.B16, V14.B16, V14.B16
    VEOR   V21.B16, V15.B16, V15.B16
    // Check for early termination
    CMP    $1, R16
    BEQ    mulNeon_10x8Xor_store

    // Load and process 32 bytes from input 1 to 8 outputs
    VLD1.P 32(R4), [V22.B16, V23.B16]
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VAND   V16.B16, V22.B16, V22.B16
    VAND   V16.B16, V23.B16, V23.B16
    VAND   V16.B16, V24.B16, V24.B16
    VAND   V16.B16, V25.B16, V25.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V0.B16, V0.B16
    VEOR   V19.B16, V1.B16, V1.B16
    VEOR   V20.B16, V0.B16, V0.B16
    VEOR   V21.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V4.B16, V4.B16
    VEOR   V19.B16, V5.B16, V5.B16
    VEOR   V20.B16, V4.B16, V4.B16
    VEOR   V21.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V8.B16, V8.B16
    VEOR   V19.B16, V9.B16, V9.B16
    VEOR   V20.B16, V8.B16, V8.B16
    VEOR   V21.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V12.B16, V12.B16
    VEOR   V19.B16, V13.B16, V13.B16
    VEOR   V20.B16, V12.B16, V12.B16
    VEOR   V21.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V14.B16, V14.B16
    VEOR   V19.B16, V15.B16, V15.B16
    VEOR   V20.B16, V14.B16, V14.B16
    VEOR   V21.B16, V15.B16, V15.B16
    // Check for early termination
    CMP    $2, R16
    BEQ    mulNeon_10x8Xor_store

    // Load and process 32 bytes from input 2 to 8 outputs
    VLD1.P 32(R5), [V22.B16, V23.B16]
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VAND   V16.B16, V22.B16, V22.B16
    VAND   V16.B16, V23.B16, V23.B16
    VAND   V16.B16, V24.B16, V24.B16
    VAND   V16.B16, V25.B16, V25.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V0.B16, V0.B16
    VEOR   V19.B16, V1.B16, V1.B16
    VEOR   V20.B16, V0.B16, V0.B16
    VEOR   V21.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V4.B16, V4.B16
    VEOR   V19.B16, V5.B16, V5.B16
    VEOR   V20.B16, V4.B16, V4.B16
    VEOR   V21.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V8.B16, V8.B16
    VEOR   V19.B16, V9.B16, V9.B16
    VEOR   V20.B16, V8.B16, V8.B16
    VEOR   V21.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V12.B16, V12.B16
    VEOR   V19.B16, V13.B16, V13.B16
    VEOR   V20.B16, V12.B16, V12.B16
    VEOR   V21.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V14.B16, V14.B16
    VEOR   V19.B16, V15.B16, V15.B16
    VEOR   V20.B16, V14.B16, V14.B16
    VEOR   V21.B16, V15.B16, V15.B16
    // Check for early termination
    CMP    $3, R16
    BEQ    mulNeon_10x8Xor_store

    // Load and process 32 bytes from input 3 to 8 outputs
    VLD1.P 32(R8), [V22.B16, V23.B16]
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VAND   V16.B16, V22.B16, V22.B16
    VAND   V16.B16, V23.B16, V23.B16
    VAND   V16.B16, V24.B16, V24.B16
    VAND   V16.B16, V25.B16, V25.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V0.B16, V0.B16
    VEOR   V19.B16, V1.B16, V1.B16
    VEOR   V20.B16, V0.B16, V0.B16
    VEOR   V21.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V4.B16, V4.B16
    VEOR   V19.B16, V5.B16, V5.B16
    VEOR   V20.B16, V4.B16, V4.B16
    VEOR   V21.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V8.B16, V8.B16
    VEOR   V19.B16, V9.B16, V9.B16
    VEOR   V20.B16, V8.B16, V8.B16
    VEOR   V21.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V12.B16, V12.B16
    VEOR   V19.B16, V13.B16, V13.B16
    VEOR   V20.B16, V12.B16, V12.B16
    VEOR   V21.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V14.B16, V14.B16
    VEOR   V19.B16, V15.B16, V15.B16
    VEOR   V20.B16, V14.B16, V14.B16
    VEOR   V21.B16, V15.B16, V15.B16
    // Check for early termination
    CMP    $4, R16
    BEQ    mulNeon_10x8Xor_store

    // Load and process 32 bytes from input 4 to 8 outputs
    VLD1.P 32(R9), [V22.B16, V23.B16]
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VAND   V16.B16, V22.B16, V22.B16
    VAND   V16.B16, V23.B16, V23.B16
    VAND   V16.B16, V24.B16, V24.B16
    VAND   V16.B16, V25.B16, V25.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V0.B16, V0.B16
    VEOR   V19.B16, V1.B16, V1.B16
    VEOR   V20.B16, V0.B16, V0.B16
    VEOR   V21.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V4.B16, V4.B16
    VEOR   V19.B16, V5.B16, V5.B16
    VEOR   V20.B16, V4.B16, V4.B16
    VEOR   V21.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V8.B16, V8.B16
    VEOR   V19.B16, V9.B16, V9.B16
    VEOR   V20.B16, V8.B16, V8.B16
    VEOR   V21.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V12.B16, V12.B16
    VEOR   V19.B16, V13.B16, V13.B16
    VEOR   V20.B16, V12.B16, V12.B16
    VEOR   V21.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V14.B16, V14.B16
    VEOR   V19.B16, V15.B16, V15.B16
    VEOR   V20.B16, V14.B16, V14.B16
    VEOR   V21.B16, V15.B16, V15.B16
    // Check for early termination
    CMP    $5, R16
    BEQ    mulNeon_10x8Xor_store

    // Load and process 32 bytes from input 5 to 8 outputs
    VLD1.P 32(R10), [V22.B16, V23.B16]
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VAND   V16.B16, V22.B16, V22.B16
    VAND   V16.B16, V23.B16, V23.B16
    VAND   V16.B16, V24.B16, V24.B16
    VAND   V16.B16, V25.B16, V25.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V0.B16, V0.B16
    VEOR   V19.B16, V1.B16, V1.B16
    VEOR   V20.B16, V0.B16, V0.B16
    VEOR   V21.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V4.B16, V4.B16
    VEOR   V19.B16, V5.B16, V5.B16
    VEOR   V20.B16, V4.B16, V4.B16
    VEOR   V21.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V8.B16, V8.B16
    VEOR   V19.B16, V9.B16, V9.B16
    VEOR   V20.B16, V8.B16, V8.B16
    VEOR   V21.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V12.B16, V12.B16
    VEOR   V19.B16, V13.B16, V13.B16
    VEOR   V20.B16, V12.B16, V12.B16
    VEOR   V21.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V14.B16, V14.B16
    VEOR   V19.B16, V15.B16, V15.B16
    VEOR   V20.B16, V14.B16, V14.B16
    VEOR   V21.B16, V15.B16, V15.B16
    // Check for early termination
    CMP    $6, R16
    BEQ    mulNeon_10x8Xor_store

    // Load and process 32 bytes from input 6 to 8 outputs
    VLD1.P 32(R11), [V22.B16, V23.B16]
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VAND   V16.B16, V22.B16, V22.B16
    VAND   V16.B16, V23.B16, V23.B16
    VAND   V16.B16, V24.B16, V24.B16
    VAND   V16.B16, V25.B16, V25.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V0.B16, V0.B16
    VEOR   V19.B16, V1.B16, V1.B16
    VEOR   V20.B16, V0.B16, V0.B16
    VEOR   V21.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V4.B16, V4.B16
    VEOR   V19.B16, V5.B16, V5.B16
    VEOR   V20.B16, V4.B16, V4.B16
    VEOR   V21.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V8.B16, V8.B16
    VEOR   V19.B16, V9.B16, V9.B16
    VEOR   V20.B16, V8.B16, V8.B16
    VEOR   V21.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V12.B16, V12.B16
    VEOR   V19.B16, V13.B16, V13.B16
    VEOR   V20.B16, V12.B16, V12.B16
    VEOR   V21.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V14.B16, V14.B16
    VEOR   V19.B16, V15.B16, V15.B16
    VEOR   V20.B16, V14.B16, V14.B16
    VEOR   V21.B16, V15.B16, V15.B16
    // Check for early termination
    CMP    $7, R16
    BEQ    mulNeon_10x8Xor_store

    // Load and process 32 bytes from input 7 to 8 outputs
    VLD1.P 32(R12), [V22.B16, V23.B16]
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VAND   V16.B16, V22.B16, V22.B16
    VAND   V16.B16, V23.B16, V23.B16
    VAND   V16.B16, V24.B16, V24.B16
    VAND   V16.B16, V25.B16, V25.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V0.B16, V0.B16
    VEOR   V19.B16, V1.B16, V1.B16
    VEOR   V20.B16, V0.B16, V0.B16
    VEOR   V21.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V4.B16, V4.B16
    VEOR   V19.B16, V5.B16, V5.B16
    VEOR   V20.B16, V4.B16, V4.B16
    VEOR   V21.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V8.B16, V8.B16
    VEOR   V19.B16, V9.B16, V9.B16
    VEOR   V20.B16, V8.B16, V8.B16
    VEOR   V21.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V12.B16, V12.B16
    VEOR   V19.B16, V13.B16, V13.B16
    VEOR   V20.B16, V12.B16, V12.B16
    VEOR   V21.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V14.B16, V14.B16
    VEOR   V19.B16, V15.B16, V15.B16
    VEOR   V20.B16, V14.B16, V14.B16
    VEOR   V21.B16, V15.B16, V15.B16
    // Check for early termination
    CMP    $8, R16
    BEQ    mulNeon_10x8Xor_store

    // Load and process 32 bytes from input 8 to 8 outputs
    VLD1.P 32(R13), [V22.B16, V23.B16]
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VAND   V16.B16, V22.B16, V22.B16
    VAND   V16.B16, V23.B16, V23.B16
    VAND   V16.B16, V24.B16, V24.B16
    VAND   V16.B16, V25.B16, V25.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V0.B16, V0.B16
    VEOR   V19.B16, V1.B16, V1.B16
    VEOR   V20.B16, V0.B16, V0.B16
    VEOR   V21.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V4.B16, V4.B16
    VEOR   V19.B16, V5.B16, V5.B16
    VEOR   V20.B16, V4.B16, V4.B16
    VEOR   V21.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V8.B16, V8.B16
    VEOR   V19.B16, V9.B16, V9.B16
    VEOR   V20.B16, V8.B16, V8.B16
    VEOR   V21.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V12.B16, V12.B16
    VEOR   V19.B16, V13.B16, V13.B16
    VEOR   V20.B16, V12.B16, V12.B16
    VEOR   V21.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V14.B16, V14.B16
    VEOR   V19.B16, V15.B16, V15.B16
    VEOR   V20.B16, V14.B16, V14.B16
    VEOR   V21.B16, V15.B16, V15.B16
    // Check for early termination
    CMP    $9, R16
    BEQ    mulNeon_10x8Xor_store

    // Load and process 32 bytes from input 9 to 8 outputs
    VLD1.P 32(R3), [V22.B16, V23.B16]
    VUSHR  $4, V22.B16, V24.B16
    VUSHR  $4, V23.B16, V25.B16
    VAND   V16.B16, V22.B16, V22.B16
    VAND   V16.B16, V23.B16, V23.B16
    VAND   V16.B16, V24.B16, V24.B16
    VAND   V16.B16, V25.B16, V25.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V0.B16, V0.B16
    VEOR   V19.B16, V1.B16, V1.B16
    VEOR   V20.B16, V0.B16, V0.B16
    VEOR   V21.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V2.B16, V2.B16
    VEOR   V19.B16, V3.B16, V3.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V4.B16, V4.B16
    VEOR   V19.B16, V5.B16, V5.B16
    VEOR   V20.B16, V4.B16, V4.B16
    VEOR   V21.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V6.B16, V6.B16
    VEOR   V19.B16, V7.B16, V7.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V8.B16, V8.B16
    VEOR   V19.B16, V9.B16, V9.B16
    VEOR   V20.B16, V8.B16, V8.B16
    VEOR   V21.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V10.B16, V10.B16
    VEOR   V19.B16, V11.B16, V11.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V12.B16, V12.B16
    VEOR   V19.B16, V13.B16, V13.B16
    VEOR   V20.B16, V12.B16, V12.B16
    VEOR   V21.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VTBL   V22.B16, [V18.B16], V18.B16
    VTBL   V23.B16, [V19.B16], V19.B16
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VEOR   V18.B16, V14.B16, V14.B16
    VEOR   V19.B16, V15.B16, V15.B16
    VEOR   V20.B16, V14.B16, V14.B16
    VEOR   V21.B16, V15.B16, V15.B16

mulNeon_10x8Xor_store:
    // Store 8 outputs
    MOVD (R14), R6
    ADD    R15<<3, R6
    VST1   [V0.D2, V1.D2], (R6)
    MOVD 24(R14), R6
    ADD    R15<<3, R6
    VST1   [V2.D2, V3.D2], (R6)
    MOVD 48(R14), R6
    ADD    R15<<3, R6
    VST1   [V4.D2, V5.D2], (R6)
    MOVD 72(R14), R6
    ADD    R15<<3, R6
    VST1   [V6.D2, V7.D2], (R6)
    MOVD 96(R14), R6
    ADD    R15<<3, R6
    VST1   [V8.D2, V9.D2], (R6)
    MOVD 120(R14), R6
    ADD    R15<<3, R6
    VST1   [V10.D2, V11.D2], (R6)
    MOVD 144(R14), R6
    ADD    R15<<3, R6
    VST1   [V12.D2, V13.D2], (R6)
    MOVD 168(R14), R6
    ADD    R15<<3, R6
    VST1   [V14.D2, V15.D2], (R6)

    // Prepare for next loop
    ADD    $4, R15
    SUBS $1, R0
    BNE  mulNeon_10x8Xor_loop

mulNeon_10x8Xor_end:
    RET

// func mulNeon_10x9(matrix []byte, in [][]byte, out [][]byte, start int, n int)
// Requires: NEON
TEXT Â·mulNeon_10x9(SB), NOSPLIT, $8-88
    // Loading no tables to registers
    // Destination kept on stack
    // Full registers estimated 194 YMM used
    MOVD n+80(FP), R0
    LSR  $5, R0
    TST  R0, R0
    BEQ    mulNeon_10x9_end
    MOVD in_base+24(FP), R3
    MOVD (R3), R1
    MOVD 24(R3), R4
    MOVD 48(R3), R5
    MOVD 72(R3), R8
    MOVD 96(R3), R9
    MOVD 120(R3), R10
    MOVD 144(R3), R11
    MOVD 168(R3), R12
    MOVD 192(R3), R13
    MOVD 216(R3), R3
    MOVD out_base+48(FP), R14
    MOVD start+72(FP), R15

    // Add start offset to input
    ADD    R15, R1
    ADD    R15, R4
    ADD    R15, R5
    ADD    R15, R8
    ADD    R15, R9
    ADD    R15, R10
    ADD    R15, R11
    ADD    R15, R12
    ADD    R15, R13
    ADD    R15, R3
    LSR  $3, R15
    MOVD   $15, R6
    VMOV   R6, V18.B[0]
    VDUP   V18.B[0], V18.B16

    // Load number of input shards
    MOVD   in_len+32(FP), R16

mulNeon_10x9_loop:
    MOVD matrix_base+0(FP), R2
    // Load and process 32 bytes from input 0 to 9 outputs
    VLD1.P 32(R1), [V24.B16, V25.B16]
    VUSHR  $4, V24.B16, V26.B16
    VUSHR  $4, V25.B16, V27.B16
    VAND   V18.B16, V24.B16, V24.B16
    VAND   V18.B16, V25.B16, V25.B16
    VAND   V18.B16, V26.B16, V26.B16
    VAND   V18.B16, V27.B16, V27.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V22.B16, V0.B16
    VEOR   V21.B16, V23.B16, V1.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V22.B16, V2.B16
    VEOR   V21.B16, V23.B16, V3.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V22.B16, V4.B16
    VEOR   V21.B16, V23.B16, V5.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V22.B16, V6.B16
    VEOR   V21.B16, V23.B16, V7.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V22.B16, V8.B16
    VEOR   V21.B16, V23.B16, V9.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V22.B16, V10.B16
    VEOR   V21.B16, V23.B16, V11.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V22.B16, V12.B16
    VEOR   V21.B16, V23.B16, V13.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V22.B16, V14.B16
    VEOR   V21.B16, V23.B16, V15.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V22.B16, V16.B16
    VEOR   V21.B16, V23.B16, V17.B16
    // Check for early termination
    CMP    $1, R16
    BEQ    mulNeon_10x9_store

    // Load and process 32 bytes from input 1 to 9 outputs
    VLD1.P 32(R4), [V24.B16, V25.B16]
    VUSHR  $4, V24.B16, V26.B16
    VUSHR  $4, V25.B16, V27.B16
    VAND   V18.B16, V24.B16, V24.B16
    VAND   V18.B16, V25.B16, V25.B16
    VAND   V18.B16, V26.B16, V26.B16
    VAND   V18.B16, V27.B16, V27.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V0.B16, V0.B16
    VEOR   V21.B16, V1.B16, V1.B16
    VEOR   V22.B16, V0.B16, V0.B16
    VEOR   V23.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VEOR   V22.B16, V2.B16, V2.B16
    VEOR   V23.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V4.B16, V4.B16
    VEOR   V21.B16, V5.B16, V5.B16
    VEOR   V22.B16, V4.B16, V4.B16
    VEOR   V23.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VEOR   V22.B16, V6.B16, V6.B16
    VEOR   V23.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V8.B16, V8.B16
    VEOR   V21.B16, V9.B16, V9.B16
    VEOR   V22.B16, V8.B16, V8.B16
    VEOR   V23.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    VEOR   V22.B16, V10.B16, V10.B16
    VEOR   V23.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V12.B16, V12.B16
    VEOR   V21.B16, V13.B16, V13.B16
    VEOR   V22.B16, V12.B16, V12.B16
    VEOR   V23.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V14.B16, V14.B16
    VEOR   V21.B16, V15.B16, V15.B16
    VEOR   V22.B16, V14.B16, V14.B16
    VEOR   V23.B16, V15.B16, V15.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V16.B16, V16.B16
    VEOR   V21.B16, V17.B16, V17.B16
    VEOR   V22.B16, V16.B16, V16.B16
    VEOR   V23.B16, V17.B16, V17.B16
    // Check for early termination
    CMP    $2, R16
    BEQ    mulNeon_10x9_store

    // Load and process 32 bytes from input 2 to 9 outputs
    VLD1.P 32(R5), [V24.B16, V25.B16]
    VUSHR  $4, V24.B16, V26.B16
    VUSHR  $4, V25.B16, V27.B16
    VAND   V18.B16, V24.B16, V24.B16
    VAND   V18.B16, V25.B16, V25.B16
    VAND   V18.B16, V26.B16, V26.B16
    VAND   V18.B16, V27.B16, V27.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V0.B16, V0.B16
    VEOR   V21.B16, V1.B16, V1.B16
    VEOR   V22.B16, V0.B16, V0.B16
    VEOR   V23.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VEOR   V22.B16, V2.B16, V2.B16
    VEOR   V23.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V4.B16, V4.B16
    VEOR   V21.B16, V5.B16, V5.B16
    VEOR   V22.B16, V4.B16, V4.B16
    VEOR   V23.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VEOR   V22.B16, V6.B16, V6.B16
    VEOR   V23.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V8.B16, V8.B16
    VEOR   V21.B16, V9.B16, V9.B16
    VEOR   V22.B16, V8.B16, V8.B16
    VEOR   V23.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    VEOR   V22.B16, V10.B16, V10.B16
    VEOR   V23.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V12.B16, V12.B16
    VEOR   V21.B16, V13.B16, V13.B16
    VEOR   V22.B16, V12.B16, V12.B16
    VEOR   V23.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V14.B16, V14.B16
    VEOR   V21.B16, V15.B16, V15.B16
    VEOR   V22.B16, V14.B16, V14.B16
    VEOR   V23.B16, V15.B16, V15.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V16.B16, V16.B16
    VEOR   V21.B16, V17.B16, V17.B16
    VEOR   V22.B16, V16.B16, V16.B16
    VEOR   V23.B16, V17.B16, V17.B16
    // Check for early termination
    CMP    $3, R16
    BEQ    mulNeon_10x9_store

    // Load and process 32 bytes from input 3 to 9 outputs
    VLD1.P 32(R8), [V24.B16, V25.B16]
    VUSHR  $4, V24.B16, V26.B16
    VUSHR  $4, V25.B16, V27.B16
    VAND   V18.B16, V24.B16, V24.B16
    VAND   V18.B16, V25.B16, V25.B16
    VAND   V18.B16, V26.B16, V26.B16
    VAND   V18.B16, V27.B16, V27.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V0.B16, V0.B16
    VEOR   V21.B16, V1.B16, V1.B16
    VEOR   V22.B16, V0.B16, V0.B16
    VEOR   V23.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VEOR   V22.B16, V2.B16, V2.B16
    VEOR   V23.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V4.B16, V4.B16
    VEOR   V21.B16, V5.B16, V5.B16
    VEOR   V22.B16, V4.B16, V4.B16
    VEOR   V23.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VEOR   V22.B16, V6.B16, V6.B16
    VEOR   V23.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V8.B16, V8.B16
    VEOR   V21.B16, V9.B16, V9.B16
    VEOR   V22.B16, V8.B16, V8.B16
    VEOR   V23.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    VEOR   V22.B16, V10.B16, V10.B16
    VEOR   V23.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V12.B16, V12.B16
    VEOR   V21.B16, V13.B16, V13.B16
    VEOR   V22.B16, V12.B16, V12.B16
    VEOR   V23.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V14.B16, V14.B16
    VEOR   V21.B16, V15.B16, V15.B16
    VEOR   V22.B16, V14.B16, V14.B16
    VEOR   V23.B16, V15.B16, V15.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V16.B16, V16.B16
    VEOR   V21.B16, V17.B16, V17.B16
    VEOR   V22.B16, V16.B16, V16.B16
    VEOR   V23.B16, V17.B16, V17.B16
    // Check for early termination
    CMP    $4, R16
    BEQ    mulNeon_10x9_store

    // Load and process 32 bytes from input 4 to 9 outputs
    VLD1.P 32(R9), [V24.B16, V25.B16]
    VUSHR  $4, V24.B16, V26.B16
    VUSHR  $4, V25.B16, V27.B16
    VAND   V18.B16, V24.B16, V24.B16
    VAND   V18.B16, V25.B16, V25.B16
    VAND   V18.B16, V26.B16, V26.B16
    VAND   V18.B16, V27.B16, V27.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V0.B16, V0.B16
    VEOR   V21.B16, V1.B16, V1.B16
    VEOR   V22.B16, V0.B16, V0.B16
    VEOR   V23.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VEOR   V22.B16, V2.B16, V2.B16
    VEOR   V23.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V4.B16, V4.B16
    VEOR   V21.B16, V5.B16, V5.B16
    VEOR   V22.B16, V4.B16, V4.B16
    VEOR   V23.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VEOR   V22.B16, V6.B16, V6.B16
    VEOR   V23.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V8.B16, V8.B16
    VEOR   V21.B16, V9.B16, V9.B16
    VEOR   V22.B16, V8.B16, V8.B16
    VEOR   V23.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    VEOR   V22.B16, V10.B16, V10.B16
    VEOR   V23.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V12.B16, V12.B16
    VEOR   V21.B16, V13.B16, V13.B16
    VEOR   V22.B16, V12.B16, V12.B16
    VEOR   V23.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V14.B16, V14.B16
    VEOR   V21.B16, V15.B16, V15.B16
    VEOR   V22.B16, V14.B16, V14.B16
    VEOR   V23.B16, V15.B16, V15.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V16.B16, V16.B16
    VEOR   V21.B16, V17.B16, V17.B16
    VEOR   V22.B16, V16.B16, V16.B16
    VEOR   V23.B16, V17.B16, V17.B16
    // Check for early termination
    CMP    $5, R16
    BEQ    mulNeon_10x9_store

    // Load and process 32 bytes from input 5 to 9 outputs
    VLD1.P 32(R10), [V24.B16, V25.B16]
    VUSHR  $4, V24.B16, V26.B16
    VUSHR  $4, V25.B16, V27.B16
    VAND   V18.B16, V24.B16, V24.B16
    VAND   V18.B16, V25.B16, V25.B16
    VAND   V18.B16, V26.B16, V26.B16
    VAND   V18.B16, V27.B16, V27.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V0.B16, V0.B16
    VEOR   V21.B16, V1.B16, V1.B16
    VEOR   V22.B16, V0.B16, V0.B16
    VEOR   V23.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VEOR   V22.B16, V2.B16, V2.B16
    VEOR   V23.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V4.B16, V4.B16
    VEOR   V21.B16, V5.B16, V5.B16
    VEOR   V22.B16, V4.B16, V4.B16
    VEOR   V23.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VEOR   V22.B16, V6.B16, V6.B16
    VEOR   V23.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V8.B16, V8.B16
    VEOR   V21.B16, V9.B16, V9.B16
    VEOR   V22.B16, V8.B16, V8.B16
    VEOR   V23.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    VEOR   V22.B16, V10.B16, V10.B16
    VEOR   V23.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V12.B16, V12.B16
    VEOR   V21.B16, V13.B16, V13.B16
    VEOR   V22.B16, V12.B16, V12.B16
    VEOR   V23.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V14.B16, V14.B16
    VEOR   V21.B16, V15.B16, V15.B16
    VEOR   V22.B16, V14.B16, V14.B16
    VEOR   V23.B16, V15.B16, V15.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V16.B16, V16.B16
    VEOR   V21.B16, V17.B16, V17.B16
    VEOR   V22.B16, V16.B16, V16.B16
    VEOR   V23.B16, V17.B16, V17.B16
    // Check for early termination
    CMP    $6, R16
    BEQ    mulNeon_10x9_store

    // Load and process 32 bytes from input 6 to 9 outputs
    VLD1.P 32(R11), [V24.B16, V25.B16]
    VUSHR  $4, V24.B16, V26.B16
    VUSHR  $4, V25.B16, V27.B16
    VAND   V18.B16, V24.B16, V24.B16
    VAND   V18.B16, V25.B16, V25.B16
    VAND   V18.B16, V26.B16, V26.B16
    VAND   V18.B16, V27.B16, V27.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V0.B16, V0.B16
    VEOR   V21.B16, V1.B16, V1.B16
    VEOR   V22.B16, V0.B16, V0.B16
    VEOR   V23.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VEOR   V22.B16, V2.B16, V2.B16
    VEOR   V23.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V4.B16, V4.B16
    VEOR   V21.B16, V5.B16, V5.B16
    VEOR   V22.B16, V4.B16, V4.B16
    VEOR   V23.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VEOR   V22.B16, V6.B16, V6.B16
    VEOR   V23.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V8.B16, V8.B16
    VEOR   V21.B16, V9.B16, V9.B16
    VEOR   V22.B16, V8.B16, V8.B16
    VEOR   V23.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    VEOR   V22.B16, V10.B16, V10.B16
    VEOR   V23.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V12.B16, V12.B16
    VEOR   V21.B16, V13.B16, V13.B16
    VEOR   V22.B16, V12.B16, V12.B16
    VEOR   V23.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V14.B16, V14.B16
    VEOR   V21.B16, V15.B16, V15.B16
    VEOR   V22.B16, V14.B16, V14.B16
    VEOR   V23.B16, V15.B16, V15.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V16.B16, V16.B16
    VEOR   V21.B16, V17.B16, V17.B16
    VEOR   V22.B16, V16.B16, V16.B16
    VEOR   V23.B16, V17.B16, V17.B16
    // Check for early termination
    CMP    $7, R16
    BEQ    mulNeon_10x9_store

    // Load and process 32 bytes from input 7 to 9 outputs
    VLD1.P 32(R12), [V24.B16, V25.B16]
    VUSHR  $4, V24.B16, V26.B16
    VUSHR  $4, V25.B16, V27.B16
    VAND   V18.B16, V24.B16, V24.B16
    VAND   V18.B16, V25.B16, V25.B16
    VAND   V18.B16, V26.B16, V26.B16
    VAND   V18.B16, V27.B16, V27.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V0.B16, V0.B16
    VEOR   V21.B16, V1.B16, V1.B16
    VEOR   V22.B16, V0.B16, V0.B16
    VEOR   V23.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VEOR   V22.B16, V2.B16, V2.B16
    VEOR   V23.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V4.B16, V4.B16
    VEOR   V21.B16, V5.B16, V5.B16
    VEOR   V22.B16, V4.B16, V4.B16
    VEOR   V23.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VEOR   V22.B16, V6.B16, V6.B16
    VEOR   V23.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V8.B16, V8.B16
    VEOR   V21.B16, V9.B16, V9.B16
    VEOR   V22.B16, V8.B16, V8.B16
    VEOR   V23.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    VEOR   V22.B16, V10.B16, V10.B16
    VEOR   V23.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V12.B16, V12.B16
    VEOR   V21.B16, V13.B16, V13.B16
    VEOR   V22.B16, V12.B16, V12.B16
    VEOR   V23.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V14.B16, V14.B16
    VEOR   V21.B16, V15.B16, V15.B16
    VEOR   V22.B16, V14.B16, V14.B16
    VEOR   V23.B16, V15.B16, V15.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V16.B16, V16.B16
    VEOR   V21.B16, V17.B16, V17.B16
    VEOR   V22.B16, V16.B16, V16.B16
    VEOR   V23.B16, V17.B16, V17.B16
    // Check for early termination
    CMP    $8, R16
    BEQ    mulNeon_10x9_store

    // Load and process 32 bytes from input 8 to 9 outputs
    VLD1.P 32(R13), [V24.B16, V25.B16]
    VUSHR  $4, V24.B16, V26.B16
    VUSHR  $4, V25.B16, V27.B16
    VAND   V18.B16, V24.B16, V24.B16
    VAND   V18.B16, V25.B16, V25.B16
    VAND   V18.B16, V26.B16, V26.B16
    VAND   V18.B16, V27.B16, V27.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V0.B16, V0.B16
    VEOR   V21.B16, V1.B16, V1.B16
    VEOR   V22.B16, V0.B16, V0.B16
    VEOR   V23.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VEOR   V22.B16, V2.B16, V2.B16
    VEOR   V23.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V4.B16, V4.B16
    VEOR   V21.B16, V5.B16, V5.B16
    VEOR   V22.B16, V4.B16, V4.B16
    VEOR   V23.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VEOR   V22.B16, V6.B16, V6.B16
    VEOR   V23.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V8.B16, V8.B16
    VEOR   V21.B16, V9.B16, V9.B16
    VEOR   V22.B16, V8.B16, V8.B16
    VEOR   V23.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    VEOR   V22.B16, V10.B16, V10.B16
    VEOR   V23.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V12.B16, V12.B16
    VEOR   V21.B16, V13.B16, V13.B16
    VEOR   V22.B16, V12.B16, V12.B16
    VEOR   V23.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V14.B16, V14.B16
    VEOR   V21.B16, V15.B16, V15.B16
    VEOR   V22.B16, V14.B16, V14.B16
    VEOR   V23.B16, V15.B16, V15.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V16.B16, V16.B16
    VEOR   V21.B16, V17.B16, V17.B16
    VEOR   V22.B16, V16.B16, V16.B16
    VEOR   V23.B16, V17.B16, V17.B16
    // Check for early termination
    CMP    $9, R16
    BEQ    mulNeon_10x9_store

    // Load and process 32 bytes from input 9 to 9 outputs
    VLD1.P 32(R3), [V24.B16, V25.B16]
    VUSHR  $4, V24.B16, V26.B16
    VUSHR  $4, V25.B16, V27.B16
    VAND   V18.B16, V24.B16, V24.B16
    VAND   V18.B16, V25.B16, V25.B16
    VAND   V18.B16, V26.B16, V26.B16
    VAND   V18.B16, V27.B16, V27.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V0.B16, V0.B16
    VEOR   V21.B16, V1.B16, V1.B16
    VEOR   V22.B16, V0.B16, V0.B16
    VEOR   V23.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VEOR   V22.B16, V2.B16, V2.B16
    VEOR   V23.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V4.B16, V4.B16
    VEOR   V21.B16, V5.B16, V5.B16
    VEOR   V22.B16, V4.B16, V4.B16
    VEOR   V23.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VEOR   V22.B16, V6.B16, V6.B16
    VEOR   V23.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V8.B16, V8.B16
    VEOR   V21.B16, V9.B16, V9.B16
    VEOR   V22.B16, V8.B16, V8.B16
    VEOR   V23.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    VEOR   V22.B16, V10.B16, V10.B16
    VEOR   V23.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V12.B16, V12.B16
    VEOR   V21.B16, V13.B16, V13.B16
    VEOR   V22.B16, V12.B16, V12.B16
    VEOR   V23.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V14.B16, V14.B16
    VEOR   V21.B16, V15.B16, V15.B16
    VEOR   V22.B16, V14.B16, V14.B16
    VEOR   V23.B16, V15.B16, V15.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V16.B16, V16.B16
    VEOR   V21.B16, V17.B16, V17.B16
    VEOR   V22.B16, V16.B16, V16.B16
    VEOR   V23.B16, V17.B16, V17.B16

mulNeon_10x9_store:
    // Store 9 outputs
    MOVD (R14), R6
    ADD    R15<<3, R6
    VST1   [V0.D2, V1.D2], (R6)
    MOVD 24(R14), R6
    ADD    R15<<3, R6
    VST1   [V2.D2, V3.D2], (R6)
    MOVD 48(R14), R6
    ADD    R15<<3, R6
    VST1   [V4.D2, V5.D2], (R6)
    MOVD 72(R14), R6
    ADD    R15<<3, R6
    VST1   [V6.D2, V7.D2], (R6)
    MOVD 96(R14), R6
    ADD    R15<<3, R6
    VST1   [V8.D2, V9.D2], (R6)
    MOVD 120(R14), R6
    ADD    R15<<3, R6
    VST1   [V10.D2, V11.D2], (R6)
    MOVD 144(R14), R6
    ADD    R15<<3, R6
    VST1   [V12.D2, V13.D2], (R6)
    MOVD 168(R14), R6
    ADD    R15<<3, R6
    VST1   [V14.D2, V15.D2], (R6)
    MOVD 192(R14), R6
    ADD    R15<<3, R6
    VST1   [V16.D2, V17.D2], (R6)

    // Prepare for next loop
    ADD    $4, R15
    SUBS $1, R0
    BNE  mulNeon_10x9_loop

mulNeon_10x9_end:
    RET

// func mulNeon_10x9Xor(matrix []byte, in [][]byte, out [][]byte, start int, n int)
// Requires: NEON
TEXT Â·mulNeon_10x9Xor(SB), NOSPLIT, $8-88
    // Loading no tables to registers
    // Destination kept on stack
    // Full registers estimated 194 YMM used
    MOVD n+80(FP), R0
    LSR  $5, R0
    TST  R0, R0
    BEQ    mulNeon_10x9Xor_end
    MOVD in_base+24(FP), R3
    MOVD (R3), R1
    MOVD 24(R3), R4
    MOVD 48(R3), R5
    MOVD 72(R3), R8
    MOVD 96(R3), R9
    MOVD 120(R3), R10
    MOVD 144(R3), R11
    MOVD 168(R3), R12
    MOVD 192(R3), R13
    MOVD 216(R3), R3
    MOVD out_base+48(FP), R14
    MOVD start+72(FP), R15

    // Add start offset to input
    ADD    R15, R1
    ADD    R15, R4
    ADD    R15, R5
    ADD    R15, R8
    ADD    R15, R9
    ADD    R15, R10
    ADD    R15, R11
    ADD    R15, R12
    ADD    R15, R13
    ADD    R15, R3
    LSR  $3, R15
    MOVD   $15, R6
    VMOV   R6, V18.B[0]
    VDUP   V18.B[0], V18.B16

    // Load number of input shards
    MOVD   in_len+32(FP), R16

mulNeon_10x9Xor_loop:
    MOVD matrix_base+0(FP), R2
    // Load and process 32 bytes from input 0 to 9 outputs
    VLD1.P 32(R1), [V24.B16, V25.B16]
    VUSHR  $4, V24.B16, V26.B16
    VUSHR  $4, V25.B16, V27.B16
    VAND   V18.B16, V24.B16, V24.B16
    VAND   V18.B16, V25.B16, V25.B16
    VAND   V18.B16, V26.B16, V26.B16
    VAND   V18.B16, V27.B16, V27.B16
    MOVD (R14), R6
    ADD    R15<<3, R6
    VLD1   (R6), [V0.B16, V1.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V0.B16, V0.B16
    VEOR   V21.B16, V1.B16, V1.B16
    VEOR   V22.B16, V0.B16, V0.B16
    VEOR   V23.B16, V1.B16, V1.B16
    MOVD 24(R14), R6
    ADD    R15<<3, R6
    VLD1   (R6), [V2.B16, V3.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VEOR   V22.B16, V2.B16, V2.B16
    VEOR   V23.B16, V3.B16, V3.B16
    MOVD 48(R14), R6
    ADD    R15<<3, R6
    VLD1   (R6), [V4.B16, V5.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V4.B16, V4.B16
    VEOR   V21.B16, V5.B16, V5.B16
    VEOR   V22.B16, V4.B16, V4.B16
    VEOR   V23.B16, V5.B16, V5.B16
    MOVD 72(R14), R6
    ADD    R15<<3, R6
    VLD1   (R6), [V6.B16, V7.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VEOR   V22.B16, V6.B16, V6.B16
    VEOR   V23.B16, V7.B16, V7.B16
    MOVD 96(R14), R6
    ADD    R15<<3, R6
    VLD1   (R6), [V8.B16, V9.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V8.B16, V8.B16
    VEOR   V21.B16, V9.B16, V9.B16
    VEOR   V22.B16, V8.B16, V8.B16
    VEOR   V23.B16, V9.B16, V9.B16
    MOVD 120(R14), R6
    ADD    R15<<3, R6
    VLD1   (R6), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    VEOR   V22.B16, V10.B16, V10.B16
    VEOR   V23.B16, V11.B16, V11.B16
    MOVD 144(R14), R6
    ADD    R15<<3, R6
    VLD1   (R6), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V12.B16, V12.B16
    VEOR   V21.B16, V13.B16, V13.B16
    VEOR   V22.B16, V12.B16, V12.B16
    VEOR   V23.B16, V13.B16, V13.B16
    MOVD 168(R14), R6
    ADD    R15<<3, R6
    VLD1   (R6), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V14.B16, V14.B16
    VEOR   V21.B16, V15.B16, V15.B16
    VEOR   V22.B16, V14.B16, V14.B16
    VEOR   V23.B16, V15.B16, V15.B16
    MOVD 192(R14), R6
    ADD    R15<<3, R6
    VLD1   (R6), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V16.B16, V16.B16
    VEOR   V21.B16, V17.B16, V17.B16
    VEOR   V22.B16, V16.B16, V16.B16
    VEOR   V23.B16, V17.B16, V17.B16
    // Check for early termination
    CMP    $1, R16
    BEQ    mulNeon_10x9Xor_store

    // Load and process 32 bytes from input 1 to 9 outputs
    VLD1.P 32(R4), [V24.B16, V25.B16]
    VUSHR  $4, V24.B16, V26.B16
    VUSHR  $4, V25.B16, V27.B16
    VAND   V18.B16, V24.B16, V24.B16
    VAND   V18.B16, V25.B16, V25.B16
    VAND   V18.B16, V26.B16, V26.B16
    VAND   V18.B16, V27.B16, V27.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V0.B16, V0.B16
    VEOR   V21.B16, V1.B16, V1.B16
    VEOR   V22.B16, V0.B16, V0.B16
    VEOR   V23.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VEOR   V22.B16, V2.B16, V2.B16
    VEOR   V23.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V4.B16, V4.B16
    VEOR   V21.B16, V5.B16, V5.B16
    VEOR   V22.B16, V4.B16, V4.B16
    VEOR   V23.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VEOR   V22.B16, V6.B16, V6.B16
    VEOR   V23.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V8.B16, V8.B16
    VEOR   V21.B16, V9.B16, V9.B16
    VEOR   V22.B16, V8.B16, V8.B16
    VEOR   V23.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    VEOR   V22.B16, V10.B16, V10.B16
    VEOR   V23.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V12.B16, V12.B16
    VEOR   V21.B16, V13.B16, V13.B16
    VEOR   V22.B16, V12.B16, V12.B16
    VEOR   V23.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V14.B16, V14.B16
    VEOR   V21.B16, V15.B16, V15.B16
    VEOR   V22.B16, V14.B16, V14.B16
    VEOR   V23.B16, V15.B16, V15.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V16.B16, V16.B16
    VEOR   V21.B16, V17.B16, V17.B16
    VEOR   V22.B16, V16.B16, V16.B16
    VEOR   V23.B16, V17.B16, V17.B16
    // Check for early termination
    CMP    $2, R16
    BEQ    mulNeon_10x9Xor_store

    // Load and process 32 bytes from input 2 to 9 outputs
    VLD1.P 32(R5), [V24.B16, V25.B16]
    VUSHR  $4, V24.B16, V26.B16
    VUSHR  $4, V25.B16, V27.B16
    VAND   V18.B16, V24.B16, V24.B16
    VAND   V18.B16, V25.B16, V25.B16
    VAND   V18.B16, V26.B16, V26.B16
    VAND   V18.B16, V27.B16, V27.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V0.B16, V0.B16
    VEOR   V21.B16, V1.B16, V1.B16
    VEOR   V22.B16, V0.B16, V0.B16
    VEOR   V23.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VEOR   V22.B16, V2.B16, V2.B16
    VEOR   V23.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V4.B16, V4.B16
    VEOR   V21.B16, V5.B16, V5.B16
    VEOR   V22.B16, V4.B16, V4.B16
    VEOR   V23.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VEOR   V22.B16, V6.B16, V6.B16
    VEOR   V23.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V8.B16, V8.B16
    VEOR   V21.B16, V9.B16, V9.B16
    VEOR   V22.B16, V8.B16, V8.B16
    VEOR   V23.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    VEOR   V22.B16, V10.B16, V10.B16
    VEOR   V23.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V12.B16, V12.B16
    VEOR   V21.B16, V13.B16, V13.B16
    VEOR   V22.B16, V12.B16, V12.B16
    VEOR   V23.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V14.B16, V14.B16
    VEOR   V21.B16, V15.B16, V15.B16
    VEOR   V22.B16, V14.B16, V14.B16
    VEOR   V23.B16, V15.B16, V15.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V16.B16, V16.B16
    VEOR   V21.B16, V17.B16, V17.B16
    VEOR   V22.B16, V16.B16, V16.B16
    VEOR   V23.B16, V17.B16, V17.B16
    // Check for early termination
    CMP    $3, R16
    BEQ    mulNeon_10x9Xor_store

    // Load and process 32 bytes from input 3 to 9 outputs
    VLD1.P 32(R8), [V24.B16, V25.B16]
    VUSHR  $4, V24.B16, V26.B16
    VUSHR  $4, V25.B16, V27.B16
    VAND   V18.B16, V24.B16, V24.B16
    VAND   V18.B16, V25.B16, V25.B16
    VAND   V18.B16, V26.B16, V26.B16
    VAND   V18.B16, V27.B16, V27.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V0.B16, V0.B16
    VEOR   V21.B16, V1.B16, V1.B16
    VEOR   V22.B16, V0.B16, V0.B16
    VEOR   V23.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VEOR   V22.B16, V2.B16, V2.B16
    VEOR   V23.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V4.B16, V4.B16
    VEOR   V21.B16, V5.B16, V5.B16
    VEOR   V22.B16, V4.B16, V4.B16
    VEOR   V23.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VEOR   V22.B16, V6.B16, V6.B16
    VEOR   V23.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V8.B16, V8.B16
    VEOR   V21.B16, V9.B16, V9.B16
    VEOR   V22.B16, V8.B16, V8.B16
    VEOR   V23.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    VEOR   V22.B16, V10.B16, V10.B16
    VEOR   V23.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V12.B16, V12.B16
    VEOR   V21.B16, V13.B16, V13.B16
    VEOR   V22.B16, V12.B16, V12.B16
    VEOR   V23.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V14.B16, V14.B16
    VEOR   V21.B16, V15.B16, V15.B16
    VEOR   V22.B16, V14.B16, V14.B16
    VEOR   V23.B16, V15.B16, V15.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V16.B16, V16.B16
    VEOR   V21.B16, V17.B16, V17.B16
    VEOR   V22.B16, V16.B16, V16.B16
    VEOR   V23.B16, V17.B16, V17.B16
    // Check for early termination
    CMP    $4, R16
    BEQ    mulNeon_10x9Xor_store

    // Load and process 32 bytes from input 4 to 9 outputs
    VLD1.P 32(R9), [V24.B16, V25.B16]
    VUSHR  $4, V24.B16, V26.B16
    VUSHR  $4, V25.B16, V27.B16
    VAND   V18.B16, V24.B16, V24.B16
    VAND   V18.B16, V25.B16, V25.B16
    VAND   V18.B16, V26.B16, V26.B16
    VAND   V18.B16, V27.B16, V27.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V0.B16, V0.B16
    VEOR   V21.B16, V1.B16, V1.B16
    VEOR   V22.B16, V0.B16, V0.B16
    VEOR   V23.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VEOR   V22.B16, V2.B16, V2.B16
    VEOR   V23.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V4.B16, V4.B16
    VEOR   V21.B16, V5.B16, V5.B16
    VEOR   V22.B16, V4.B16, V4.B16
    VEOR   V23.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VEOR   V22.B16, V6.B16, V6.B16
    VEOR   V23.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V8.B16, V8.B16
    VEOR   V21.B16, V9.B16, V9.B16
    VEOR   V22.B16, V8.B16, V8.B16
    VEOR   V23.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    VEOR   V22.B16, V10.B16, V10.B16
    VEOR   V23.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V12.B16, V12.B16
    VEOR   V21.B16, V13.B16, V13.B16
    VEOR   V22.B16, V12.B16, V12.B16
    VEOR   V23.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V14.B16, V14.B16
    VEOR   V21.B16, V15.B16, V15.B16
    VEOR   V22.B16, V14.B16, V14.B16
    VEOR   V23.B16, V15.B16, V15.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V16.B16, V16.B16
    VEOR   V21.B16, V17.B16, V17.B16
    VEOR   V22.B16, V16.B16, V16.B16
    VEOR   V23.B16, V17.B16, V17.B16
    // Check for early termination
    CMP    $5, R16
    BEQ    mulNeon_10x9Xor_store

    // Load and process 32 bytes from input 5 to 9 outputs
    VLD1.P 32(R10), [V24.B16, V25.B16]
    VUSHR  $4, V24.B16, V26.B16
    VUSHR  $4, V25.B16, V27.B16
    VAND   V18.B16, V24.B16, V24.B16
    VAND   V18.B16, V25.B16, V25.B16
    VAND   V18.B16, V26.B16, V26.B16
    VAND   V18.B16, V27.B16, V27.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V0.B16, V0.B16
    VEOR   V21.B16, V1.B16, V1.B16
    VEOR   V22.B16, V0.B16, V0.B16
    VEOR   V23.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VEOR   V22.B16, V2.B16, V2.B16
    VEOR   V23.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V4.B16, V4.B16
    VEOR   V21.B16, V5.B16, V5.B16
    VEOR   V22.B16, V4.B16, V4.B16
    VEOR   V23.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VEOR   V22.B16, V6.B16, V6.B16
    VEOR   V23.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V8.B16, V8.B16
    VEOR   V21.B16, V9.B16, V9.B16
    VEOR   V22.B16, V8.B16, V8.B16
    VEOR   V23.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    VEOR   V22.B16, V10.B16, V10.B16
    VEOR   V23.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V12.B16, V12.B16
    VEOR   V21.B16, V13.B16, V13.B16
    VEOR   V22.B16, V12.B16, V12.B16
    VEOR   V23.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V14.B16, V14.B16
    VEOR   V21.B16, V15.B16, V15.B16
    VEOR   V22.B16, V14.B16, V14.B16
    VEOR   V23.B16, V15.B16, V15.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V16.B16, V16.B16
    VEOR   V21.B16, V17.B16, V17.B16
    VEOR   V22.B16, V16.B16, V16.B16
    VEOR   V23.B16, V17.B16, V17.B16
    // Check for early termination
    CMP    $6, R16
    BEQ    mulNeon_10x9Xor_store

    // Load and process 32 bytes from input 6 to 9 outputs
    VLD1.P 32(R11), [V24.B16, V25.B16]
    VUSHR  $4, V24.B16, V26.B16
    VUSHR  $4, V25.B16, V27.B16
    VAND   V18.B16, V24.B16, V24.B16
    VAND   V18.B16, V25.B16, V25.B16
    VAND   V18.B16, V26.B16, V26.B16
    VAND   V18.B16, V27.B16, V27.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V0.B16, V0.B16
    VEOR   V21.B16, V1.B16, V1.B16
    VEOR   V22.B16, V0.B16, V0.B16
    VEOR   V23.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VEOR   V22.B16, V2.B16, V2.B16
    VEOR   V23.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V4.B16, V4.B16
    VEOR   V21.B16, V5.B16, V5.B16
    VEOR   V22.B16, V4.B16, V4.B16
    VEOR   V23.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VEOR   V22.B16, V6.B16, V6.B16
    VEOR   V23.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V8.B16, V8.B16
    VEOR   V21.B16, V9.B16, V9.B16
    VEOR   V22.B16, V8.B16, V8.B16
    VEOR   V23.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    VEOR   V22.B16, V10.B16, V10.B16
    VEOR   V23.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V12.B16, V12.B16
    VEOR   V21.B16, V13.B16, V13.B16
    VEOR   V22.B16, V12.B16, V12.B16
    VEOR   V23.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V14.B16, V14.B16
    VEOR   V21.B16, V15.B16, V15.B16
    VEOR   V22.B16, V14.B16, V14.B16
    VEOR   V23.B16, V15.B16, V15.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V16.B16, V16.B16
    VEOR   V21.B16, V17.B16, V17.B16
    VEOR   V22.B16, V16.B16, V16.B16
    VEOR   V23.B16, V17.B16, V17.B16
    // Check for early termination
    CMP    $7, R16
    BEQ    mulNeon_10x9Xor_store

    // Load and process 32 bytes from input 7 to 9 outputs
    VLD1.P 32(R12), [V24.B16, V25.B16]
    VUSHR  $4, V24.B16, V26.B16
    VUSHR  $4, V25.B16, V27.B16
    VAND   V18.B16, V24.B16, V24.B16
    VAND   V18.B16, V25.B16, V25.B16
    VAND   V18.B16, V26.B16, V26.B16
    VAND   V18.B16, V27.B16, V27.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V0.B16, V0.B16
    VEOR   V21.B16, V1.B16, V1.B16
    VEOR   V22.B16, V0.B16, V0.B16
    VEOR   V23.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VEOR   V22.B16, V2.B16, V2.B16
    VEOR   V23.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V4.B16, V4.B16
    VEOR   V21.B16, V5.B16, V5.B16
    VEOR   V22.B16, V4.B16, V4.B16
    VEOR   V23.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VEOR   V22.B16, V6.B16, V6.B16
    VEOR   V23.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V8.B16, V8.B16
    VEOR   V21.B16, V9.B16, V9.B16
    VEOR   V22.B16, V8.B16, V8.B16
    VEOR   V23.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    VEOR   V22.B16, V10.B16, V10.B16
    VEOR   V23.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V12.B16, V12.B16
    VEOR   V21.B16, V13.B16, V13.B16
    VEOR   V22.B16, V12.B16, V12.B16
    VEOR   V23.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V14.B16, V14.B16
    VEOR   V21.B16, V15.B16, V15.B16
    VEOR   V22.B16, V14.B16, V14.B16
    VEOR   V23.B16, V15.B16, V15.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V16.B16, V16.B16
    VEOR   V21.B16, V17.B16, V17.B16
    VEOR   V22.B16, V16.B16, V16.B16
    VEOR   V23.B16, V17.B16, V17.B16
    // Check for early termination
    CMP    $8, R16
    BEQ    mulNeon_10x9Xor_store

    // Load and process 32 bytes from input 8 to 9 outputs
    VLD1.P 32(R13), [V24.B16, V25.B16]
    VUSHR  $4, V24.B16, V26.B16
    VUSHR  $4, V25.B16, V27.B16
    VAND   V18.B16, V24.B16, V24.B16
    VAND   V18.B16, V25.B16, V25.B16
    VAND   V18.B16, V26.B16, V26.B16
    VAND   V18.B16, V27.B16, V27.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V0.B16, V0.B16
    VEOR   V21.B16, V1.B16, V1.B16
    VEOR   V22.B16, V0.B16, V0.B16
    VEOR   V23.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VEOR   V22.B16, V2.B16, V2.B16
    VEOR   V23.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V4.B16, V4.B16
    VEOR   V21.B16, V5.B16, V5.B16
    VEOR   V22.B16, V4.B16, V4.B16
    VEOR   V23.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VEOR   V22.B16, V6.B16, V6.B16
    VEOR   V23.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V8.B16, V8.B16
    VEOR   V21.B16, V9.B16, V9.B16
    VEOR   V22.B16, V8.B16, V8.B16
    VEOR   V23.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    VEOR   V22.B16, V10.B16, V10.B16
    VEOR   V23.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V12.B16, V12.B16
    VEOR   V21.B16, V13.B16, V13.B16
    VEOR   V22.B16, V12.B16, V12.B16
    VEOR   V23.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V14.B16, V14.B16
    VEOR   V21.B16, V15.B16, V15.B16
    VEOR   V22.B16, V14.B16, V14.B16
    VEOR   V23.B16, V15.B16, V15.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V16.B16, V16.B16
    VEOR   V21.B16, V17.B16, V17.B16
    VEOR   V22.B16, V16.B16, V16.B16
    VEOR   V23.B16, V17.B16, V17.B16
    // Check for early termination
    CMP    $9, R16
    BEQ    mulNeon_10x9Xor_store

    // Load and process 32 bytes from input 9 to 9 outputs
    VLD1.P 32(R3), [V24.B16, V25.B16]
    VUSHR  $4, V24.B16, V26.B16
    VUSHR  $4, V25.B16, V27.B16
    VAND   V18.B16, V24.B16, V24.B16
    VAND   V18.B16, V25.B16, V25.B16
    VAND   V18.B16, V26.B16, V26.B16
    VAND   V18.B16, V27.B16, V27.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V0.B16, V0.B16
    VEOR   V21.B16, V1.B16, V1.B16
    VEOR   V22.B16, V0.B16, V0.B16
    VEOR   V23.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V2.B16, V2.B16
    VEOR   V21.B16, V3.B16, V3.B16
    VEOR   V22.B16, V2.B16, V2.B16
    VEOR   V23.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V4.B16, V4.B16
    VEOR   V21.B16, V5.B16, V5.B16
    VEOR   V22.B16, V4.B16, V4.B16
    VEOR   V23.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V6.B16, V6.B16
    VEOR   V21.B16, V7.B16, V7.B16
    VEOR   V22.B16, V6.B16, V6.B16
    VEOR   V23.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V8.B16, V8.B16
    VEOR   V21.B16, V9.B16, V9.B16
    VEOR   V22.B16, V8.B16, V8.B16
    VEOR   V23.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V10.B16, V10.B16
    VEOR   V21.B16, V11.B16, V11.B16
    VEOR   V22.B16, V10.B16, V10.B16
    VEOR   V23.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V12.B16, V12.B16
    VEOR   V21.B16, V13.B16, V13.B16
    VEOR   V22.B16, V12.B16, V12.B16
    VEOR   V23.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V14.B16, V14.B16
    VEOR   V21.B16, V15.B16, V15.B16
    VEOR   V22.B16, V14.B16, V14.B16
    VEOR   V23.B16, V15.B16, V15.B16
    VLD1.P 32(R2), [V20.B16, V21.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VTBL   V24.B16, [V20.B16], V20.B16
    VTBL   V25.B16, [V21.B16], V21.B16
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VEOR   V20.B16, V16.B16, V16.B16
    VEOR   V21.B16, V17.B16, V17.B16
    VEOR   V22.B16, V16.B16, V16.B16
    VEOR   V23.B16, V17.B16, V17.B16

mulNeon_10x9Xor_store:
    // Store 9 outputs
    MOVD (R14), R6
    ADD    R15<<3, R6
    VST1   [V0.D2, V1.D2], (R6)
    MOVD 24(R14), R6
    ADD    R15<<3, R6
    VST1   [V2.D2, V3.D2], (R6)
    MOVD 48(R14), R6
    ADD    R15<<3, R6
    VST1   [V4.D2, V5.D2], (R6)
    MOVD 72(R14), R6
    ADD    R15<<3, R6
    VST1   [V6.D2, V7.D2], (R6)
    MOVD 96(R14), R6
    ADD    R15<<3, R6
    VST1   [V8.D2, V9.D2], (R6)
    MOVD 120(R14), R6
    ADD    R15<<3, R6
    VST1   [V10.D2, V11.D2], (R6)
    MOVD 144(R14), R6
    ADD    R15<<3, R6
    VST1   [V12.D2, V13.D2], (R6)
    MOVD 168(R14), R6
    ADD    R15<<3, R6
    VST1   [V14.D2, V15.D2], (R6)
    MOVD 192(R14), R6
    ADD    R15<<3, R6
    VST1   [V16.D2, V17.D2], (R6)

    // Prepare for next loop
    ADD    $4, R15
    SUBS $1, R0
    BNE  mulNeon_10x9Xor_loop

mulNeon_10x9Xor_end:
    RET

// func mulNeon_10x10(matrix []byte, in [][]byte, out [][]byte, start int, n int)
// Requires: NEON
TEXT Â·mulNeon_10x10(SB), NOSPLIT, $8-88
    // Loading no tables to registers
    // Destination kept on stack
    // Full registers estimated 215 YMM used
    MOVD n+80(FP), R0
    LSR  $5, R0
    TST  R0, R0
    BEQ    mulNeon_10x10_end
    MOVD in_base+24(FP), R3
    MOVD (R3), R1
    MOVD 24(R3), R4
    MOVD 48(R3), R5
    MOVD 72(R3), R8
    MOVD 96(R3), R9
    MOVD 120(R3), R10
    MOVD 144(R3), R11
    MOVD 168(R3), R12
    MOVD 192(R3), R13
    MOVD 216(R3), R3
    MOVD out_base+48(FP), R14
    MOVD start+72(FP), R15

    // Add start offset to input
    ADD    R15, R1
    ADD    R15, R4
    ADD    R15, R5
    ADD    R15, R8
    ADD    R15, R9
    ADD    R15, R10
    ADD    R15, R11
    ADD    R15, R12
    ADD    R15, R13
    ADD    R15, R3
    LSR  $3, R15
    MOVD   $15, R6
    VMOV   R6, V20.B[0]
    VDUP   V20.B[0], V20.B16

    // Load number of input shards
    MOVD   in_len+32(FP), R16

mulNeon_10x10_loop:
    MOVD matrix_base+0(FP), R2
    // Load and process 32 bytes from input 0 to 10 outputs
    VLD1.P 32(R1), [V26.B16, V27.B16]
    VUSHR  $4, V26.B16, V28.B16
    VUSHR  $4, V27.B16, V29.B16
    VAND   V20.B16, V26.B16, V26.B16
    VAND   V20.B16, V27.B16, V27.B16
    VAND   V20.B16, V28.B16, V28.B16
    VAND   V20.B16, V29.B16, V29.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V24.B16, V0.B16
    VEOR   V23.B16, V25.B16, V1.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V24.B16, V2.B16
    VEOR   V23.B16, V25.B16, V3.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V24.B16, V4.B16
    VEOR   V23.B16, V25.B16, V5.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V24.B16, V6.B16
    VEOR   V23.B16, V25.B16, V7.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V24.B16, V8.B16
    VEOR   V23.B16, V25.B16, V9.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V24.B16, V10.B16
    VEOR   V23.B16, V25.B16, V11.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V24.B16, V12.B16
    VEOR   V23.B16, V25.B16, V13.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V24.B16, V14.B16
    VEOR   V23.B16, V25.B16, V15.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V24.B16, V16.B16
    VEOR   V23.B16, V25.B16, V17.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V24.B16, V18.B16
    VEOR   V23.B16, V25.B16, V19.B16
    // Check for early termination
    CMP    $1, R16
    BEQ    mulNeon_10x10_store

    // Load and process 32 bytes from input 1 to 10 outputs
    VLD1.P 32(R4), [V26.B16, V27.B16]
    VUSHR  $4, V26.B16, V28.B16
    VUSHR  $4, V27.B16, V29.B16
    VAND   V20.B16, V26.B16, V26.B16
    VAND   V20.B16, V27.B16, V27.B16
    VAND   V20.B16, V28.B16, V28.B16
    VAND   V20.B16, V29.B16, V29.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V0.B16, V0.B16
    VEOR   V23.B16, V1.B16, V1.B16
    VEOR   V24.B16, V0.B16, V0.B16
    VEOR   V25.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V2.B16, V2.B16
    VEOR   V23.B16, V3.B16, V3.B16
    VEOR   V24.B16, V2.B16, V2.B16
    VEOR   V25.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V4.B16, V4.B16
    VEOR   V23.B16, V5.B16, V5.B16
    VEOR   V24.B16, V4.B16, V4.B16
    VEOR   V25.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V6.B16, V6.B16
    VEOR   V23.B16, V7.B16, V7.B16
    VEOR   V24.B16, V6.B16, V6.B16
    VEOR   V25.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V8.B16, V8.B16
    VEOR   V23.B16, V9.B16, V9.B16
    VEOR   V24.B16, V8.B16, V8.B16
    VEOR   V25.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V10.B16, V10.B16
    VEOR   V23.B16, V11.B16, V11.B16
    VEOR   V24.B16, V10.B16, V10.B16
    VEOR   V25.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V12.B16, V12.B16
    VEOR   V23.B16, V13.B16, V13.B16
    VEOR   V24.B16, V12.B16, V12.B16
    VEOR   V25.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V14.B16, V14.B16
    VEOR   V23.B16, V15.B16, V15.B16
    VEOR   V24.B16, V14.B16, V14.B16
    VEOR   V25.B16, V15.B16, V15.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V16.B16, V16.B16
    VEOR   V23.B16, V17.B16, V17.B16
    VEOR   V24.B16, V16.B16, V16.B16
    VEOR   V25.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V18.B16, V18.B16
    VEOR   V23.B16, V19.B16, V19.B16
    VEOR   V24.B16, V18.B16, V18.B16
    VEOR   V25.B16, V19.B16, V19.B16
    // Check for early termination
    CMP    $2, R16
    BEQ    mulNeon_10x10_store

    // Load and process 32 bytes from input 2 to 10 outputs
    VLD1.P 32(R5), [V26.B16, V27.B16]
    VUSHR  $4, V26.B16, V28.B16
    VUSHR  $4, V27.B16, V29.B16
    VAND   V20.B16, V26.B16, V26.B16
    VAND   V20.B16, V27.B16, V27.B16
    VAND   V20.B16, V28.B16, V28.B16
    VAND   V20.B16, V29.B16, V29.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V0.B16, V0.B16
    VEOR   V23.B16, V1.B16, V1.B16
    VEOR   V24.B16, V0.B16, V0.B16
    VEOR   V25.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V2.B16, V2.B16
    VEOR   V23.B16, V3.B16, V3.B16
    VEOR   V24.B16, V2.B16, V2.B16
    VEOR   V25.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V4.B16, V4.B16
    VEOR   V23.B16, V5.B16, V5.B16
    VEOR   V24.B16, V4.B16, V4.B16
    VEOR   V25.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V6.B16, V6.B16
    VEOR   V23.B16, V7.B16, V7.B16
    VEOR   V24.B16, V6.B16, V6.B16
    VEOR   V25.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V8.B16, V8.B16
    VEOR   V23.B16, V9.B16, V9.B16
    VEOR   V24.B16, V8.B16, V8.B16
    VEOR   V25.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V10.B16, V10.B16
    VEOR   V23.B16, V11.B16, V11.B16
    VEOR   V24.B16, V10.B16, V10.B16
    VEOR   V25.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V12.B16, V12.B16
    VEOR   V23.B16, V13.B16, V13.B16
    VEOR   V24.B16, V12.B16, V12.B16
    VEOR   V25.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V14.B16, V14.B16
    VEOR   V23.B16, V15.B16, V15.B16
    VEOR   V24.B16, V14.B16, V14.B16
    VEOR   V25.B16, V15.B16, V15.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V16.B16, V16.B16
    VEOR   V23.B16, V17.B16, V17.B16
    VEOR   V24.B16, V16.B16, V16.B16
    VEOR   V25.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V18.B16, V18.B16
    VEOR   V23.B16, V19.B16, V19.B16
    VEOR   V24.B16, V18.B16, V18.B16
    VEOR   V25.B16, V19.B16, V19.B16
    // Check for early termination
    CMP    $3, R16
    BEQ    mulNeon_10x10_store

    // Load and process 32 bytes from input 3 to 10 outputs
    VLD1.P 32(R8), [V26.B16, V27.B16]
    VUSHR  $4, V26.B16, V28.B16
    VUSHR  $4, V27.B16, V29.B16
    VAND   V20.B16, V26.B16, V26.B16
    VAND   V20.B16, V27.B16, V27.B16
    VAND   V20.B16, V28.B16, V28.B16
    VAND   V20.B16, V29.B16, V29.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V0.B16, V0.B16
    VEOR   V23.B16, V1.B16, V1.B16
    VEOR   V24.B16, V0.B16, V0.B16
    VEOR   V25.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V2.B16, V2.B16
    VEOR   V23.B16, V3.B16, V3.B16
    VEOR   V24.B16, V2.B16, V2.B16
    VEOR   V25.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V4.B16, V4.B16
    VEOR   V23.B16, V5.B16, V5.B16
    VEOR   V24.B16, V4.B16, V4.B16
    VEOR   V25.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V6.B16, V6.B16
    VEOR   V23.B16, V7.B16, V7.B16
    VEOR   V24.B16, V6.B16, V6.B16
    VEOR   V25.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V8.B16, V8.B16
    VEOR   V23.B16, V9.B16, V9.B16
    VEOR   V24.B16, V8.B16, V8.B16
    VEOR   V25.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V10.B16, V10.B16
    VEOR   V23.B16, V11.B16, V11.B16
    VEOR   V24.B16, V10.B16, V10.B16
    VEOR   V25.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V12.B16, V12.B16
    VEOR   V23.B16, V13.B16, V13.B16
    VEOR   V24.B16, V12.B16, V12.B16
    VEOR   V25.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V14.B16, V14.B16
    VEOR   V23.B16, V15.B16, V15.B16
    VEOR   V24.B16, V14.B16, V14.B16
    VEOR   V25.B16, V15.B16, V15.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V16.B16, V16.B16
    VEOR   V23.B16, V17.B16, V17.B16
    VEOR   V24.B16, V16.B16, V16.B16
    VEOR   V25.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V18.B16, V18.B16
    VEOR   V23.B16, V19.B16, V19.B16
    VEOR   V24.B16, V18.B16, V18.B16
    VEOR   V25.B16, V19.B16, V19.B16
    // Check for early termination
    CMP    $4, R16
    BEQ    mulNeon_10x10_store

    // Load and process 32 bytes from input 4 to 10 outputs
    VLD1.P 32(R9), [V26.B16, V27.B16]
    VUSHR  $4, V26.B16, V28.B16
    VUSHR  $4, V27.B16, V29.B16
    VAND   V20.B16, V26.B16, V26.B16
    VAND   V20.B16, V27.B16, V27.B16
    VAND   V20.B16, V28.B16, V28.B16
    VAND   V20.B16, V29.B16, V29.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V0.B16, V0.B16
    VEOR   V23.B16, V1.B16, V1.B16
    VEOR   V24.B16, V0.B16, V0.B16
    VEOR   V25.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V2.B16, V2.B16
    VEOR   V23.B16, V3.B16, V3.B16
    VEOR   V24.B16, V2.B16, V2.B16
    VEOR   V25.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V4.B16, V4.B16
    VEOR   V23.B16, V5.B16, V5.B16
    VEOR   V24.B16, V4.B16, V4.B16
    VEOR   V25.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V6.B16, V6.B16
    VEOR   V23.B16, V7.B16, V7.B16
    VEOR   V24.B16, V6.B16, V6.B16
    VEOR   V25.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V8.B16, V8.B16
    VEOR   V23.B16, V9.B16, V9.B16
    VEOR   V24.B16, V8.B16, V8.B16
    VEOR   V25.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V10.B16, V10.B16
    VEOR   V23.B16, V11.B16, V11.B16
    VEOR   V24.B16, V10.B16, V10.B16
    VEOR   V25.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V12.B16, V12.B16
    VEOR   V23.B16, V13.B16, V13.B16
    VEOR   V24.B16, V12.B16, V12.B16
    VEOR   V25.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V14.B16, V14.B16
    VEOR   V23.B16, V15.B16, V15.B16
    VEOR   V24.B16, V14.B16, V14.B16
    VEOR   V25.B16, V15.B16, V15.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V16.B16, V16.B16
    VEOR   V23.B16, V17.B16, V17.B16
    VEOR   V24.B16, V16.B16, V16.B16
    VEOR   V25.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V18.B16, V18.B16
    VEOR   V23.B16, V19.B16, V19.B16
    VEOR   V24.B16, V18.B16, V18.B16
    VEOR   V25.B16, V19.B16, V19.B16
    // Check for early termination
    CMP    $5, R16
    BEQ    mulNeon_10x10_store

    // Load and process 32 bytes from input 5 to 10 outputs
    VLD1.P 32(R10), [V26.B16, V27.B16]
    VUSHR  $4, V26.B16, V28.B16
    VUSHR  $4, V27.B16, V29.B16
    VAND   V20.B16, V26.B16, V26.B16
    VAND   V20.B16, V27.B16, V27.B16
    VAND   V20.B16, V28.B16, V28.B16
    VAND   V20.B16, V29.B16, V29.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V0.B16, V0.B16
    VEOR   V23.B16, V1.B16, V1.B16
    VEOR   V24.B16, V0.B16, V0.B16
    VEOR   V25.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V2.B16, V2.B16
    VEOR   V23.B16, V3.B16, V3.B16
    VEOR   V24.B16, V2.B16, V2.B16
    VEOR   V25.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V4.B16, V4.B16
    VEOR   V23.B16, V5.B16, V5.B16
    VEOR   V24.B16, V4.B16, V4.B16
    VEOR   V25.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V6.B16, V6.B16
    VEOR   V23.B16, V7.B16, V7.B16
    VEOR   V24.B16, V6.B16, V6.B16
    VEOR   V25.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V8.B16, V8.B16
    VEOR   V23.B16, V9.B16, V9.B16
    VEOR   V24.B16, V8.B16, V8.B16
    VEOR   V25.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V10.B16, V10.B16
    VEOR   V23.B16, V11.B16, V11.B16
    VEOR   V24.B16, V10.B16, V10.B16
    VEOR   V25.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V12.B16, V12.B16
    VEOR   V23.B16, V13.B16, V13.B16
    VEOR   V24.B16, V12.B16, V12.B16
    VEOR   V25.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V14.B16, V14.B16
    VEOR   V23.B16, V15.B16, V15.B16
    VEOR   V24.B16, V14.B16, V14.B16
    VEOR   V25.B16, V15.B16, V15.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V16.B16, V16.B16
    VEOR   V23.B16, V17.B16, V17.B16
    VEOR   V24.B16, V16.B16, V16.B16
    VEOR   V25.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V18.B16, V18.B16
    VEOR   V23.B16, V19.B16, V19.B16
    VEOR   V24.B16, V18.B16, V18.B16
    VEOR   V25.B16, V19.B16, V19.B16
    // Check for early termination
    CMP    $6, R16
    BEQ    mulNeon_10x10_store

    // Load and process 32 bytes from input 6 to 10 outputs
    VLD1.P 32(R11), [V26.B16, V27.B16]
    VUSHR  $4, V26.B16, V28.B16
    VUSHR  $4, V27.B16, V29.B16
    VAND   V20.B16, V26.B16, V26.B16
    VAND   V20.B16, V27.B16, V27.B16
    VAND   V20.B16, V28.B16, V28.B16
    VAND   V20.B16, V29.B16, V29.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V0.B16, V0.B16
    VEOR   V23.B16, V1.B16, V1.B16
    VEOR   V24.B16, V0.B16, V0.B16
    VEOR   V25.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V2.B16, V2.B16
    VEOR   V23.B16, V3.B16, V3.B16
    VEOR   V24.B16, V2.B16, V2.B16
    VEOR   V25.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V4.B16, V4.B16
    VEOR   V23.B16, V5.B16, V5.B16
    VEOR   V24.B16, V4.B16, V4.B16
    VEOR   V25.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V6.B16, V6.B16
    VEOR   V23.B16, V7.B16, V7.B16
    VEOR   V24.B16, V6.B16, V6.B16
    VEOR   V25.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V8.B16, V8.B16
    VEOR   V23.B16, V9.B16, V9.B16
    VEOR   V24.B16, V8.B16, V8.B16
    VEOR   V25.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V10.B16, V10.B16
    VEOR   V23.B16, V11.B16, V11.B16
    VEOR   V24.B16, V10.B16, V10.B16
    VEOR   V25.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V12.B16, V12.B16
    VEOR   V23.B16, V13.B16, V13.B16
    VEOR   V24.B16, V12.B16, V12.B16
    VEOR   V25.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V14.B16, V14.B16
    VEOR   V23.B16, V15.B16, V15.B16
    VEOR   V24.B16, V14.B16, V14.B16
    VEOR   V25.B16, V15.B16, V15.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V16.B16, V16.B16
    VEOR   V23.B16, V17.B16, V17.B16
    VEOR   V24.B16, V16.B16, V16.B16
    VEOR   V25.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V18.B16, V18.B16
    VEOR   V23.B16, V19.B16, V19.B16
    VEOR   V24.B16, V18.B16, V18.B16
    VEOR   V25.B16, V19.B16, V19.B16
    // Check for early termination
    CMP    $7, R16
    BEQ    mulNeon_10x10_store

    // Load and process 32 bytes from input 7 to 10 outputs
    VLD1.P 32(R12), [V26.B16, V27.B16]
    VUSHR  $4, V26.B16, V28.B16
    VUSHR  $4, V27.B16, V29.B16
    VAND   V20.B16, V26.B16, V26.B16
    VAND   V20.B16, V27.B16, V27.B16
    VAND   V20.B16, V28.B16, V28.B16
    VAND   V20.B16, V29.B16, V29.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V0.B16, V0.B16
    VEOR   V23.B16, V1.B16, V1.B16
    VEOR   V24.B16, V0.B16, V0.B16
    VEOR   V25.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V2.B16, V2.B16
    VEOR   V23.B16, V3.B16, V3.B16
    VEOR   V24.B16, V2.B16, V2.B16
    VEOR   V25.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V4.B16, V4.B16
    VEOR   V23.B16, V5.B16, V5.B16
    VEOR   V24.B16, V4.B16, V4.B16
    VEOR   V25.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V6.B16, V6.B16
    VEOR   V23.B16, V7.B16, V7.B16
    VEOR   V24.B16, V6.B16, V6.B16
    VEOR   V25.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V8.B16, V8.B16
    VEOR   V23.B16, V9.B16, V9.B16
    VEOR   V24.B16, V8.B16, V8.B16
    VEOR   V25.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V10.B16, V10.B16
    VEOR   V23.B16, V11.B16, V11.B16
    VEOR   V24.B16, V10.B16, V10.B16
    VEOR   V25.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V12.B16, V12.B16
    VEOR   V23.B16, V13.B16, V13.B16
    VEOR   V24.B16, V12.B16, V12.B16
    VEOR   V25.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V14.B16, V14.B16
    VEOR   V23.B16, V15.B16, V15.B16
    VEOR   V24.B16, V14.B16, V14.B16
    VEOR   V25.B16, V15.B16, V15.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V16.B16, V16.B16
    VEOR   V23.B16, V17.B16, V17.B16
    VEOR   V24.B16, V16.B16, V16.B16
    VEOR   V25.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V18.B16, V18.B16
    VEOR   V23.B16, V19.B16, V19.B16
    VEOR   V24.B16, V18.B16, V18.B16
    VEOR   V25.B16, V19.B16, V19.B16
    // Check for early termination
    CMP    $8, R16
    BEQ    mulNeon_10x10_store

    // Load and process 32 bytes from input 8 to 10 outputs
    VLD1.P 32(R13), [V26.B16, V27.B16]
    VUSHR  $4, V26.B16, V28.B16
    VUSHR  $4, V27.B16, V29.B16
    VAND   V20.B16, V26.B16, V26.B16
    VAND   V20.B16, V27.B16, V27.B16
    VAND   V20.B16, V28.B16, V28.B16
    VAND   V20.B16, V29.B16, V29.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V0.B16, V0.B16
    VEOR   V23.B16, V1.B16, V1.B16
    VEOR   V24.B16, V0.B16, V0.B16
    VEOR   V25.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V2.B16, V2.B16
    VEOR   V23.B16, V3.B16, V3.B16
    VEOR   V24.B16, V2.B16, V2.B16
    VEOR   V25.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V4.B16, V4.B16
    VEOR   V23.B16, V5.B16, V5.B16
    VEOR   V24.B16, V4.B16, V4.B16
    VEOR   V25.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V6.B16, V6.B16
    VEOR   V23.B16, V7.B16, V7.B16
    VEOR   V24.B16, V6.B16, V6.B16
    VEOR   V25.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V8.B16, V8.B16
    VEOR   V23.B16, V9.B16, V9.B16
    VEOR   V24.B16, V8.B16, V8.B16
    VEOR   V25.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V10.B16, V10.B16
    VEOR   V23.B16, V11.B16, V11.B16
    VEOR   V24.B16, V10.B16, V10.B16
    VEOR   V25.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V12.B16, V12.B16
    VEOR   V23.B16, V13.B16, V13.B16
    VEOR   V24.B16, V12.B16, V12.B16
    VEOR   V25.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V14.B16, V14.B16
    VEOR   V23.B16, V15.B16, V15.B16
    VEOR   V24.B16, V14.B16, V14.B16
    VEOR   V25.B16, V15.B16, V15.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V16.B16, V16.B16
    VEOR   V23.B16, V17.B16, V17.B16
    VEOR   V24.B16, V16.B16, V16.B16
    VEOR   V25.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V18.B16, V18.B16
    VEOR   V23.B16, V19.B16, V19.B16
    VEOR   V24.B16, V18.B16, V18.B16
    VEOR   V25.B16, V19.B16, V19.B16
    // Check for early termination
    CMP    $9, R16
    BEQ    mulNeon_10x10_store

    // Load and process 32 bytes from input 9 to 10 outputs
    VLD1.P 32(R3), [V26.B16, V27.B16]
    VUSHR  $4, V26.B16, V28.B16
    VUSHR  $4, V27.B16, V29.B16
    VAND   V20.B16, V26.B16, V26.B16
    VAND   V20.B16, V27.B16, V27.B16
    VAND   V20.B16, V28.B16, V28.B16
    VAND   V20.B16, V29.B16, V29.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V0.B16, V0.B16
    VEOR   V23.B16, V1.B16, V1.B16
    VEOR   V24.B16, V0.B16, V0.B16
    VEOR   V25.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V2.B16, V2.B16
    VEOR   V23.B16, V3.B16, V3.B16
    VEOR   V24.B16, V2.B16, V2.B16
    VEOR   V25.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V4.B16, V4.B16
    VEOR   V23.B16, V5.B16, V5.B16
    VEOR   V24.B16, V4.B16, V4.B16
    VEOR   V25.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V6.B16, V6.B16
    VEOR   V23.B16, V7.B16, V7.B16
    VEOR   V24.B16, V6.B16, V6.B16
    VEOR   V25.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V8.B16, V8.B16
    VEOR   V23.B16, V9.B16, V9.B16
    VEOR   V24.B16, V8.B16, V8.B16
    VEOR   V25.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V10.B16, V10.B16
    VEOR   V23.B16, V11.B16, V11.B16
    VEOR   V24.B16, V10.B16, V10.B16
    VEOR   V25.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V12.B16, V12.B16
    VEOR   V23.B16, V13.B16, V13.B16
    VEOR   V24.B16, V12.B16, V12.B16
    VEOR   V25.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V14.B16, V14.B16
    VEOR   V23.B16, V15.B16, V15.B16
    VEOR   V24.B16, V14.B16, V14.B16
    VEOR   V25.B16, V15.B16, V15.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V16.B16, V16.B16
    VEOR   V23.B16, V17.B16, V17.B16
    VEOR   V24.B16, V16.B16, V16.B16
    VEOR   V25.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V18.B16, V18.B16
    VEOR   V23.B16, V19.B16, V19.B16
    VEOR   V24.B16, V18.B16, V18.B16
    VEOR   V25.B16, V19.B16, V19.B16

mulNeon_10x10_store:
    // Store 10 outputs
    MOVD (R14), R6
    ADD    R15<<3, R6
    VST1   [V0.D2, V1.D2], (R6)
    MOVD 24(R14), R6
    ADD    R15<<3, R6
    VST1   [V2.D2, V3.D2], (R6)
    MOVD 48(R14), R6
    ADD    R15<<3, R6
    VST1   [V4.D2, V5.D2], (R6)
    MOVD 72(R14), R6
    ADD    R15<<3, R6
    VST1   [V6.D2, V7.D2], (R6)
    MOVD 96(R14), R6
    ADD    R15<<3, R6
    VST1   [V8.D2, V9.D2], (R6)
    MOVD 120(R14), R6
    ADD    R15<<3, R6
    VST1   [V10.D2, V11.D2], (R6)
    MOVD 144(R14), R6
    ADD    R15<<3, R6
    VST1   [V12.D2, V13.D2], (R6)
    MOVD 168(R14), R6
    ADD    R15<<3, R6
    VST1   [V14.D2, V15.D2], (R6)
    MOVD 192(R14), R6
    ADD    R15<<3, R6
    VST1   [V16.D2, V17.D2], (R6)
    MOVD 216(R14), R6
    ADD    R15<<3, R6
    VST1   [V18.D2, V19.D2], (R6)

    // Prepare for next loop
    ADD    $4, R15
    SUBS $1, R0
    BNE  mulNeon_10x10_loop

mulNeon_10x10_end:
    RET

// func mulNeon_10x10Xor(matrix []byte, in [][]byte, out [][]byte, start int, n int)
// Requires: NEON
TEXT Â·mulNeon_10x10Xor(SB), NOSPLIT, $8-88
    // Loading no tables to registers
    // Destination kept on stack
    // Full registers estimated 215 YMM used
    MOVD n+80(FP), R0
    LSR  $5, R0
    TST  R0, R0
    BEQ    mulNeon_10x10Xor_end
    MOVD in_base+24(FP), R3
    MOVD (R3), R1
    MOVD 24(R3), R4
    MOVD 48(R3), R5
    MOVD 72(R3), R8
    MOVD 96(R3), R9
    MOVD 120(R3), R10
    MOVD 144(R3), R11
    MOVD 168(R3), R12
    MOVD 192(R3), R13
    MOVD 216(R3), R3
    MOVD out_base+48(FP), R14
    MOVD start+72(FP), R15

    // Add start offset to input
    ADD    R15, R1
    ADD    R15, R4
    ADD    R15, R5
    ADD    R15, R8
    ADD    R15, R9
    ADD    R15, R10
    ADD    R15, R11
    ADD    R15, R12
    ADD    R15, R13
    ADD    R15, R3
    LSR  $3, R15
    MOVD   $15, R6
    VMOV   R6, V20.B[0]
    VDUP   V20.B[0], V20.B16

    // Load number of input shards
    MOVD   in_len+32(FP), R16

mulNeon_10x10Xor_loop:
    MOVD matrix_base+0(FP), R2
    // Load and process 32 bytes from input 0 to 10 outputs
    VLD1.P 32(R1), [V26.B16, V27.B16]
    VUSHR  $4, V26.B16, V28.B16
    VUSHR  $4, V27.B16, V29.B16
    VAND   V20.B16, V26.B16, V26.B16
    VAND   V20.B16, V27.B16, V27.B16
    VAND   V20.B16, V28.B16, V28.B16
    VAND   V20.B16, V29.B16, V29.B16
    MOVD (R14), R6
    ADD    R15<<3, R6
    VLD1   (R6), [V0.B16, V1.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V0.B16, V0.B16
    VEOR   V23.B16, V1.B16, V1.B16
    VEOR   V24.B16, V0.B16, V0.B16
    VEOR   V25.B16, V1.B16, V1.B16
    MOVD 24(R14), R6
    ADD    R15<<3, R6
    VLD1   (R6), [V2.B16, V3.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V2.B16, V2.B16
    VEOR   V23.B16, V3.B16, V3.B16
    VEOR   V24.B16, V2.B16, V2.B16
    VEOR   V25.B16, V3.B16, V3.B16
    MOVD 48(R14), R6
    ADD    R15<<3, R6
    VLD1   (R6), [V4.B16, V5.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V4.B16, V4.B16
    VEOR   V23.B16, V5.B16, V5.B16
    VEOR   V24.B16, V4.B16, V4.B16
    VEOR   V25.B16, V5.B16, V5.B16
    MOVD 72(R14), R6
    ADD    R15<<3, R6
    VLD1   (R6), [V6.B16, V7.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V6.B16, V6.B16
    VEOR   V23.B16, V7.B16, V7.B16
    VEOR   V24.B16, V6.B16, V6.B16
    VEOR   V25.B16, V7.B16, V7.B16
    MOVD 96(R14), R6
    ADD    R15<<3, R6
    VLD1   (R6), [V8.B16, V9.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V8.B16, V8.B16
    VEOR   V23.B16, V9.B16, V9.B16
    VEOR   V24.B16, V8.B16, V8.B16
    VEOR   V25.B16, V9.B16, V9.B16
    MOVD 120(R14), R6
    ADD    R15<<3, R6
    VLD1   (R6), [V10.B16, V11.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V10.B16, V10.B16
    VEOR   V23.B16, V11.B16, V11.B16
    VEOR   V24.B16, V10.B16, V10.B16
    VEOR   V25.B16, V11.B16, V11.B16
    MOVD 144(R14), R6
    ADD    R15<<3, R6
    VLD1   (R6), [V12.B16, V13.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V12.B16, V12.B16
    VEOR   V23.B16, V13.B16, V13.B16
    VEOR   V24.B16, V12.B16, V12.B16
    VEOR   V25.B16, V13.B16, V13.B16
    MOVD 168(R14), R6
    ADD    R15<<3, R6
    VLD1   (R6), [V14.B16, V15.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V14.B16, V14.B16
    VEOR   V23.B16, V15.B16, V15.B16
    VEOR   V24.B16, V14.B16, V14.B16
    VEOR   V25.B16, V15.B16, V15.B16
    MOVD 192(R14), R6
    ADD    R15<<3, R6
    VLD1   (R6), [V16.B16, V17.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V16.B16, V16.B16
    VEOR   V23.B16, V17.B16, V17.B16
    VEOR   V24.B16, V16.B16, V16.B16
    VEOR   V25.B16, V17.B16, V17.B16
    MOVD 216(R14), R6
    ADD    R15<<3, R6
    VLD1   (R6), [V18.B16, V19.B16]
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V18.B16, V18.B16
    VEOR   V23.B16, V19.B16, V19.B16
    VEOR   V24.B16, V18.B16, V18.B16
    VEOR   V25.B16, V19.B16, V19.B16
    // Check for early termination
    CMP    $1, R16
    BEQ    mulNeon_10x10Xor_store

    // Load and process 32 bytes from input 1 to 10 outputs
    VLD1.P 32(R4), [V26.B16, V27.B16]
    VUSHR  $4, V26.B16, V28.B16
    VUSHR  $4, V27.B16, V29.B16
    VAND   V20.B16, V26.B16, V26.B16
    VAND   V20.B16, V27.B16, V27.B16
    VAND   V20.B16, V28.B16, V28.B16
    VAND   V20.B16, V29.B16, V29.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V0.B16, V0.B16
    VEOR   V23.B16, V1.B16, V1.B16
    VEOR   V24.B16, V0.B16, V0.B16
    VEOR   V25.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V2.B16, V2.B16
    VEOR   V23.B16, V3.B16, V3.B16
    VEOR   V24.B16, V2.B16, V2.B16
    VEOR   V25.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V4.B16, V4.B16
    VEOR   V23.B16, V5.B16, V5.B16
    VEOR   V24.B16, V4.B16, V4.B16
    VEOR   V25.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V6.B16, V6.B16
    VEOR   V23.B16, V7.B16, V7.B16
    VEOR   V24.B16, V6.B16, V6.B16
    VEOR   V25.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V8.B16, V8.B16
    VEOR   V23.B16, V9.B16, V9.B16
    VEOR   V24.B16, V8.B16, V8.B16
    VEOR   V25.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V10.B16, V10.B16
    VEOR   V23.B16, V11.B16, V11.B16
    VEOR   V24.B16, V10.B16, V10.B16
    VEOR   V25.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V12.B16, V12.B16
    VEOR   V23.B16, V13.B16, V13.B16
    VEOR   V24.B16, V12.B16, V12.B16
    VEOR   V25.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V14.B16, V14.B16
    VEOR   V23.B16, V15.B16, V15.B16
    VEOR   V24.B16, V14.B16, V14.B16
    VEOR   V25.B16, V15.B16, V15.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V16.B16, V16.B16
    VEOR   V23.B16, V17.B16, V17.B16
    VEOR   V24.B16, V16.B16, V16.B16
    VEOR   V25.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V18.B16, V18.B16
    VEOR   V23.B16, V19.B16, V19.B16
    VEOR   V24.B16, V18.B16, V18.B16
    VEOR   V25.B16, V19.B16, V19.B16
    // Check for early termination
    CMP    $2, R16
    BEQ    mulNeon_10x10Xor_store

    // Load and process 32 bytes from input 2 to 10 outputs
    VLD1.P 32(R5), [V26.B16, V27.B16]
    VUSHR  $4, V26.B16, V28.B16
    VUSHR  $4, V27.B16, V29.B16
    VAND   V20.B16, V26.B16, V26.B16
    VAND   V20.B16, V27.B16, V27.B16
    VAND   V20.B16, V28.B16, V28.B16
    VAND   V20.B16, V29.B16, V29.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V0.B16, V0.B16
    VEOR   V23.B16, V1.B16, V1.B16
    VEOR   V24.B16, V0.B16, V0.B16
    VEOR   V25.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V2.B16, V2.B16
    VEOR   V23.B16, V3.B16, V3.B16
    VEOR   V24.B16, V2.B16, V2.B16
    VEOR   V25.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V4.B16, V4.B16
    VEOR   V23.B16, V5.B16, V5.B16
    VEOR   V24.B16, V4.B16, V4.B16
    VEOR   V25.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V6.B16, V6.B16
    VEOR   V23.B16, V7.B16, V7.B16
    VEOR   V24.B16, V6.B16, V6.B16
    VEOR   V25.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V8.B16, V8.B16
    VEOR   V23.B16, V9.B16, V9.B16
    VEOR   V24.B16, V8.B16, V8.B16
    VEOR   V25.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V10.B16, V10.B16
    VEOR   V23.B16, V11.B16, V11.B16
    VEOR   V24.B16, V10.B16, V10.B16
    VEOR   V25.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V12.B16, V12.B16
    VEOR   V23.B16, V13.B16, V13.B16
    VEOR   V24.B16, V12.B16, V12.B16
    VEOR   V25.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V14.B16, V14.B16
    VEOR   V23.B16, V15.B16, V15.B16
    VEOR   V24.B16, V14.B16, V14.B16
    VEOR   V25.B16, V15.B16, V15.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V16.B16, V16.B16
    VEOR   V23.B16, V17.B16, V17.B16
    VEOR   V24.B16, V16.B16, V16.B16
    VEOR   V25.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V18.B16, V18.B16
    VEOR   V23.B16, V19.B16, V19.B16
    VEOR   V24.B16, V18.B16, V18.B16
    VEOR   V25.B16, V19.B16, V19.B16
    // Check for early termination
    CMP    $3, R16
    BEQ    mulNeon_10x10Xor_store

    // Load and process 32 bytes from input 3 to 10 outputs
    VLD1.P 32(R8), [V26.B16, V27.B16]
    VUSHR  $4, V26.B16, V28.B16
    VUSHR  $4, V27.B16, V29.B16
    VAND   V20.B16, V26.B16, V26.B16
    VAND   V20.B16, V27.B16, V27.B16
    VAND   V20.B16, V28.B16, V28.B16
    VAND   V20.B16, V29.B16, V29.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V0.B16, V0.B16
    VEOR   V23.B16, V1.B16, V1.B16
    VEOR   V24.B16, V0.B16, V0.B16
    VEOR   V25.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V2.B16, V2.B16
    VEOR   V23.B16, V3.B16, V3.B16
    VEOR   V24.B16, V2.B16, V2.B16
    VEOR   V25.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V4.B16, V4.B16
    VEOR   V23.B16, V5.B16, V5.B16
    VEOR   V24.B16, V4.B16, V4.B16
    VEOR   V25.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V6.B16, V6.B16
    VEOR   V23.B16, V7.B16, V7.B16
    VEOR   V24.B16, V6.B16, V6.B16
    VEOR   V25.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V8.B16, V8.B16
    VEOR   V23.B16, V9.B16, V9.B16
    VEOR   V24.B16, V8.B16, V8.B16
    VEOR   V25.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V10.B16, V10.B16
    VEOR   V23.B16, V11.B16, V11.B16
    VEOR   V24.B16, V10.B16, V10.B16
    VEOR   V25.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V12.B16, V12.B16
    VEOR   V23.B16, V13.B16, V13.B16
    VEOR   V24.B16, V12.B16, V12.B16
    VEOR   V25.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V14.B16, V14.B16
    VEOR   V23.B16, V15.B16, V15.B16
    VEOR   V24.B16, V14.B16, V14.B16
    VEOR   V25.B16, V15.B16, V15.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V16.B16, V16.B16
    VEOR   V23.B16, V17.B16, V17.B16
    VEOR   V24.B16, V16.B16, V16.B16
    VEOR   V25.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V18.B16, V18.B16
    VEOR   V23.B16, V19.B16, V19.B16
    VEOR   V24.B16, V18.B16, V18.B16
    VEOR   V25.B16, V19.B16, V19.B16
    // Check for early termination
    CMP    $4, R16
    BEQ    mulNeon_10x10Xor_store

    // Load and process 32 bytes from input 4 to 10 outputs
    VLD1.P 32(R9), [V26.B16, V27.B16]
    VUSHR  $4, V26.B16, V28.B16
    VUSHR  $4, V27.B16, V29.B16
    VAND   V20.B16, V26.B16, V26.B16
    VAND   V20.B16, V27.B16, V27.B16
    VAND   V20.B16, V28.B16, V28.B16
    VAND   V20.B16, V29.B16, V29.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V0.B16, V0.B16
    VEOR   V23.B16, V1.B16, V1.B16
    VEOR   V24.B16, V0.B16, V0.B16
    VEOR   V25.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V2.B16, V2.B16
    VEOR   V23.B16, V3.B16, V3.B16
    VEOR   V24.B16, V2.B16, V2.B16
    VEOR   V25.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V4.B16, V4.B16
    VEOR   V23.B16, V5.B16, V5.B16
    VEOR   V24.B16, V4.B16, V4.B16
    VEOR   V25.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V6.B16, V6.B16
    VEOR   V23.B16, V7.B16, V7.B16
    VEOR   V24.B16, V6.B16, V6.B16
    VEOR   V25.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V8.B16, V8.B16
    VEOR   V23.B16, V9.B16, V9.B16
    VEOR   V24.B16, V8.B16, V8.B16
    VEOR   V25.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V10.B16, V10.B16
    VEOR   V23.B16, V11.B16, V11.B16
    VEOR   V24.B16, V10.B16, V10.B16
    VEOR   V25.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V12.B16, V12.B16
    VEOR   V23.B16, V13.B16, V13.B16
    VEOR   V24.B16, V12.B16, V12.B16
    VEOR   V25.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V14.B16, V14.B16
    VEOR   V23.B16, V15.B16, V15.B16
    VEOR   V24.B16, V14.B16, V14.B16
    VEOR   V25.B16, V15.B16, V15.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V16.B16, V16.B16
    VEOR   V23.B16, V17.B16, V17.B16
    VEOR   V24.B16, V16.B16, V16.B16
    VEOR   V25.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V18.B16, V18.B16
    VEOR   V23.B16, V19.B16, V19.B16
    VEOR   V24.B16, V18.B16, V18.B16
    VEOR   V25.B16, V19.B16, V19.B16
    // Check for early termination
    CMP    $5, R16
    BEQ    mulNeon_10x10Xor_store

    // Load and process 32 bytes from input 5 to 10 outputs
    VLD1.P 32(R10), [V26.B16, V27.B16]
    VUSHR  $4, V26.B16, V28.B16
    VUSHR  $4, V27.B16, V29.B16
    VAND   V20.B16, V26.B16, V26.B16
    VAND   V20.B16, V27.B16, V27.B16
    VAND   V20.B16, V28.B16, V28.B16
    VAND   V20.B16, V29.B16, V29.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V0.B16, V0.B16
    VEOR   V23.B16, V1.B16, V1.B16
    VEOR   V24.B16, V0.B16, V0.B16
    VEOR   V25.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V2.B16, V2.B16
    VEOR   V23.B16, V3.B16, V3.B16
    VEOR   V24.B16, V2.B16, V2.B16
    VEOR   V25.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V4.B16, V4.B16
    VEOR   V23.B16, V5.B16, V5.B16
    VEOR   V24.B16, V4.B16, V4.B16
    VEOR   V25.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V6.B16, V6.B16
    VEOR   V23.B16, V7.B16, V7.B16
    VEOR   V24.B16, V6.B16, V6.B16
    VEOR   V25.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V8.B16, V8.B16
    VEOR   V23.B16, V9.B16, V9.B16
    VEOR   V24.B16, V8.B16, V8.B16
    VEOR   V25.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V10.B16, V10.B16
    VEOR   V23.B16, V11.B16, V11.B16
    VEOR   V24.B16, V10.B16, V10.B16
    VEOR   V25.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V12.B16, V12.B16
    VEOR   V23.B16, V13.B16, V13.B16
    VEOR   V24.B16, V12.B16, V12.B16
    VEOR   V25.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V14.B16, V14.B16
    VEOR   V23.B16, V15.B16, V15.B16
    VEOR   V24.B16, V14.B16, V14.B16
    VEOR   V25.B16, V15.B16, V15.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V16.B16, V16.B16
    VEOR   V23.B16, V17.B16, V17.B16
    VEOR   V24.B16, V16.B16, V16.B16
    VEOR   V25.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V18.B16, V18.B16
    VEOR   V23.B16, V19.B16, V19.B16
    VEOR   V24.B16, V18.B16, V18.B16
    VEOR   V25.B16, V19.B16, V19.B16
    // Check for early termination
    CMP    $6, R16
    BEQ    mulNeon_10x10Xor_store

    // Load and process 32 bytes from input 6 to 10 outputs
    VLD1.P 32(R11), [V26.B16, V27.B16]
    VUSHR  $4, V26.B16, V28.B16
    VUSHR  $4, V27.B16, V29.B16
    VAND   V20.B16, V26.B16, V26.B16
    VAND   V20.B16, V27.B16, V27.B16
    VAND   V20.B16, V28.B16, V28.B16
    VAND   V20.B16, V29.B16, V29.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V0.B16, V0.B16
    VEOR   V23.B16, V1.B16, V1.B16
    VEOR   V24.B16, V0.B16, V0.B16
    VEOR   V25.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V2.B16, V2.B16
    VEOR   V23.B16, V3.B16, V3.B16
    VEOR   V24.B16, V2.B16, V2.B16
    VEOR   V25.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V4.B16, V4.B16
    VEOR   V23.B16, V5.B16, V5.B16
    VEOR   V24.B16, V4.B16, V4.B16
    VEOR   V25.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V6.B16, V6.B16
    VEOR   V23.B16, V7.B16, V7.B16
    VEOR   V24.B16, V6.B16, V6.B16
    VEOR   V25.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V8.B16, V8.B16
    VEOR   V23.B16, V9.B16, V9.B16
    VEOR   V24.B16, V8.B16, V8.B16
    VEOR   V25.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V10.B16, V10.B16
    VEOR   V23.B16, V11.B16, V11.B16
    VEOR   V24.B16, V10.B16, V10.B16
    VEOR   V25.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V12.B16, V12.B16
    VEOR   V23.B16, V13.B16, V13.B16
    VEOR   V24.B16, V12.B16, V12.B16
    VEOR   V25.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V14.B16, V14.B16
    VEOR   V23.B16, V15.B16, V15.B16
    VEOR   V24.B16, V14.B16, V14.B16
    VEOR   V25.B16, V15.B16, V15.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V16.B16, V16.B16
    VEOR   V23.B16, V17.B16, V17.B16
    VEOR   V24.B16, V16.B16, V16.B16
    VEOR   V25.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V18.B16, V18.B16
    VEOR   V23.B16, V19.B16, V19.B16
    VEOR   V24.B16, V18.B16, V18.B16
    VEOR   V25.B16, V19.B16, V19.B16
    // Check for early termination
    CMP    $7, R16
    BEQ    mulNeon_10x10Xor_store

    // Load and process 32 bytes from input 7 to 10 outputs
    VLD1.P 32(R12), [V26.B16, V27.B16]
    VUSHR  $4, V26.B16, V28.B16
    VUSHR  $4, V27.B16, V29.B16
    VAND   V20.B16, V26.B16, V26.B16
    VAND   V20.B16, V27.B16, V27.B16
    VAND   V20.B16, V28.B16, V28.B16
    VAND   V20.B16, V29.B16, V29.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V0.B16, V0.B16
    VEOR   V23.B16, V1.B16, V1.B16
    VEOR   V24.B16, V0.B16, V0.B16
    VEOR   V25.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V2.B16, V2.B16
    VEOR   V23.B16, V3.B16, V3.B16
    VEOR   V24.B16, V2.B16, V2.B16
    VEOR   V25.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V4.B16, V4.B16
    VEOR   V23.B16, V5.B16, V5.B16
    VEOR   V24.B16, V4.B16, V4.B16
    VEOR   V25.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V6.B16, V6.B16
    VEOR   V23.B16, V7.B16, V7.B16
    VEOR   V24.B16, V6.B16, V6.B16
    VEOR   V25.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V8.B16, V8.B16
    VEOR   V23.B16, V9.B16, V9.B16
    VEOR   V24.B16, V8.B16, V8.B16
    VEOR   V25.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V10.B16, V10.B16
    VEOR   V23.B16, V11.B16, V11.B16
    VEOR   V24.B16, V10.B16, V10.B16
    VEOR   V25.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V12.B16, V12.B16
    VEOR   V23.B16, V13.B16, V13.B16
    VEOR   V24.B16, V12.B16, V12.B16
    VEOR   V25.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V14.B16, V14.B16
    VEOR   V23.B16, V15.B16, V15.B16
    VEOR   V24.B16, V14.B16, V14.B16
    VEOR   V25.B16, V15.B16, V15.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V16.B16, V16.B16
    VEOR   V23.B16, V17.B16, V17.B16
    VEOR   V24.B16, V16.B16, V16.B16
    VEOR   V25.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V18.B16, V18.B16
    VEOR   V23.B16, V19.B16, V19.B16
    VEOR   V24.B16, V18.B16, V18.B16
    VEOR   V25.B16, V19.B16, V19.B16
    // Check for early termination
    CMP    $8, R16
    BEQ    mulNeon_10x10Xor_store

    // Load and process 32 bytes from input 8 to 10 outputs
    VLD1.P 32(R13), [V26.B16, V27.B16]
    VUSHR  $4, V26.B16, V28.B16
    VUSHR  $4, V27.B16, V29.B16
    VAND   V20.B16, V26.B16, V26.B16
    VAND   V20.B16, V27.B16, V27.B16
    VAND   V20.B16, V28.B16, V28.B16
    VAND   V20.B16, V29.B16, V29.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V0.B16, V0.B16
    VEOR   V23.B16, V1.B16, V1.B16
    VEOR   V24.B16, V0.B16, V0.B16
    VEOR   V25.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V2.B16, V2.B16
    VEOR   V23.B16, V3.B16, V3.B16
    VEOR   V24.B16, V2.B16, V2.B16
    VEOR   V25.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V4.B16, V4.B16
    VEOR   V23.B16, V5.B16, V5.B16
    VEOR   V24.B16, V4.B16, V4.B16
    VEOR   V25.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V6.B16, V6.B16
    VEOR   V23.B16, V7.B16, V7.B16
    VEOR   V24.B16, V6.B16, V6.B16
    VEOR   V25.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V8.B16, V8.B16
    VEOR   V23.B16, V9.B16, V9.B16
    VEOR   V24.B16, V8.B16, V8.B16
    VEOR   V25.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V10.B16, V10.B16
    VEOR   V23.B16, V11.B16, V11.B16
    VEOR   V24.B16, V10.B16, V10.B16
    VEOR   V25.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V12.B16, V12.B16
    VEOR   V23.B16, V13.B16, V13.B16
    VEOR   V24.B16, V12.B16, V12.B16
    VEOR   V25.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V14.B16, V14.B16
    VEOR   V23.B16, V15.B16, V15.B16
    VEOR   V24.B16, V14.B16, V14.B16
    VEOR   V25.B16, V15.B16, V15.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V16.B16, V16.B16
    VEOR   V23.B16, V17.B16, V17.B16
    VEOR   V24.B16, V16.B16, V16.B16
    VEOR   V25.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V18.B16, V18.B16
    VEOR   V23.B16, V19.B16, V19.B16
    VEOR   V24.B16, V18.B16, V18.B16
    VEOR   V25.B16, V19.B16, V19.B16
    // Check for early termination
    CMP    $9, R16
    BEQ    mulNeon_10x10Xor_store

    // Load and process 32 bytes from input 9 to 10 outputs
    VLD1.P 32(R3), [V26.B16, V27.B16]
    VUSHR  $4, V26.B16, V28.B16
    VUSHR  $4, V27.B16, V29.B16
    VAND   V20.B16, V26.B16, V26.B16
    VAND   V20.B16, V27.B16, V27.B16
    VAND   V20.B16, V28.B16, V28.B16
    VAND   V20.B16, V29.B16, V29.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V0.B16, V0.B16
    VEOR   V23.B16, V1.B16, V1.B16
    VEOR   V24.B16, V0.B16, V0.B16
    VEOR   V25.B16, V1.B16, V1.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V2.B16, V2.B16
    VEOR   V23.B16, V3.B16, V3.B16
    VEOR   V24.B16, V2.B16, V2.B16
    VEOR   V25.B16, V3.B16, V3.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V4.B16, V4.B16
    VEOR   V23.B16, V5.B16, V5.B16
    VEOR   V24.B16, V4.B16, V4.B16
    VEOR   V25.B16, V5.B16, V5.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V6.B16, V6.B16
    VEOR   V23.B16, V7.B16, V7.B16
    VEOR   V24.B16, V6.B16, V6.B16
    VEOR   V25.B16, V7.B16, V7.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V8.B16, V8.B16
    VEOR   V23.B16, V9.B16, V9.B16
    VEOR   V24.B16, V8.B16, V8.B16
    VEOR   V25.B16, V9.B16, V9.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V10.B16, V10.B16
    VEOR   V23.B16, V11.B16, V11.B16
    VEOR   V24.B16, V10.B16, V10.B16
    VEOR   V25.B16, V11.B16, V11.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V12.B16, V12.B16
    VEOR   V23.B16, V13.B16, V13.B16
    VEOR   V24.B16, V12.B16, V12.B16
    VEOR   V25.B16, V13.B16, V13.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V14.B16, V14.B16
    VEOR   V23.B16, V15.B16, V15.B16
    VEOR   V24.B16, V14.B16, V14.B16
    VEOR   V25.B16, V15.B16, V15.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V16.B16, V16.B16
    VEOR   V23.B16, V17.B16, V17.B16
    VEOR   V24.B16, V16.B16, V16.B16
    VEOR   V25.B16, V17.B16, V17.B16
    VLD1.P 32(R2), [V22.B16, V23.B16]
    VLD1.P 32(R2), [V24.B16, V25.B16]
    VTBL   V26.B16, [V22.B16], V22.B16
    VTBL   V27.B16, [V23.B16], V23.B16
    VTBL   V28.B16, [V24.B16], V24.B16
    VTBL   V29.B16, [V25.B16], V25.B16
    VEOR   V22.B16, V18.B16, V18.B16
    VEOR   V23.B16, V19.B16, V19.B16
    VEOR   V24.B16, V18.B16, V18.B16
    VEOR   V25.B16, V19.B16, V19.B16

mulNeon_10x10Xor_store:
    // Store 10 outputs
    MOVD (R14), R6
    ADD    R15<<3, R6
    VST1   [V0.D2, V1.D2], (R6)
    MOVD 24(R14), R6
    ADD    R15<<3, R6
    VST1   [V2.D2, V3.D2], (R6)
    MOVD 48(R14), R6
    ADD    R15<<3, R6
    VST1   [V4.D2, V5.D2], (R6)
    MOVD 72(R14), R6
    ADD    R15<<3, R6
    VST1   [V6.D2, V7.D2], (R6)
    MOVD 96(R14), R6
    ADD    R15<<3, R6
    VST1   [V8.D2, V9.D2], (R6)
    MOVD 120(R14), R6
    ADD    R15<<3, R6
    VST1   [V10.D2, V11.D2], (R6)
    MOVD 144(R14), R6
    ADD    R15<<3, R6
    VST1   [V12.D2, V13.D2], (R6)
    MOVD 168(R14), R6
    ADD    R15<<3, R6
    VST1   [V14.D2, V15.D2], (R6)
    MOVD 192(R14), R6
    ADD    R15<<3, R6
    VST1   [V16.D2, V17.D2], (R6)
    MOVD 216(R14), R6
    ADD    R15<<3, R6
    VST1   [V18.D2, V19.D2], (R6)

    // Prepare for next loop
    ADD    $4, R15
    SUBS $1, R0
    BNE  mulNeon_10x10Xor_loop

mulNeon_10x10Xor_end:
    RET

